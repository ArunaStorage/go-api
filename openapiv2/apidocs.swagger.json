{
  "swagger": "2.0",
  "info": {
    "title": "Aruna Object Storage (AOS) REST API",
    "version": "0.4"
  },
  "tags": [
    {
      "name": "ProjectService"
    },
    {
      "name": "InternalProxyService"
    },
    {
      "name": "UpdateNotificationService"
    },
    {
      "name": "CollectionService"
    },
    {
      "name": "EndpointService"
    },
    {
      "name": "ObjectService"
    },
    {
      "name": "ObjectGroupService"
    },
    {
      "name": "UserService"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/auth/register": {
      "post": {
        "operationId": "UserService_RegisterUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegisterUserResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RegisterUserRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/auth/token": {
      "get": {
        "summary": "Returns one API token by id",
        "operationId": "UserService_GetAPIToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAPITokenResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "description": "The token id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "or the user_defined name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "CreateAPIToken Creates an API token to authenticate",
        "operationId": "UserService_CreateAPIToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAPITokenResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAPITokenRequest"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/auth/token/{tokenId}": {
      "delete": {
        "summary": "DeleteAPITokenRequest Deletes the specified API Token",
        "operationId": "UserService_DeleteAPIToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAPITokenResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tokenId",
            "description": "The token_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/auth/tokens": {
      "get": {
        "summary": "Returns all API token for a specific user",
        "operationId": "UserService_GetAPITokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAPITokensResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "DeleteAPITokenRequest Deletes the specified API Token",
        "operationId": "UserService_DeleteAPITokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAPITokensResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "description": "This request invalidates all tokens of a specific user\nusually the user_id is specified via the provided oidc or aruna token\nThis user_id can be used by admins to invalidate all tokens of a specific\nuser",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/collection": {
      "post": {
        "summary": "CreateNewCollection creates a new Collection",
        "operationId": "CollectionService_CreateNewCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateNewCollectionResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateNewCollectionRequest"
            }
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/collection/{collectionId}": {
      "get": {
        "summary": "GetCollection queries a specific Collection by ID\nThe result can be one_of:\nCollectionOverview -\u003e default\nCollectionWithID\nCollection (full)\nThis can be modified with the optional OutputFormat parameter",
        "operationId": "CollectionService_GetCollectionByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCollectionByIDResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      },
      "delete": {
        "summary": "This request deletes the collection.\nIf with_version is true, it deletes the collection and all its versions.\nIf cascade is true, all objects that are owned by the collection will also\ndeleted. This should be avoided",
        "operationId": "CollectionService_DeleteCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteCollectionResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      },
      "put": {
        "summary": "UpdateCollection updates the current collection\nThis will update the collection in place if it is unversioned / latest\nA versioned (pinned) collection requires a new semantic version after the\nupdate This can be used to pin a collection to a specific version similar\nto the PinCollectionVersion request",
        "operationId": "CollectionService_UpdateCollection",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateCollectionResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "projectId": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1KeyValue"
                  }
                },
                "hooks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1KeyValue"
                  }
                },
                "labelOntology": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1LabelOntology"
                  }
                },
                "dataclass": {
                  "$ref": "#/definitions/v1DataClass",
                  "title": "Optional update Dataclass, this will not overwrite\nthe dataclass of all existing associated objects\nNew objects can only have this dataclass"
                },
                "version": {
                  "$ref": "#/definitions/v1Version",
                  "title": "If this is set, the collection will be automatically pinned to this version\nSimilar to the more explicit Pin request\nUpdating a pinned collection will make this field required\n(optional if unpinned || required if pinned)"
                }
              },
              "title": "This updates the collection\nUpdating a pinned collection will require a new version to be created"
            }
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/collection/{collectionId}/group": {
      "get": {
        "summary": "GetObjectGroups is a request that returns a (paginated) list of\nObjectGroups that contain a specific set of labels.",
        "operationId": "ObjectGroupService_GetObjectGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectGroupsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "labelIdFilter.labels.andOrOr",
            "description": "True if and, if empty or false or",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "labelIdFilter.labels.keysOnly",
            "description": "Should only the keys be considered ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "labelIdFilter.ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      },
      "post": {
        "summary": "CreateObjectGroup creates a new ObjectGroup in the collection",
        "operationId": "ObjectGroupService_CreateObjectGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateObjectGroupResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "objectIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "This is the reference to the Objects that should be added to the group"
                },
                "metaObjectIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "This is a reference to the Objects that are associated with \"meta\" data\nabout corresponding objects in the group"
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1KeyValue"
                  }
                },
                "hooks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1KeyValue"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      }
    },
    "/v1/collection/{collectionId}/group/{groupId}": {
      "get": {
        "summary": "GetObjectGroupById gets a specific ObjectGroup by ID\nBy default the latest revision is always returned, older revisions need to\nbe specified separately",
        "operationId": "ObjectGroupService_GetObjectGroupById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectGroupByIdResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      },
      "delete": {
        "summary": "DeleteObjectGroup is a request that deletes a specified ObjectGroup\nThis does not delete the associated Objects",
        "operationId": "ObjectGroupService_DeleteObjectGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteObjectGroupResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      },
      "put": {
        "summary": "UpdateObjectGroup creates an updated ObjectGroup\nObjectGroups are immutable\nUpdating an ObjectGroup will create a new Revision of the ObjectGroup",
        "operationId": "ObjectGroupService_UpdateObjectGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateObjectGroupResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "objectIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "This is the reference to the Objects that should be added to the group"
                },
                "metaObjectIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "This is a reference to the Objects that are associated with \"meta\" data\nabout corresponding objects in the group"
                },
                "labels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1KeyValue"
                  }
                },
                "hooks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1KeyValue"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      }
    },
    "/v1/collection/{collectionId}/group/{groupId}/history": {
      "get": {
        "operationId": "ObjectGroupService_GetObjectGroupHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectGroupHistoryResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      }
    },
    "/v1/collection/{collectionId}/group/{groupId}/objects": {
      "get": {
        "operationId": "ObjectGroupService_GetObjectGroupObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectGroupObjectsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "metaOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object": {
      "post": {
        "summary": "This initializes a new object\nInitializing an object will put it in a staging area.\nStaged objects will get a separate staging id and need to be finished\nbefore they can be used.",
        "operationId": "ObjectService_InitializeNewObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InitializeNewObjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "Collection id of the collection to which the object will be added.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "object": {
                  "$ref": "#/definitions/v1StageObject",
                  "description": "This describes the object to be initialized."
                },
                "preferredEndpointId": {
                  "type": "string",
                  "title": "(optional) Used to specify a preferred endpoint by id\nthis can be used to specify which endpoint this object should use\nonly needed if it is not the default endpoint for the current server\ninstance"
                },
                "multipart": {
                  "type": "boolean",
                  "title": "Should the object be uploaded via multipart?"
                },
                "isSpecification": {
                  "type": "boolean",
                  "title": "Is specification ?\nShould this object contain a specification for the collection ?"
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}": {
      "get": {
        "summary": "GetObjectByID gets a specific Object by ID that is associated to the\ncurrent collection By default only the latest revision of an object will be\nreturned Specify a revision_number to select an older revision With the\noptional with_url boolean a download link can automatically be requested",
        "operationId": "ObjectService_GetObjectByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectByIDResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "withUrl",
            "description": "With URL: Include URL in response ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      },
      "delete": {
        "summary": "Deletes the object with the complete revision history.\nThis should be avoided if possible.\nThis method allows the owner to cascade the deletion of all objects that\nwere cloned from this object.\n-\u003e GDPR compliant procedure.",
        "operationId": "ObjectService_DeleteObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteObjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "CollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "description": "ObjectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "withRevisions",
            "description": "Delete including revisions",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "force",
            "description": "Force delete including revisions",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/add_labels": {
      "post": {
        "summary": "AddLabelToObject is a specific request to add a new label\nto an existing object, in contrast to UpdateObject\nthis will not create a new object in the staging area\nInstead it will directly add the specified label(s) to the object",
        "operationId": "ObjectService_AddLabelToObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddLabelToObjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/clone": {
      "post": {
        "summary": "This method clones an object and creates a copy in the same collection.\nThis copy has a new id and revision and will not receive any updates from\nthe original object.",
        "operationId": "ObjectService_CloneObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CloneObjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "From CollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "description": "ObjectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "targetCollectionId": {
                  "type": "string",
                  "title": "Target CollectionID"
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/download": {
      "get": {
        "summary": "This method will return a url that can be used to download a file from S3.",
        "operationId": "ObjectService_GetDownloadURL",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDownloadURLResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/endpoints": {
      "get": {
        "summary": "GetObjectEndpoints returns a list of endpoints\nOne endpoint will be the \"default\" endpoint",
        "operationId": "ObjectService_GetObjectEndpoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectEndpointsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/groups": {
      "get": {
        "summary": "GetObjectGroupsFromObject gets all ObjectGroups associated to a specific\nObject Objects can be part of multiple ObjectGroups at once",
        "operationId": "ObjectGroupService_GetObjectGroupsFromObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectGroupsFromObjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ObjectGroupService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/latest": {
      "get": {
        "summary": "GetLatestObjectRevision returns the latest revision of a specific object\nThe returned `latest` object will have a different id if the current\nobject is not the latest revision",
        "operationId": "ObjectService_GetLatestObjectRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLatestObjectRevisionResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/reference/{targetCollectionId}": {
      "post": {
        "operationId": "ObjectService_CreateObjectReference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateObjectReferenceResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "OwnerCollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "description": "ObjectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "targetCollectionId",
            "description": "BorrowerCollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "writeable": {
                  "type": "boolean",
                  "title": "Should the other collection have permissions to edit the ressource"
                },
                "autoUpdate": {
                  "type": "boolean",
                  "title": "Should the borrowed ressource be automatically updated ?"
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/references": {
      "post": {
        "summary": "Get a list of references for this object (optional) including all revisions",
        "operationId": "ObjectService_GetReferences",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetReferencesResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "withRevisions",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/revisions": {
      "get": {
        "summary": "GetObjectRevisions returns the full list of revisions of a specified object\nWith the optional with_url boolean a download link can automatically be\nrequested for each Object This is by default a paginated request",
        "operationId": "ObjectService_GetObjectRevisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectRevisionsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "withUrl",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/set_hooks": {
      "post": {
        "summary": "SetHooksOfObject is a specific request to update the complete list\nof hooks for a specific object. This will not update the object\nand create a new id, instead it will overwrite all hooks of the existing\nobject.",
        "operationId": "ObjectService_SetHooksOfObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetHooksOfObjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/staging/{uploadId}/finish": {
      "post": {
        "summary": "This method completes the staging of an object.",
        "operationId": "ObjectService_FinishObjectStaging",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FinishObjectStagingResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "CollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "description": "ObjectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploadId",
            "description": "Always the S3 upload_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "hash": {
                  "$ref": "#/definitions/v1Hash",
                  "description": "Hash of the uploaded data - used to verify the data integrity.\nThis supports multiple hashing algorithms."
                },
                "noUpload": {
                  "type": "boolean",
                  "title": "If the staging object had no uploads\nUse this argument to skip the finish upload request"
                },
                "completedParts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1CompletedParts"
                  },
                  "title": "If the upload was multipart, this is the list of parts that were uploaded.\nShould be empty if the upload was not multipart.\n(optional)"
                },
                "autoUpdate": {
                  "type": "boolean",
                  "title": "Should the object be auto-updated in the collection?\ndefault: false"
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/staging/{uploadId}/upload": {
      "get": {
        "summary": "This method will return a (multi-part) url that can be used to upload a\nfile to S3. Part is a optional query parameter that can be used to upload a\npart of the file / multipart upload.",
        "operationId": "ObjectService_GetUploadURL",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUploadURLResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "CollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "description": "ObjectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "uploadId",
            "description": "Upload ID, a ID used to identify the upload / staging object",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "multipart",
            "description": "Is this a multipart upload?",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "partNumber",
            "description": "(optional) if multi was initialized",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/object/{objectId}/update": {
      "post": {
        "summary": "Objects are immutable!\nUpdating an object will create a new revision for the object\nThis method will put the new revision in a staging area.\nStaged objects will get a separate staging id and need to be finished\nbefore they can be used.",
        "operationId": "ObjectService_UpdateObject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateObjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "collection ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectId",
            "description": "Existing object ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "object": {
                  "$ref": "#/definitions/v1StageObject",
                  "title": "New object data"
                },
                "reupload": {
                  "type": "boolean",
                  "title": "Should new data be uploaded ?"
                },
                "preferredEndpointId": {
                  "type": "string",
                  "title": "If this is an reupload a preferred endpoint\ncan be specified by id"
                },
                "multiPart": {
                  "type": "boolean",
                  "title": "Should a multipart upload be used?"
                },
                "isSpecification": {
                  "type": "boolean",
                  "title": "Is specification ?\nShould this object contain a specification for the collection ?"
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/objects": {
      "get": {
        "summary": "GetObjects returns a (paginated) list of objects in a specific collection\nBy default only the latest revisions of all objects will be shown\nThis behaviour can be changed with the include_history flag\nWith the optional with_url boolean a download link can automatically be\nrequested for each Object This request contains a LabelOrIDQuery message,\nthis is either a list of request ObjectIDs or a query filtered by Labels",
        "operationId": "ObjectService_GetObjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetObjectsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "labelIdFilter.labels.andOrOr",
            "description": "True if and, if empty or false or",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "labelIdFilter.labels.keysOnly",
            "description": "Should only the keys be considered ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "labelIdFilter.ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "withUrl",
            "description": "With URL: Include URL in response ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeHistory",
            "description": "Should this request consider older revisions of Objects ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/objects/stream": {
      "get": {
        "summary": "This method can be used to get download urls for multiple objects.\nThe order of the returned urls will be the same as the order of the object\nids in the request.",
        "operationId": "ObjectService_GetDownloadLinksBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDownloadLinksBatchResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "CollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "objects",
            "description": "ObjectIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ObjectService"
        ]
      },
      "post": {
        "summary": "Creates a stream of objects and presigned links based on the provided query\nThis can be used retrieve a large number of Objects as a stream that would\notherwise cause issues with the connection",
        "operationId": "ObjectService_CreateDownloadLinksStream",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1CreateDownloadLinksStreamResponse"
                },
                "error": {
                  "$ref": "#/definitions/googlerpcStatus"
                }
              },
              "title": "Stream result of v1CreateDownloadLinksStreamResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "description": "CollectionID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "objects": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "ObjectIds"
                }
              }
            }
          }
        ],
        "tags": [
          "ObjectService"
        ]
      }
    },
    "/v1/collection/{collectionId}/pin": {
      "post": {
        "summary": "PinCollectionVersion this pins the current status of the version to a\nspecific version This effectively creates a copy of the collection with a\nstable version All objects will be pinned to an explicit revision number\nPinned collections can not be updated in place",
        "operationId": "CollectionService_PinCollectionVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PinCollectionVersionResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "collectionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "version": {
                  "$ref": "#/definitions/v1Version"
                }
              }
            }
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/endpoint": {
      "get": {
        "summary": "Gets an specific endpoint by ID or Name",
        "operationId": "EndpointService_GetEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEndpointResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "endpointName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endpointId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EndpointService"
        ]
      },
      "post": {
        "operationId": "EndpointService_AddEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddEndpointResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddEndpointRequest"
            }
          }
        ],
        "tags": [
          "EndpointService"
        ]
      }
    },
    "/v1/endpoint/default": {
      "get": {
        "summary": "This request returns the default endpoint for the current server\nIt may produce different results depending on the used server",
        "operationId": "EndpointService_GetDefaultEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultEndpointResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "EndpointService"
        ]
      }
    },
    "/v1/endpoint/{endpointId}": {
      "delete": {
        "summary": "Deletes a specific endpoint by id\nThis needs admin permissions",
        "operationId": "EndpointService_DeleteEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteEndpointResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EndpointService"
        ]
      }
    },
    "/v1/endpoints": {
      "get": {
        "summary": "Gets all available endpoints",
        "operationId": "EndpointService_GetEndpoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEndpointsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "EndpointService"
        ]
      }
    },
    "/v1/project": {
      "post": {
        "summary": "This creates a new authorization group.option\nAll users and collections are bundled in a authorization group.",
        "operationId": "ProjectService_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateProjectRequest"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/v1/project/{projectId_1}/collections": {
      "get": {
        "summary": "GetCollections queries multiple collections by ID or by LabelFilter\nThis returns by default a paginated result with 20 entries.",
        "operationId": "CollectionService_GetCollections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCollectionsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId_1",
            "description": "Filter by Labels (optional) OR request a specific list of Collections by id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "labelOrIdFilter.labels.andOrOr",
            "description": "True if and, if empty or false or",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "labelOrIdFilter.labels.keysOnly",
            "description": "Should only the keys be considered ?",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "labelOrIdFilter.ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "CollectionService"
        ]
      }
    },
    "/v1/project/{projectId}": {
      "get": {
        "summary": "GetProject Returns the specified project",
        "operationId": "ProjectService_GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "The id of the project to get",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "delete": {
        "summary": "Destroys the project and all its associated data. Must be empty\n(cannot contain any collections).",
        "operationId": "ProjectService_DestroyProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DestroyProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "The id of the project to destroy",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "put": {
        "summary": "Updates the project. All (meta) data will be overwritten.",
        "operationId": "ProjectService_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Updated name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "description": "Update description",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/v1/project/{projectId}/adduser": {
      "post": {
        "summary": "AddUserToProject Adds a new user to a given project by its id",
        "operationId": "ProjectService_AddUserToProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddUserToProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "The id of the project to add the user to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userPermission": {
                  "$ref": "#/definitions/v1ProjectPermission"
                }
              }
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/v1/project/{projectId}/collections": {
      "get": {
        "summary": "GetProjectCollections Returns all collections that belong to a certain\nproject",
        "operationId": "ProjectService_GetProjectCollections",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectCollectionsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "The id of the project to get the collections for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageRequest.lastUuid",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageRequest.pageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/v1/project/{projectId}/edit_user": {
      "post": {
        "summary": "Edit the user_permission of a specific user for the project.",
        "operationId": "ProjectService_EditUserPermissionsForProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EditUserPermissionsForProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userPermission.userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userPermission.projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userPermission.permission",
            "description": " - PERMISSION_READ: project but have no default permissions\n - PERMISSION_ADMIN: that owns the object / Create new collections",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PERMISSION_UNSPECIFIED",
              "PERMISSION_NONE",
              "PERMISSION_READ",
              "PERMISSION_APPEND",
              "PERMISSION_MODIFY",
              "PERMISSION_ADMIN"
            ],
            "default": "PERMISSION_UNSPECIFIED"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/v1/project/{projectId}/get_user": {
      "post": {
        "summary": "Get the user_permission of a specific user for the project.",
        "operationId": "ProjectService_GetUserPermissionsForProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserPermissionsForProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/v1/project/{projectId}/remove_user": {
      "post": {
        "summary": "Removes a specified user from the project.",
        "operationId": "ProjectService_RemoveUserFromProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveUserFromProjectResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/v1/user": {
      "get": {
        "summary": "GetUserRequest is a request that returns the user information of the\ncurrent user or if invoked by an admin from another user",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/display_name": {
      "post": {
        "operationId": "UserService_UpdateUserDisplayName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateUserDisplayNameResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "newDisplayName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/{userId}/activate": {
      "post": {
        "operationId": "UserService_ActivateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateUserResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1/user/{userId}/projects": {
      "delete": {
        "operationId": "UserService_GetUserProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserProjectsResponse"
            }
          },
          "401": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {}
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "EventNotificationMessageUpdateType": {
      "type": "string",
      "enum": [
        "UPDATE_TYPE_UNSPECIFIED",
        "UPDATE_TYPE_CREATED",
        "UPDATE_TYPE_AVAILABLE",
        "UPDATE_TYPE_UPDATED",
        "UPDATE_TYPE_METADATA_UPDATED",
        "UPDATE_TYPE_DELETED"
      ],
      "default": "UPDATE_TYPE_UNSPECIFIED"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "internalv1Location": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1LocationType"
        },
        "bucket": {
          "type": "string"
        },
        "path": {
          "type": "string",
          "description": "for local file."
        }
      },
      "description": "Locations is the path to the requested data."
    },
    "modelsv1Status": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_INITIALIZING",
        "STATUS_AVAILABLE",
        "STATUS_UNAVAILABLE",
        "STATUS_ERROR",
        "STATUS_TRASH"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "An arbitrary status for Objects"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "v1ActivateUserResponse": {
      "type": "object"
    },
    "v1AddEndpointRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "epType": {
          "$ref": "#/definitions/v1EndpointType"
        },
        "proxyHostname": {
          "type": "string"
        },
        "internalHostname": {
          "type": "string"
        },
        "documentationPath": {
          "type": "string"
        },
        "isPublic": {
          "type": "boolean"
        }
      }
    },
    "v1AddEndpointResponse": {
      "type": "object",
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/v1Endpoint"
        }
      }
    },
    "v1AddLabelToObjectResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object",
          "title": "Returns the updated Object"
        }
      }
    },
    "v1AddUserToProjectResponse": {
      "type": "object"
    },
    "v1CloneObjectResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object",
          "description": "This describes the new object."
        }
      }
    },
    "v1CollectionOverview": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "hooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "labelOntology": {
          "$ref": "#/definitions/v1LabelOntology"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "semanticVersion": {
          "$ref": "#/definitions/v1Version"
        },
        "latest": {
          "type": "boolean"
        },
        "stats": {
          "$ref": "#/definitions/v1CollectionStats"
        },
        "isPublic": {
          "type": "boolean"
        }
      },
      "title": "This is a representation of the Collection without the recursive nature of\nobjectreferences"
    },
    "v1CollectionOverviews": {
      "type": "object",
      "properties": {
        "collectionOverviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CollectionOverview"
          }
        }
      },
      "title": "Multiple CollectionOverviews"
    },
    "v1CollectionStats": {
      "type": "object",
      "properties": {
        "objectStats": {
          "$ref": "#/definitions/v1Stats"
        },
        "objectGroupCount": {
          "type": "string",
          "format": "int64"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Stats for a collection"
    },
    "v1CompletedParts": {
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "title": "Multipart identifier"
        },
        "part": {
          "type": "string",
          "format": "int64",
          "title": "Part number"
        }
      }
    },
    "v1CreateAPITokenRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "Empty if token_type is personal, otherwise the id of the collection or\nproject to create the token for"
        },
        "collectionId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "expiresAt": {
          "$ref": "#/definitions/v1ExpiresAt"
        },
        "permission": {
          "$ref": "#/definitions/v1Permission"
        }
      }
    },
    "v1CreateAPITokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/v1Token",
          "title": "This contains only the token description"
        },
        "tokenSecret": {
          "type": "string",
          "title": "This is the actual secret token\nAttention, this can not be recreated and needs to be stored securely\nNew tokens will always contain a new secret"
        }
      }
    },
    "v1CreateBucketResponse": {
      "type": "object"
    },
    "v1CreateDownloadLinksStreamResponse": {
      "type": "object",
      "properties": {
        "url": {
          "$ref": "#/definitions/v1URL"
        }
      }
    },
    "v1CreateEventStreamingGroupRequestEventResources": {
      "type": "string",
      "enum": [
        "EVENT_RESOURCES_UNSPECIFIED",
        "EVENT_RESOURCES_COLLECTION_RESOURCE",
        "EVENT_RESOURCES_ALL_RESOURCE"
      ],
      "default": "EVENT_RESOURCES_UNSPECIFIED"
    },
    "v1CreateEventStreamingGroupResponse": {
      "type": "object",
      "properties": {
        "streamGroupId": {
          "type": "string"
        }
      }
    },
    "v1CreateNewCollectionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "hooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "dataclass": {
          "$ref": "#/definitions/v1DataClass",
          "title": "Optional dataclass"
        }
      }
    },
    "v1CreateNewCollectionResponse": {
      "type": "object",
      "properties": {
        "collectionId": {
          "type": "string"
        }
      }
    },
    "v1CreateObjectGroupResponse": {
      "type": "object",
      "properties": {
        "objectGroup": {
          "$ref": "#/definitions/v1ObjectGroupOverview"
        }
      }
    },
    "v1CreateObjectReferenceResponse": {
      "type": "object"
    },
    "v1CreatePresignedDownloadResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The presigned URL to download the file to."
        }
      }
    },
    "v1CreatePresignedUploadUrlResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The presigned URL to upload the file to."
        }
      }
    },
    "v1CreateProjectRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1CreateProjectResponse": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        }
      }
    },
    "v1DataClass": {
      "type": "string",
      "enum": [
        "DATA_CLASS_UNSPECIFIED",
        "DATA_CLASS_PUBLIC",
        "DATA_CLASS_PRIVATE",
        "DATA_CLASS_CONFIDENTIAL",
        "DATA_CLASS_PROTECTED"
      ],
      "default": "DATA_CLASS_UNSPECIFIED",
      "title": "Dataclass defines the confidentiality of the object"
    },
    "v1DeleteAPITokenResponse": {
      "type": "object"
    },
    "v1DeleteAPITokensResponse": {
      "type": "object"
    },
    "v1DeleteCollectionResponse": {
      "type": "object"
    },
    "v1DeleteEndpointResponse": {
      "type": "object"
    },
    "v1DeleteObjectGroupResponse": {
      "type": "object"
    },
    "v1DeleteObjectResponse": {
      "type": "object"
    },
    "v1DestroyProjectResponse": {
      "type": "object"
    },
    "v1EditUserPermissionsForProjectResponse": {
      "type": "object"
    },
    "v1Endpoint": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "epType": {
          "$ref": "#/definitions/v1EndpointType"
        },
        "name": {
          "type": "string"
        },
        "proxyHostname": {
          "type": "string"
        },
        "internalHostname": {
          "type": "string"
        },
        "documentationPath": {
          "type": "string"
        },
        "isPublic": {
          "type": "boolean"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "v1EndpointType": {
      "type": "string",
      "enum": [
        "ENDPOINT_TYPE_UNSPECIFIED",
        "ENDPOINT_TYPE_S3",
        "ENDPOINT_TYPE_FILE"
      ],
      "default": "ENDPOINT_TYPE_UNSPECIFIED"
    },
    "v1EventNotificationMessage": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1EventNotificationMessageEventResources"
        },
        "resourceId": {
          "type": "string"
        },
        "updatedType": {
          "$ref": "#/definitions/EventNotificationMessageUpdateType"
        }
      }
    },
    "v1EventNotificationMessageEventResources": {
      "type": "string",
      "enum": [
        "EVENT_RESOURCES_UNSPECIFIED",
        "EVENT_RESOURCES_COLLECTION_RESOURCE",
        "EVENT_RESOURCES_ALL_RESOURCE"
      ],
      "default": "EVENT_RESOURCES_UNSPECIFIED"
    },
    "v1ExpiresAt": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1FinishObjectStagingResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object"
        }
      }
    },
    "v1FinishPresignedUploadResponse": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "description": "If the upload finished successfully."
        }
      }
    },
    "v1GetAPITokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/v1Token",
          "title": "List of API tokens"
        }
      }
    },
    "v1GetAPITokensResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Token"
          },
          "title": "List of API tokens with redacted actual token"
        }
      }
    },
    "v1GetCollectionByIDResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/v1CollectionOverview"
        }
      }
    },
    "v1GetCollectionsResponse": {
      "type": "object",
      "properties": {
        "collections": {
          "$ref": "#/definitions/v1CollectionOverviews",
          "title": "These are plural representations of their specific single counterparts"
        }
      }
    },
    "v1GetDefaultEndpointResponse": {
      "type": "object",
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/v1Endpoint"
        }
      }
    },
    "v1GetDownloadLinksBatchResponse": {
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1URL"
          }
        }
      }
    },
    "v1GetDownloadURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "$ref": "#/definitions/v1URL"
        }
      }
    },
    "v1GetEndpointResponse": {
      "type": "object",
      "properties": {
        "endpoint": {
          "$ref": "#/definitions/v1Endpoint"
        }
      }
    },
    "v1GetEndpointsResponse": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Endpoint"
          }
        }
      }
    },
    "v1GetLatestObjectRevisionResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object",
          "title": "The object with the latest revision"
        }
      }
    },
    "v1GetObjectByIDResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1ObjectWithURL"
        }
      }
    },
    "v1GetObjectEndpointsResponse": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Endpoint"
          }
        }
      }
    },
    "v1GetObjectGroupByIdResponse": {
      "type": "object",
      "properties": {
        "objectGroup": {
          "$ref": "#/definitions/v1ObjectGroupOverview"
        }
      }
    },
    "v1GetObjectGroupHistoryResponse": {
      "type": "object",
      "properties": {
        "objectGroups": {
          "$ref": "#/definitions/v1ObjectGroupOverviews"
        }
      }
    },
    "v1GetObjectGroupObjectsResponse": {
      "type": "object",
      "properties": {
        "objectGroupObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectGroupObject"
          }
        }
      }
    },
    "v1GetObjectGroupsFromObjectResponse": {
      "type": "object",
      "properties": {
        "objectGroups": {
          "$ref": "#/definitions/v1ObjectGroupOverviews"
        }
      }
    },
    "v1GetObjectGroupsResponse": {
      "type": "object",
      "properties": {
        "objectGroups": {
          "$ref": "#/definitions/v1ObjectGroupOverviews"
        }
      }
    },
    "v1GetObjectRevisionsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectWithURL"
          }
        }
      }
    },
    "v1GetObjectsResponse": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectWithURL"
          },
          "title": "A List of objects with (optional) associated URLs"
        }
      }
    },
    "v1GetProjectCollectionsResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CollectionOverview"
          }
        }
      }
    },
    "v1GetProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1ProjectOverview"
        }
      }
    },
    "v1GetReferencesResponse": {
      "type": "object",
      "properties": {
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectReference"
          }
        }
      }
    },
    "v1GetUploadURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "$ref": "#/definitions/v1URL",
          "title": "URL"
        }
      }
    },
    "v1GetUserPermissionsForProjectResponse": {
      "type": "object",
      "properties": {
        "userPermission": {
          "$ref": "#/definitions/v1ProjectPermission"
        }
      }
    },
    "v1GetUserProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1UserProject"
          }
        }
      }
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "projectPermissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ProjectPermission"
          }
        }
      }
    },
    "v1Hash": {
      "type": "object",
      "properties": {
        "alg": {
          "$ref": "#/definitions/v1Hashalgorithm"
        },
        "hash": {
          "type": "string"
        }
      }
    },
    "v1Hashalgorithm": {
      "type": "string",
      "enum": [
        "HASHALGORITHM_UNSPECIFIED",
        "HASHALGORITHM_MD5",
        "HASHALGORITHM_SHA1",
        "HASHALGORITHM_SHA256",
        "HASHALGORITHM_SHA512",
        "HASHALGORITHM_MURMUR3A32",
        "HASHALGORITHM_XXHASH32"
      ],
      "default": "HASHALGORITHM_UNSPECIFIED"
    },
    "v1InitPresignedUploadResponse": {
      "type": "object",
      "properties": {
        "uploadId": {
          "type": "string"
        }
      }
    },
    "v1InitializeNewObjectResponse": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "title": "ObjectId"
        },
        "uploadId": {
          "type": "string",
          "title": "Upload ID, a ID used to identify the upload / staging object"
        },
        "collectionId": {
          "type": "string",
          "title": "CollectionID"
        }
      }
    },
    "v1KeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "A key value pair for hooks and labels"
    },
    "v1LabelFilter": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "andOrOr": {
          "type": "boolean",
          "title": "True if and, if empty or false or"
        },
        "keysOnly": {
          "type": "boolean",
          "title": "Should only the keys be considered ?"
        }
      },
      "description": "LabelFilter is used to filter resources by labels.\nThe labels are specified as a map of key-value pairs."
    },
    "v1LabelOntology": {
      "type": "object",
      "properties": {
        "requiredLabelKeys": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "These are the keys for labels that are required for the collection\nAdding an Object without these keys will result in an error\nDefaults to empty string if not specified"
        }
      }
    },
    "v1LabelOrIDQuery": {
      "type": "object",
      "properties": {
        "labels": {
          "$ref": "#/definitions/v1LabelFilter"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "This is a combined query for either a list of resource IDs or filtered by\nLabel Can be expanded in the future to allow for more complex queries"
    },
    "v1LocationType": {
      "type": "string",
      "enum": [
        "LOCATION_TYPE_UNSPECIFIED",
        "LOCATION_TYPE_S3",
        "LOCATION_TYPE_FILE"
      ],
      "default": "LOCATION_TYPE_UNSPECIFIED",
      "description": "Enum to support multiple target Locations."
    },
    "v1NotficationStreamAck": {
      "type": "object",
      "properties": {
        "ackChunkId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1NotificationStreamGroupResponse": {
      "type": "object",
      "properties": {
        "notification": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1NotificationStreamResponse"
          }
        },
        "ackChunkId": {
          "type": "string"
        }
      }
    },
    "v1NotificationStreamInit": {
      "type": "object",
      "properties": {
        "streamGroupId": {
          "type": "string"
        }
      }
    },
    "v1NotificationStreamResponse": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/v1EventNotificationMessage"
        },
        "sequence": {
          "type": "string",
          "format": "uint64"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1Object": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "filename": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "hooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "contentLen": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "$ref": "#/definitions/modelsv1Status"
        },
        "origin": {
          "$ref": "#/definitions/v1Origin"
        },
        "dataClass": {
          "$ref": "#/definitions/v1DataClass"
        },
        "hash": {
          "$ref": "#/definitions/v1Hash"
        },
        "revNumber": {
          "type": "string",
          "format": "int64"
        },
        "source": {
          "$ref": "#/definitions/v1Source"
        },
        "latest": {
          "type": "boolean"
        },
        "autoUpdate": {
          "type": "boolean",
          "title": "This is a collection specific attribute\nMust be false if collection is immutable"
        }
      }
    },
    "v1ObjectGroupObject": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object"
        },
        "isMetadata": {
          "type": "boolean"
        }
      },
      "title": "Objectgroup objects are a combination of \"object\" and the boolean is_metadata\nflag Returned as single list to allow for more precise queries"
    },
    "v1ObjectGroupOverview": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "hooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "stats": {
          "$ref": "#/definitions/v1ObjectGroupStats"
        },
        "revNumber": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "This is a representation of the ObjectGroup without the recursive nature of\nobject references"
    },
    "v1ObjectGroupOverviews": {
      "type": "object",
      "properties": {
        "objectGroupOverviews": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ObjectGroupOverview"
          }
        }
      },
      "title": "Multiple ObjectGroupOverviews"
    },
    "v1ObjectGroupStats": {
      "type": "object",
      "properties": {
        "objectStats": {
          "$ref": "#/definitions/v1Stats"
        },
        "lastUpdated": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Stats for an object group"
    },
    "v1ObjectReference": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string"
        },
        "collectionId": {
          "type": "string"
        },
        "revisionNumber": {
          "type": "string",
          "format": "int64"
        },
        "isWriteable": {
          "type": "boolean"
        }
      }
    },
    "v1ObjectWithURL": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object",
          "title": "Description of a specified object"
        },
        "url": {
          "type": "string",
          "title": "This is a associated download URL\nWill be empty if request does not contain the associated with_url flag"
        }
      }
    },
    "v1Origin": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1OriginType"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "Origin of the object -\u003e To be GDPA compliant"
    },
    "v1OriginType": {
      "type": "string",
      "enum": [
        "ORIGIN_TYPE_UNSPECIFIED",
        "ORIGIN_TYPE_USER",
        "ORIGIN_TYPE_OBJCLONE"
      ],
      "default": "ORIGIN_TYPE_UNSPECIFIED",
      "title": "Specifies the Origin of the object"
    },
    "v1PageRequest": {
      "type": "object",
      "properties": {
        "lastUuid": {
          "type": "string"
        },
        "pageSize": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "This file contains parameters for queries that return a list of resources.\nThe results are paginated.\nThe page request specifies the page size and last_id.\nIf page_size is not specified, it defaults to 20.\nIf page_size is -1, it returns all objects."
    },
    "v1PartETag": {
      "type": "object",
      "properties": {
        "partNumber": {
          "type": "string",
          "format": "int64"
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "Etag / Part combination to finish a presigned multipart upload."
    },
    "v1Permission": {
      "type": "string",
      "enum": [
        "PERMISSION_UNSPECIFIED",
        "PERMISSION_NONE",
        "PERMISSION_READ",
        "PERMISSION_APPEND",
        "PERMISSION_MODIFY",
        "PERMISSION_ADMIN"
      ],
      "default": "PERMISSION_UNSPECIFIED",
      "title": "- PERMISSION_READ: project but have no default permissions\n - PERMISSION_ADMIN: that owns the object / Create new collections"
    },
    "v1PinCollectionVersionResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/v1CollectionOverview"
        }
      }
    },
    "v1ProjectOverview": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "collectionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProjectPermission": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "permission": {
          "$ref": "#/definitions/v1Permission"
        }
      }
    },
    "v1Range": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "format": "int64"
        },
        "end": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RegisterUserRequest": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        }
      }
    },
    "v1RegisterUserResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "v1RemoveUserFromProjectResponse": {
      "type": "object"
    },
    "v1SetHooksOfObjectResponse": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/v1Object",
          "title": "Returns the updated Object"
        }
      }
    },
    "v1Source": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "title": "This is a URL / DOI"
        },
        "sourceType": {
          "$ref": "#/definitions/v1SourceType",
          "title": "Either URL oder DOI"
        }
      }
    },
    "v1SourceType": {
      "type": "string",
      "enum": [
        "SOURCE_TYPE_UNSPECIFIED",
        "SOURCE_TYPE_URL",
        "SOURCE_TYPE_DOI"
      ],
      "default": "SOURCE_TYPE_UNSPECIFIED"
    },
    "v1StageObject": {
      "type": "object",
      "properties": {
        "filename": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "collectionId": {
          "type": "string"
        },
        "contentLen": {
          "type": "string",
          "format": "int64"
        },
        "source": {
          "$ref": "#/definitions/v1Source"
        },
        "dataclass": {
          "$ref": "#/definitions/v1DataClass"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "hooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          }
        }
      }
    },
    "v1Stats": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "accSize": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Stats for a set of objects"
    },
    "v1StreamAll": {
      "type": "object"
    },
    "v1StreamFromDate": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1StreamFromSequence": {
      "type": "object",
      "properties": {
        "sequence": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1Token": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tokenType": {
          "$ref": "#/definitions/v1TokenType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time"
        },
        "collectionId": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "permission": {
          "$ref": "#/definitions/v1Permission"
        }
      }
    },
    "v1TokenType": {
      "type": "string",
      "enum": [
        "TOKEN_TYPE_UNSPECIFIED",
        "TOKEN_TYPE_PERSONAL",
        "TOKEN_TYPE_SCOPED"
      ],
      "default": "TOKEN_TYPE_UNSPECIFIED"
    },
    "v1URL": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v1UpdateCollectionResponse": {
      "type": "object",
      "properties": {
        "collection": {
          "$ref": "#/definitions/v1CollectionOverview"
        }
      }
    },
    "v1UpdateObjectGroupResponse": {
      "type": "object",
      "properties": {
        "objectGroup": {
          "$ref": "#/definitions/v1ObjectGroupOverview"
        }
      }
    },
    "v1UpdateObjectResponse": {
      "type": "object",
      "properties": {
        "objectId": {
          "type": "string",
          "title": "ObjectId"
        },
        "stagingId": {
          "type": "string",
          "description": "Staging ID, a generic ID when multipart is not enabled, otherwise the\nmultipart upload ID."
        },
        "collectionId": {
          "type": "string",
          "title": "CollectionID"
        }
      }
    },
    "v1UpdateProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1ProjectOverview"
        }
      }
    },
    "v1UpdateUserDisplayNameResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User"
        }
      }
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Internal Aruna UserID"
        },
        "externalId": {
          "type": "string",
          "title": "Oidc subject ID"
        },
        "displayName": {
          "type": "string",
          "title": "(optional) User display_name"
        },
        "active": {
          "type": "boolean",
          "title": "Is the user activated"
        },
        "isAdmin": {
          "type": "boolean",
          "title": "Is the user admin ?"
        }
      }
    },
    "v1UserProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1Version": {
      "type": "object",
      "properties": {
        "major": {
          "type": "integer",
          "format": "int32"
        },
        "minor": {
          "type": "integer",
          "format": "int32"
        },
        "patch": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Semver version -\u003e Alpha Beta release are not supported -\u003e Use \"latest\" for\nmutable collections that are in development"
    }
  },
  "securityDefinitions": {
    "AccessKeyAuth": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "AccessKeyAuth": []
    }
  ]
}
