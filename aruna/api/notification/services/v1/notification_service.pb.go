// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: aruna/api/notification/services/v1/notification_service.proto

package v1

import (
	v1 "github.com/ArunaStorage/go-api/aruna/api/storage/models/v1"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED      EventType = 0
	EventType_EVENT_TYPE_CREATED          EventType = 1
	EventType_EVENT_TYPE_AVAILABLE        EventType = 2
	EventType_EVENT_TYPE_UPDATED          EventType = 3
	EventType_EVENT_TYPE_METADATA_UPDATED EventType = 4
	EventType_EVENT_TYPE_DELETED          EventType = 5
	EventType_EVENT_TYPE_ALL              EventType = 6
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_CREATED",
		2: "EVENT_TYPE_AVAILABLE",
		3: "EVENT_TYPE_UPDATED",
		4: "EVENT_TYPE_METADATA_UPDATED",
		5: "EVENT_TYPE_DELETED",
		6: "EVENT_TYPE_ALL",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":      0,
		"EVENT_TYPE_CREATED":          1,
		"EVENT_TYPE_AVAILABLE":        2,
		"EVENT_TYPE_UPDATED":          3,
		"EVENT_TYPE_METADATA_UPDATED": 4,
		"EVENT_TYPE_DELETED":          5,
		"EVENT_TYPE_ALL":              6,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_aruna_api_notification_services_v1_notification_service_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_aruna_api_notification_services_v1_notification_service_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{0}
}

type CreateEventStreamingGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource           v1.ResourceType `protobuf:"varint,1,opt,name=resource,proto3,enum=aruna.api.storage.models.v1.ResourceType" json:"resource,omitempty"`
	ResourceId         string          `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	IncludeSubresource bool            `protobuf:"varint,3,opt,name=include_subresource,json=includeSubresource,proto3" json:"include_subresource,omitempty"`
	// Types that are assignable to StreamType:
	//	*CreateEventStreamingGroupRequest_StreamAll
	//	*CreateEventStreamingGroupRequest_StreamFromDate
	//	*CreateEventStreamingGroupRequest_StreamFromSequence
	StreamType isCreateEventStreamingGroupRequest_StreamType `protobuf_oneof:"stream_type"`
	Hierarchy  *EventStreamingGroupHierarchy                 `protobuf:"bytes,7,opt,name=hierarchy,proto3" json:"hierarchy,omitempty"`
}

func (x *CreateEventStreamingGroupRequest) Reset() {
	*x = CreateEventStreamingGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventStreamingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventStreamingGroupRequest) ProtoMessage() {}

func (x *CreateEventStreamingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventStreamingGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateEventStreamingGroupRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateEventStreamingGroupRequest) GetResource() v1.ResourceType {
	if x != nil {
		return x.Resource
	}
	return v1.ResourceType(0)
}

func (x *CreateEventStreamingGroupRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CreateEventStreamingGroupRequest) GetIncludeSubresource() bool {
	if x != nil {
		return x.IncludeSubresource
	}
	return false
}

func (m *CreateEventStreamingGroupRequest) GetStreamType() isCreateEventStreamingGroupRequest_StreamType {
	if m != nil {
		return m.StreamType
	}
	return nil
}

func (x *CreateEventStreamingGroupRequest) GetStreamAll() *StreamAll {
	if x, ok := x.GetStreamType().(*CreateEventStreamingGroupRequest_StreamAll); ok {
		return x.StreamAll
	}
	return nil
}

func (x *CreateEventStreamingGroupRequest) GetStreamFromDate() *StreamFromDate {
	if x, ok := x.GetStreamType().(*CreateEventStreamingGroupRequest_StreamFromDate); ok {
		return x.StreamFromDate
	}
	return nil
}

func (x *CreateEventStreamingGroupRequest) GetStreamFromSequence() *StreamFromSequence {
	if x, ok := x.GetStreamType().(*CreateEventStreamingGroupRequest_StreamFromSequence); ok {
		return x.StreamFromSequence
	}
	return nil
}

func (x *CreateEventStreamingGroupRequest) GetHierarchy() *EventStreamingGroupHierarchy {
	if x != nil {
		return x.Hierarchy
	}
	return nil
}

type isCreateEventStreamingGroupRequest_StreamType interface {
	isCreateEventStreamingGroupRequest_StreamType()
}

type CreateEventStreamingGroupRequest_StreamAll struct {
	StreamAll *StreamAll `protobuf:"bytes,4,opt,name=stream_all,json=streamAll,proto3,oneof"`
}

type CreateEventStreamingGroupRequest_StreamFromDate struct {
	StreamFromDate *StreamFromDate `protobuf:"bytes,5,opt,name=stream_from_date,json=streamFromDate,proto3,oneof"`
}

type CreateEventStreamingGroupRequest_StreamFromSequence struct {
	StreamFromSequence *StreamFromSequence `protobuf:"bytes,6,opt,name=stream_from_sequence,json=streamFromSequence,proto3,oneof"`
}

func (*CreateEventStreamingGroupRequest_StreamAll) isCreateEventStreamingGroupRequest_StreamType() {}

func (*CreateEventStreamingGroupRequest_StreamFromDate) isCreateEventStreamingGroupRequest_StreamType() {
}

func (*CreateEventStreamingGroupRequest_StreamFromSequence) isCreateEventStreamingGroupRequest_StreamType() {
}

type EventStreamingGroupHierarchy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CollectionId  string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	ObjectId      string `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ObjectGroupId string `protobuf:"bytes,4,opt,name=object_group_id,json=objectGroupId,proto3" json:"object_group_id,omitempty"`
}

func (x *EventStreamingGroupHierarchy) Reset() {
	*x = EventStreamingGroupHierarchy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamingGroupHierarchy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamingGroupHierarchy) ProtoMessage() {}

func (x *EventStreamingGroupHierarchy) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamingGroupHierarchy.ProtoReflect.Descriptor instead.
func (*EventStreamingGroupHierarchy) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{1}
}

func (x *EventStreamingGroupHierarchy) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *EventStreamingGroupHierarchy) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *EventStreamingGroupHierarchy) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *EventStreamingGroupHierarchy) GetObjectGroupId() string {
	if x != nil {
		return x.ObjectGroupId
	}
	return ""
}

type CreateEventStreamingGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamGroupId string `protobuf:"bytes,1,opt,name=stream_group_id,json=streamGroupId,proto3" json:"stream_group_id,omitempty"`
}

func (x *CreateEventStreamingGroupResponse) Reset() {
	*x = CreateEventStreamingGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventStreamingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventStreamingGroupResponse) ProtoMessage() {}

func (x *CreateEventStreamingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventStreamingGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateEventStreamingGroupResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEventStreamingGroupResponse) GetStreamGroupId() string {
	if x != nil {
		return x.StreamGroupId
	}
	return ""
}

type GetEventMessageBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamGroupId string `protobuf:"bytes,1,opt,name=stream_group_id,json=streamGroupId,proto3" json:"stream_group_id,omitempty"`
	BatchSize     uint32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *GetEventMessageBatchRequest) Reset() {
	*x = GetEventMessageBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventMessageBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventMessageBatchRequest) ProtoMessage() {}

func (x *GetEventMessageBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventMessageBatchRequest.ProtoReflect.Descriptor instead.
func (*GetEventMessageBatchRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetEventMessageBatchRequest) GetStreamGroupId() string {
	if x != nil {
		return x.StreamGroupId
	}
	return ""
}

func (x *GetEventMessageBatchRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type GetEventMessageBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*EventNotificationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *GetEventMessageBatchResponse) Reset() {
	*x = GetEventMessageBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventMessageBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventMessageBatchResponse) ProtoMessage() {}

func (x *GetEventMessageBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventMessageBatchResponse.ProtoReflect.Descriptor instead.
func (*GetEventMessageBatchResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetEventMessageBatchResponse) GetMessages() []*EventNotificationMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type GetEventMessageBatchStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamGroupId string `protobuf:"bytes,1,opt,name=stream_group_id,json=streamGroupId,proto3" json:"stream_group_id,omitempty"`
	BatchSize     uint32 `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *GetEventMessageBatchStreamRequest) Reset() {
	*x = GetEventMessageBatchStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventMessageBatchStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventMessageBatchStreamRequest) ProtoMessage() {}

func (x *GetEventMessageBatchStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventMessageBatchStreamRequest.ProtoReflect.Descriptor instead.
func (*GetEventMessageBatchStreamRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetEventMessageBatchStreamRequest) GetStreamGroupId() string {
	if x != nil {
		return x.StreamGroupId
	}
	return ""
}

func (x *GetEventMessageBatchStreamRequest) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type GetEventMessageBatchStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*EventNotificationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *GetEventMessageBatchStreamResponse) Reset() {
	*x = GetEventMessageBatchStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventMessageBatchStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventMessageBatchStreamResponse) ProtoMessage() {}

func (x *GetEventMessageBatchStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventMessageBatchStreamResponse.ProtoReflect.Descriptor instead.
func (*GetEventMessageBatchStreamResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetEventMessageBatchStreamResponse) GetMessages() []*EventNotificationMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type AcknowledgeMessageBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replies []*Reply `protobuf:"bytes,1,rep,name=replies,proto3" json:"replies,omitempty"`
}

func (x *AcknowledgeMessageBatchRequest) Reset() {
	*x = AcknowledgeMessageBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeMessageBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeMessageBatchRequest) ProtoMessage() {}

func (x *AcknowledgeMessageBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeMessageBatchRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeMessageBatchRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{7}
}

func (x *AcknowledgeMessageBatchRequest) GetReplies() []*Reply {
	if x != nil {
		return x.Replies
	}
	return nil
}

type AcknowledgeMessageBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AcknowledgeMessageBatchResponse) Reset() {
	*x = AcknowledgeMessageBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcknowledgeMessageBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeMessageBatchResponse) ProtoMessage() {}

func (x *AcknowledgeMessageBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeMessageBatchResponse.ProtoReflect.Descriptor instead.
func (*AcknowledgeMessageBatchResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{8}
}

type DeleteEventStreamingGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamGroupId string `protobuf:"bytes,1,opt,name=stream_group_id,json=streamGroupId,proto3" json:"stream_group_id,omitempty"`
}

func (x *DeleteEventStreamingGroupRequest) Reset() {
	*x = DeleteEventStreamingGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventStreamingGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventStreamingGroupRequest) ProtoMessage() {}

func (x *DeleteEventStreamingGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventStreamingGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteEventStreamingGroupRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteEventStreamingGroupRequest) GetStreamGroupId() string {
	if x != nil {
		return x.StreamGroupId
	}
	return ""
}

type DeleteEventStreamingGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteEventStreamingGroupResponse) Reset() {
	*x = DeleteEventStreamingGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEventStreamingGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEventStreamingGroupResponse) ProtoMessage() {}

func (x *DeleteEventStreamingGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEventStreamingGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteEventStreamingGroupResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{10}
}

type StreamFromSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *StreamFromSequence) Reset() {
	*x = StreamFromSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFromSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFromSequence) ProtoMessage() {}

func (x *StreamFromSequence) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFromSequence.ProtoReflect.Descriptor instead.
func (*StreamFromSequence) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{11}
}

func (x *StreamFromSequence) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type StreamFromDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamFromDate) Reset() {
	*x = StreamFromDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFromDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFromDate) ProtoMessage() {}

func (x *StreamFromDate) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFromDate.ProtoReflect.Descriptor instead.
func (*StreamFromDate) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{12}
}

func (x *StreamFromDate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type StreamAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamAll) Reset() {
	*x = StreamAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAll) ProtoMessage() {}

func (x *StreamAll) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAll.ProtoReflect.Descriptor instead.
func (*StreamAll) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{13}
}

type EventNotificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource    v1.ResourceType `protobuf:"varint,1,opt,name=resource,proto3,enum=aruna.api.storage.models.v1.ResourceType" json:"resource,omitempty"`
	ResourceId  string          `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	UpdatedType EventType       `protobuf:"varint,3,opt,name=updated_type,json=updatedType,proto3,enum=aruna.api.notification.services.v1.EventType" json:"updated_type,omitempty"`
	Reply       *Reply          `protobuf:"bytes,4,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *EventNotificationMessage) Reset() {
	*x = EventNotificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNotificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNotificationMessage) ProtoMessage() {}

func (x *EventNotificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNotificationMessage.ProtoReflect.Descriptor instead.
func (*EventNotificationMessage) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{14}
}

func (x *EventNotificationMessage) GetResource() v1.ResourceType {
	if x != nil {
		return x.Resource
	}
	return v1.ResourceType(0)
}

func (x *EventNotificationMessage) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *EventNotificationMessage) GetUpdatedType() EventType {
	if x != nil {
		return x.UpdatedType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *EventNotificationMessage) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	Salt  string `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
	Hmac  string `protobuf:"bytes,3,opt,name=hmac,proto3" json:"hmac,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP(), []int{15}
}

func (x *Reply) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *Reply) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *Reply) GetHmac() string {
	if x != nil {
		return x.Hmac
	}
	return ""
}

var File_aruna_api_notification_services_v1_notification_service_proto protoreflect.FileDescriptor

var file_aruna_api_notification_services_v1_notification_service_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x22, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x04, 0x0a, 0x20,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x75,
	0x62, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x10, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x09, 0x68, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69, 0x65, 0x72,
	0x61, 0x72, 0x63, 0x68, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x4b,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x78, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x58, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6a, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x1e, 0x41, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x75,
	0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x22, 0x21,
	0x0a, 0x1f, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x23, 0x0a,
	0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72,
	0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x0b, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x22, 0x95, 0x02,
	0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d, 0x61, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x2a, 0xbe, 0x01, 0x0a,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x32, 0xff, 0x06,
	0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45,
	0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x3f, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x45, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0xa4, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x42, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x45, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x1a, 0x12, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x0c, 0x12, 0x0a, 0x55, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x42,
	0x9c, 0x01, 0x0a, 0x3e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x41,
	0x72, 0x75, 0x6e, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6a, 0x61, 0x76, 0x61,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x42, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x01,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x75,
	0x6e, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aruna_api_notification_services_v1_notification_service_proto_rawDescOnce sync.Once
	file_aruna_api_notification_services_v1_notification_service_proto_rawDescData = file_aruna_api_notification_services_v1_notification_service_proto_rawDesc
)

func file_aruna_api_notification_services_v1_notification_service_proto_rawDescGZIP() []byte {
	file_aruna_api_notification_services_v1_notification_service_proto_rawDescOnce.Do(func() {
		file_aruna_api_notification_services_v1_notification_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_aruna_api_notification_services_v1_notification_service_proto_rawDescData)
	})
	return file_aruna_api_notification_services_v1_notification_service_proto_rawDescData
}

var file_aruna_api_notification_services_v1_notification_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_aruna_api_notification_services_v1_notification_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_aruna_api_notification_services_v1_notification_service_proto_goTypes = []interface{}{
	(EventType)(0),                             // 0: aruna.api.notification.services.v1.EventType
	(*CreateEventStreamingGroupRequest)(nil),   // 1: aruna.api.notification.services.v1.CreateEventStreamingGroupRequest
	(*EventStreamingGroupHierarchy)(nil),       // 2: aruna.api.notification.services.v1.EventStreamingGroupHierarchy
	(*CreateEventStreamingGroupResponse)(nil),  // 3: aruna.api.notification.services.v1.CreateEventStreamingGroupResponse
	(*GetEventMessageBatchRequest)(nil),        // 4: aruna.api.notification.services.v1.GetEventMessageBatchRequest
	(*GetEventMessageBatchResponse)(nil),       // 5: aruna.api.notification.services.v1.GetEventMessageBatchResponse
	(*GetEventMessageBatchStreamRequest)(nil),  // 6: aruna.api.notification.services.v1.GetEventMessageBatchStreamRequest
	(*GetEventMessageBatchStreamResponse)(nil), // 7: aruna.api.notification.services.v1.GetEventMessageBatchStreamResponse
	(*AcknowledgeMessageBatchRequest)(nil),     // 8: aruna.api.notification.services.v1.AcknowledgeMessageBatchRequest
	(*AcknowledgeMessageBatchResponse)(nil),    // 9: aruna.api.notification.services.v1.AcknowledgeMessageBatchResponse
	(*DeleteEventStreamingGroupRequest)(nil),   // 10: aruna.api.notification.services.v1.DeleteEventStreamingGroupRequest
	(*DeleteEventStreamingGroupResponse)(nil),  // 11: aruna.api.notification.services.v1.DeleteEventStreamingGroupResponse
	(*StreamFromSequence)(nil),                 // 12: aruna.api.notification.services.v1.StreamFromSequence
	(*StreamFromDate)(nil),                     // 13: aruna.api.notification.services.v1.StreamFromDate
	(*StreamAll)(nil),                          // 14: aruna.api.notification.services.v1.StreamAll
	(*EventNotificationMessage)(nil),           // 15: aruna.api.notification.services.v1.EventNotificationMessage
	(*Reply)(nil),                              // 16: aruna.api.notification.services.v1.Reply
	(v1.ResourceType)(0),                       // 17: aruna.api.storage.models.v1.ResourceType
	(*timestamppb.Timestamp)(nil),              // 18: google.protobuf.Timestamp
}
var file_aruna_api_notification_services_v1_notification_service_proto_depIdxs = []int32{
	17, // 0: aruna.api.notification.services.v1.CreateEventStreamingGroupRequest.resource:type_name -> aruna.api.storage.models.v1.ResourceType
	14, // 1: aruna.api.notification.services.v1.CreateEventStreamingGroupRequest.stream_all:type_name -> aruna.api.notification.services.v1.StreamAll
	13, // 2: aruna.api.notification.services.v1.CreateEventStreamingGroupRequest.stream_from_date:type_name -> aruna.api.notification.services.v1.StreamFromDate
	12, // 3: aruna.api.notification.services.v1.CreateEventStreamingGroupRequest.stream_from_sequence:type_name -> aruna.api.notification.services.v1.StreamFromSequence
	2,  // 4: aruna.api.notification.services.v1.CreateEventStreamingGroupRequest.hierarchy:type_name -> aruna.api.notification.services.v1.EventStreamingGroupHierarchy
	15, // 5: aruna.api.notification.services.v1.GetEventMessageBatchResponse.messages:type_name -> aruna.api.notification.services.v1.EventNotificationMessage
	15, // 6: aruna.api.notification.services.v1.GetEventMessageBatchStreamResponse.messages:type_name -> aruna.api.notification.services.v1.EventNotificationMessage
	16, // 7: aruna.api.notification.services.v1.AcknowledgeMessageBatchRequest.replies:type_name -> aruna.api.notification.services.v1.Reply
	18, // 8: aruna.api.notification.services.v1.StreamFromDate.timestamp:type_name -> google.protobuf.Timestamp
	17, // 9: aruna.api.notification.services.v1.EventNotificationMessage.resource:type_name -> aruna.api.storage.models.v1.ResourceType
	0,  // 10: aruna.api.notification.services.v1.EventNotificationMessage.updated_type:type_name -> aruna.api.notification.services.v1.EventType
	16, // 11: aruna.api.notification.services.v1.EventNotificationMessage.reply:type_name -> aruna.api.notification.services.v1.Reply
	1,  // 12: aruna.api.notification.services.v1.EventNotificationService.CreateEventStreamingGroup:input_type -> aruna.api.notification.services.v1.CreateEventStreamingGroupRequest
	4,  // 13: aruna.api.notification.services.v1.EventNotificationService.GetEventMessageBatch:input_type -> aruna.api.notification.services.v1.GetEventMessageBatchRequest
	6,  // 14: aruna.api.notification.services.v1.EventNotificationService.GetEventMessageBatchStream:input_type -> aruna.api.notification.services.v1.GetEventMessageBatchStreamRequest
	8,  // 15: aruna.api.notification.services.v1.EventNotificationService.AcknowledgeMessageBatch:input_type -> aruna.api.notification.services.v1.AcknowledgeMessageBatchRequest
	10, // 16: aruna.api.notification.services.v1.EventNotificationService.DeleteEventStreamingGroup:input_type -> aruna.api.notification.services.v1.DeleteEventStreamingGroupRequest
	3,  // 17: aruna.api.notification.services.v1.EventNotificationService.CreateEventStreamingGroup:output_type -> aruna.api.notification.services.v1.CreateEventStreamingGroupResponse
	5,  // 18: aruna.api.notification.services.v1.EventNotificationService.GetEventMessageBatch:output_type -> aruna.api.notification.services.v1.GetEventMessageBatchResponse
	7,  // 19: aruna.api.notification.services.v1.EventNotificationService.GetEventMessageBatchStream:output_type -> aruna.api.notification.services.v1.GetEventMessageBatchStreamResponse
	9,  // 20: aruna.api.notification.services.v1.EventNotificationService.AcknowledgeMessageBatch:output_type -> aruna.api.notification.services.v1.AcknowledgeMessageBatchResponse
	11, // 21: aruna.api.notification.services.v1.EventNotificationService.DeleteEventStreamingGroup:output_type -> aruna.api.notification.services.v1.DeleteEventStreamingGroupResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_aruna_api_notification_services_v1_notification_service_proto_init() }
func file_aruna_api_notification_services_v1_notification_service_proto_init() {
	if File_aruna_api_notification_services_v1_notification_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventStreamingGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamingGroupHierarchy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventStreamingGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventMessageBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventMessageBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventMessageBatchStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventMessageBatchStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeMessageBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcknowledgeMessageBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventStreamingGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEventStreamingGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFromSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFromDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNotificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aruna_api_notification_services_v1_notification_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CreateEventStreamingGroupRequest_StreamAll)(nil),
		(*CreateEventStreamingGroupRequest_StreamFromDate)(nil),
		(*CreateEventStreamingGroupRequest_StreamFromSequence)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aruna_api_notification_services_v1_notification_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aruna_api_notification_services_v1_notification_service_proto_goTypes,
		DependencyIndexes: file_aruna_api_notification_services_v1_notification_service_proto_depIdxs,
		EnumInfos:         file_aruna_api_notification_services_v1_notification_service_proto_enumTypes,
		MessageInfos:      file_aruna_api_notification_services_v1_notification_service_proto_msgTypes,
	}.Build()
	File_aruna_api_notification_services_v1_notification_service_proto = out.File
	file_aruna_api_notification_services_v1_notification_service_proto_rawDesc = nil
	file_aruna_api_notification_services_v1_notification_service_proto_goTypes = nil
	file_aruna_api_notification_services_v1_notification_service_proto_depIdxs = nil
}
