// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/notification/services/v1/notification_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventNotificationServiceClient is the client API for EventNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventNotificationServiceClient interface {
	// CreateEventStreamingGroup
	//
	// Creates a new EventStreamingGroup
	CreateEventStreamingGroup(ctx context.Context, in *CreateEventStreamingGroupRequest, opts ...grpc.CallOption) (*CreateEventStreamingGroupResponse, error)
	// GetEventMessageBatch
	//
	// Reads a set of messages from a given stream group
	// Each message contains a separate acknowledgement message that is protected by a salt and an hmac for verification
	// The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message
	GetEventMessageBatch(ctx context.Context, in *GetEventMessageBatchRequest, opts ...grpc.CallOption) (*GetEventMessageBatchResponse, error)
	// GetEventMessageBatch
	//
	// Reads a set of messages from a given stream group
	// Each message contains a separate acknowledgement message that is protected by a salt and an hmac for verification
	// The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message
	GetEventMessageBatchStream(ctx context.Context, in *GetEventMessageBatchStreamRequest, opts ...grpc.CallOption) (EventNotificationService_GetEventMessageBatchStreamClient, error)
	// AcknowledgeMessageBatch
	//
	// List of messages to acknowledge
	// Each reply is protected by a salt and and hmac that verifies the message
	AcknowledgeMessageBatch(ctx context.Context, in *AcknowledgeMessageBatchRequest, opts ...grpc.CallOption) (*AcknowledgeMessageBatchResponse, error)
	// DeleteEventStreamingGroup
	//
	// Deletes a existing EventStreamingGroup by ID
	DeleteEventStreamingGroup(ctx context.Context, in *DeleteEventStreamingGroupRequest, opts ...grpc.CallOption) (*DeleteEventStreamingGroupResponse, error)
}

type eventNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventNotificationServiceClient(cc grpc.ClientConnInterface) EventNotificationServiceClient {
	return &eventNotificationServiceClient{cc}
}

func (c *eventNotificationServiceClient) CreateEventStreamingGroup(ctx context.Context, in *CreateEventStreamingGroupRequest, opts ...grpc.CallOption) (*CreateEventStreamingGroupResponse, error) {
	out := new(CreateEventStreamingGroupResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.notification.services.v1.EventNotificationService/CreateEventStreamingGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventNotificationServiceClient) GetEventMessageBatch(ctx context.Context, in *GetEventMessageBatchRequest, opts ...grpc.CallOption) (*GetEventMessageBatchResponse, error) {
	out := new(GetEventMessageBatchResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.notification.services.v1.EventNotificationService/GetEventMessageBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventNotificationServiceClient) GetEventMessageBatchStream(ctx context.Context, in *GetEventMessageBatchStreamRequest, opts ...grpc.CallOption) (EventNotificationService_GetEventMessageBatchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventNotificationService_ServiceDesc.Streams[0], "/aruna.api.notification.services.v1.EventNotificationService/GetEventMessageBatchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventNotificationServiceGetEventMessageBatchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventNotificationService_GetEventMessageBatchStreamClient interface {
	Recv() (*GetEventMessageBatchStreamResponse, error)
	grpc.ClientStream
}

type eventNotificationServiceGetEventMessageBatchStreamClient struct {
	grpc.ClientStream
}

func (x *eventNotificationServiceGetEventMessageBatchStreamClient) Recv() (*GetEventMessageBatchStreamResponse, error) {
	m := new(GetEventMessageBatchStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventNotificationServiceClient) AcknowledgeMessageBatch(ctx context.Context, in *AcknowledgeMessageBatchRequest, opts ...grpc.CallOption) (*AcknowledgeMessageBatchResponse, error) {
	out := new(AcknowledgeMessageBatchResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.notification.services.v1.EventNotificationService/AcknowledgeMessageBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventNotificationServiceClient) DeleteEventStreamingGroup(ctx context.Context, in *DeleteEventStreamingGroupRequest, opts ...grpc.CallOption) (*DeleteEventStreamingGroupResponse, error) {
	out := new(DeleteEventStreamingGroupResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.notification.services.v1.EventNotificationService/DeleteEventStreamingGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventNotificationServiceServer is the server API for EventNotificationService service.
// All implementations should embed UnimplementedEventNotificationServiceServer
// for forward compatibility
type EventNotificationServiceServer interface {
	// CreateEventStreamingGroup
	//
	// Creates a new EventStreamingGroup
	CreateEventStreamingGroup(context.Context, *CreateEventStreamingGroupRequest) (*CreateEventStreamingGroupResponse, error)
	// GetEventMessageBatch
	//
	// Reads a set of messages from a given stream group
	// Each message contains a separate acknowledgement message that is protected by a salt and an hmac for verification
	// The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message
	GetEventMessageBatch(context.Context, *GetEventMessageBatchRequest) (*GetEventMessageBatchResponse, error)
	// GetEventMessageBatch
	//
	// Reads a set of messages from a given stream group
	// Each message contains a separate acknowledgement message that is protected by a salt and an hmac for verification
	// The message can be send directly through the AcknowledgeMessageBatch call to acknowledge the message
	GetEventMessageBatchStream(*GetEventMessageBatchStreamRequest, EventNotificationService_GetEventMessageBatchStreamServer) error
	// AcknowledgeMessageBatch
	//
	// List of messages to acknowledge
	// Each reply is protected by a salt and and hmac that verifies the message
	AcknowledgeMessageBatch(context.Context, *AcknowledgeMessageBatchRequest) (*AcknowledgeMessageBatchResponse, error)
	// DeleteEventStreamingGroup
	//
	// Deletes a existing EventStreamingGroup by ID
	DeleteEventStreamingGroup(context.Context, *DeleteEventStreamingGroupRequest) (*DeleteEventStreamingGroupResponse, error)
}

// UnimplementedEventNotificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventNotificationServiceServer struct {
}

func (UnimplementedEventNotificationServiceServer) CreateEventStreamingGroup(context.Context, *CreateEventStreamingGroupRequest) (*CreateEventStreamingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventStreamingGroup not implemented")
}
func (UnimplementedEventNotificationServiceServer) GetEventMessageBatch(context.Context, *GetEventMessageBatchRequest) (*GetEventMessageBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventMessageBatch not implemented")
}
func (UnimplementedEventNotificationServiceServer) GetEventMessageBatchStream(*GetEventMessageBatchStreamRequest, EventNotificationService_GetEventMessageBatchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventMessageBatchStream not implemented")
}
func (UnimplementedEventNotificationServiceServer) AcknowledgeMessageBatch(context.Context, *AcknowledgeMessageBatchRequest) (*AcknowledgeMessageBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeMessageBatch not implemented")
}
func (UnimplementedEventNotificationServiceServer) DeleteEventStreamingGroup(context.Context, *DeleteEventStreamingGroupRequest) (*DeleteEventStreamingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventStreamingGroup not implemented")
}

// UnsafeEventNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventNotificationServiceServer will
// result in compilation errors.
type UnsafeEventNotificationServiceServer interface {
	mustEmbedUnimplementedEventNotificationServiceServer()
}

func RegisterEventNotificationServiceServer(s grpc.ServiceRegistrar, srv EventNotificationServiceServer) {
	s.RegisterService(&EventNotificationService_ServiceDesc, srv)
}

func _EventNotificationService_CreateEventStreamingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventStreamingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventNotificationServiceServer).CreateEventStreamingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.notification.services.v1.EventNotificationService/CreateEventStreamingGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventNotificationServiceServer).CreateEventStreamingGroup(ctx, req.(*CreateEventStreamingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventNotificationService_GetEventMessageBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventMessageBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventNotificationServiceServer).GetEventMessageBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.notification.services.v1.EventNotificationService/GetEventMessageBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventNotificationServiceServer).GetEventMessageBatch(ctx, req.(*GetEventMessageBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventNotificationService_GetEventMessageBatchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventMessageBatchStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventNotificationServiceServer).GetEventMessageBatchStream(m, &eventNotificationServiceGetEventMessageBatchStreamServer{stream})
}

type EventNotificationService_GetEventMessageBatchStreamServer interface {
	Send(*GetEventMessageBatchStreamResponse) error
	grpc.ServerStream
}

type eventNotificationServiceGetEventMessageBatchStreamServer struct {
	grpc.ServerStream
}

func (x *eventNotificationServiceGetEventMessageBatchStreamServer) Send(m *GetEventMessageBatchStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EventNotificationService_AcknowledgeMessageBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeMessageBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventNotificationServiceServer).AcknowledgeMessageBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.notification.services.v1.EventNotificationService/AcknowledgeMessageBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventNotificationServiceServer).AcknowledgeMessageBatch(ctx, req.(*AcknowledgeMessageBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventNotificationService_DeleteEventStreamingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventStreamingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventNotificationServiceServer).DeleteEventStreamingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.notification.services.v1.EventNotificationService/DeleteEventStreamingGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventNotificationServiceServer).DeleteEventStreamingGroup(ctx, req.(*DeleteEventStreamingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventNotificationService_ServiceDesc is the grpc.ServiceDesc for EventNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.notification.services.v1.EventNotificationService",
	HandlerType: (*EventNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventStreamingGroup",
			Handler:    _EventNotificationService_CreateEventStreamingGroup_Handler,
		},
		{
			MethodName: "GetEventMessageBatch",
			Handler:    _EventNotificationService_GetEventMessageBatch_Handler,
		},
		{
			MethodName: "AcknowledgeMessageBatch",
			Handler:    _EventNotificationService_AcknowledgeMessageBatch_Handler,
		},
		{
			MethodName: "DeleteEventStreamingGroup",
			Handler:    _EventNotificationService_DeleteEventStreamingGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventMessageBatchStream",
			Handler:       _EventNotificationService_GetEventMessageBatchStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aruna/api/notification/services/v1/notification_service.proto",
}
