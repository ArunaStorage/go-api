// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/notification/services/v1/notification_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateNotificationServiceClient is the client API for UpdateNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateNotificationServiceClient interface {
	// CreateEventStreamingGroup
	//
	// Creates a new EventStreamingGroup
	CreateEventStreamingGroup(ctx context.Context, in *CreateEventStreamingGroupRequest, opts ...grpc.CallOption) (*CreateEventStreamingGroupResponse, error)
	// DeleteEventStreamingGroup
	//
	// Deletes a existing EventStreamingGroup by ID
	DeleteEventStreamingGroup(ctx context.Context, in *DeleteEventStreamingGroupRequest, opts ...grpc.CallOption) (*DeleteEventStreamingGroupResponse, error)
	// ReadStreamGroupMessages
	//
	// Reads a stream of messages for a specific StreamGroup
	ReadStreamGroupMessages(ctx context.Context, opts ...grpc.CallOption) (UpdateNotificationService_ReadStreamGroupMessagesClient, error)
}

type updateNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateNotificationServiceClient(cc grpc.ClientConnInterface) UpdateNotificationServiceClient {
	return &updateNotificationServiceClient{cc}
}

func (c *updateNotificationServiceClient) CreateEventStreamingGroup(ctx context.Context, in *CreateEventStreamingGroupRequest, opts ...grpc.CallOption) (*CreateEventStreamingGroupResponse, error) {
	out := new(CreateEventStreamingGroupResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.notification.services.v1.UpdateNotificationService/CreateEventStreamingGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateNotificationServiceClient) DeleteEventStreamingGroup(ctx context.Context, in *DeleteEventStreamingGroupRequest, opts ...grpc.CallOption) (*DeleteEventStreamingGroupResponse, error) {
	out := new(DeleteEventStreamingGroupResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.notification.services.v1.UpdateNotificationService/DeleteEventStreamingGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateNotificationServiceClient) ReadStreamGroupMessages(ctx context.Context, opts ...grpc.CallOption) (UpdateNotificationService_ReadStreamGroupMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateNotificationService_ServiceDesc.Streams[0], "/aruna.api.notification.services.v1.UpdateNotificationService/ReadStreamGroupMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &updateNotificationServiceReadStreamGroupMessagesClient{stream}
	return x, nil
}

type UpdateNotificationService_ReadStreamGroupMessagesClient interface {
	Send(*ReadStreamGroupMessagesRequest) error
	Recv() (*ReadStreamGroupMessagesResponse, error)
	grpc.ClientStream
}

type updateNotificationServiceReadStreamGroupMessagesClient struct {
	grpc.ClientStream
}

func (x *updateNotificationServiceReadStreamGroupMessagesClient) Send(m *ReadStreamGroupMessagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *updateNotificationServiceReadStreamGroupMessagesClient) Recv() (*ReadStreamGroupMessagesResponse, error) {
	m := new(ReadStreamGroupMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateNotificationServiceServer is the server API for UpdateNotificationService service.
// All implementations should embed UnimplementedUpdateNotificationServiceServer
// for forward compatibility
type UpdateNotificationServiceServer interface {
	// CreateEventStreamingGroup
	//
	// Creates a new EventStreamingGroup
	CreateEventStreamingGroup(context.Context, *CreateEventStreamingGroupRequest) (*CreateEventStreamingGroupResponse, error)
	// DeleteEventStreamingGroup
	//
	// Deletes a existing EventStreamingGroup by ID
	DeleteEventStreamingGroup(context.Context, *DeleteEventStreamingGroupRequest) (*DeleteEventStreamingGroupResponse, error)
	// ReadStreamGroupMessages
	//
	// Reads a stream of messages for a specific StreamGroup
	ReadStreamGroupMessages(UpdateNotificationService_ReadStreamGroupMessagesServer) error
}

// UnimplementedUpdateNotificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUpdateNotificationServiceServer struct {
}

func (UnimplementedUpdateNotificationServiceServer) CreateEventStreamingGroup(context.Context, *CreateEventStreamingGroupRequest) (*CreateEventStreamingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventStreamingGroup not implemented")
}
func (UnimplementedUpdateNotificationServiceServer) DeleteEventStreamingGroup(context.Context, *DeleteEventStreamingGroupRequest) (*DeleteEventStreamingGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventStreamingGroup not implemented")
}
func (UnimplementedUpdateNotificationServiceServer) ReadStreamGroupMessages(UpdateNotificationService_ReadStreamGroupMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadStreamGroupMessages not implemented")
}

// UnsafeUpdateNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateNotificationServiceServer will
// result in compilation errors.
type UnsafeUpdateNotificationServiceServer interface {
	mustEmbedUnimplementedUpdateNotificationServiceServer()
}

func RegisterUpdateNotificationServiceServer(s grpc.ServiceRegistrar, srv UpdateNotificationServiceServer) {
	s.RegisterService(&UpdateNotificationService_ServiceDesc, srv)
}

func _UpdateNotificationService_CreateEventStreamingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventStreamingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateNotificationServiceServer).CreateEventStreamingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.notification.services.v1.UpdateNotificationService/CreateEventStreamingGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateNotificationServiceServer).CreateEventStreamingGroup(ctx, req.(*CreateEventStreamingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateNotificationService_DeleteEventStreamingGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventStreamingGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateNotificationServiceServer).DeleteEventStreamingGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.notification.services.v1.UpdateNotificationService/DeleteEventStreamingGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateNotificationServiceServer).DeleteEventStreamingGroup(ctx, req.(*DeleteEventStreamingGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateNotificationService_ReadStreamGroupMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpdateNotificationServiceServer).ReadStreamGroupMessages(&updateNotificationServiceReadStreamGroupMessagesServer{stream})
}

type UpdateNotificationService_ReadStreamGroupMessagesServer interface {
	Send(*ReadStreamGroupMessagesResponse) error
	Recv() (*ReadStreamGroupMessagesRequest, error)
	grpc.ServerStream
}

type updateNotificationServiceReadStreamGroupMessagesServer struct {
	grpc.ServerStream
}

func (x *updateNotificationServiceReadStreamGroupMessagesServer) Send(m *ReadStreamGroupMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *updateNotificationServiceReadStreamGroupMessagesServer) Recv() (*ReadStreamGroupMessagesRequest, error) {
	m := new(ReadStreamGroupMessagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateNotificationService_ServiceDesc is the grpc.ServiceDesc for UpdateNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.notification.services.v1.UpdateNotificationService",
	HandlerType: (*UpdateNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventStreamingGroup",
			Handler:    _UpdateNotificationService_CreateEventStreamingGroup_Handler,
		},
		{
			MethodName: "DeleteEventStreamingGroup",
			Handler:    _UpdateNotificationService_DeleteEventStreamingGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadStreamGroupMessages",
			Handler:       _UpdateNotificationService_ReadStreamGroupMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aruna/api/notification/services/v1/notification_service.proto",
}
