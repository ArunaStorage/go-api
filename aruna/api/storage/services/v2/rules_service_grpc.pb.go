// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v2/rules_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RulesService_CreateRule_FullMethodName        = "/aruna.api.storage.services.v2.RulesService/CreateRule"
	RulesService_GetRule_FullMethodName           = "/aruna.api.storage.services.v2.RulesService/GetRule"
	RulesService_ListRule_FullMethodName          = "/aruna.api.storage.services.v2.RulesService/ListRule"
	RulesService_UpdateRule_FullMethodName        = "/aruna.api.storage.services.v2.RulesService/UpdateRule"
	RulesService_DeleteRule_FullMethodName        = "/aruna.api.storage.services.v2.RulesService/DeleteRule"
	RulesService_CreateRuleBinding_FullMethodName = "/aruna.api.storage.services.v2.RulesService/CreateRuleBinding"
	RulesService_DeleteRuleBinding_FullMethodName = "/aruna.api.storage.services.v2.RulesService/DeleteRuleBinding"
)

// RulesServiceClient is the client API for RulesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RulesServiceClient interface {
	// CreateRule
	//
	// Status: ALPHA
	//
	// Create a new rule
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	// GetRule
	//
	// Status: ALPHA
	//
	// Gets an existing rule
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error)
	// ListRule
	//
	// Status: ALPHA
	//
	// Lists rules -> Owned and public rules
	ListRule(ctx context.Context, in *ListRuleRequest, opts ...grpc.CallOption) (*ListRuleResponse, error)
	// UpdateRule
	//
	// Status: ALPHA
	//
	// Updates an existing rule
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
	// DeleteRule
	//
	// Status: ALPHA
	//
	// Deletes an existing rule
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	// CreateRuleBinding
	//
	// Status: ALPHA
	//
	// Associates a rule with an object, optionally cascading the rule to all children
	CreateRuleBinding(ctx context.Context, in *CreateRuleBindingRequest, opts ...grpc.CallOption) (*CreateRuleBindingResponse, error)
	// DeleteRuleBinding
	//
	// Status: ALPHA
	//
	// Disassociates a rule from an object
	DeleteRuleBinding(ctx context.Context, in *DeleteRuleBindingRequest, opts ...grpc.CallOption) (*DeleteRuleBindingResponse, error)
}

type rulesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRulesServiceClient(cc grpc.ClientConnInterface) RulesServiceClient {
	return &rulesServiceClient{cc}
}

func (c *rulesServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, RulesService_CreateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error) {
	out := new(GetRuleResponse)
	err := c.cc.Invoke(ctx, RulesService_GetRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesServiceClient) ListRule(ctx context.Context, in *ListRuleRequest, opts ...grpc.CallOption) (*ListRuleResponse, error) {
	out := new(ListRuleResponse)
	err := c.cc.Invoke(ctx, RulesService_ListRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, RulesService_UpdateRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, RulesService_DeleteRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesServiceClient) CreateRuleBinding(ctx context.Context, in *CreateRuleBindingRequest, opts ...grpc.CallOption) (*CreateRuleBindingResponse, error) {
	out := new(CreateRuleBindingResponse)
	err := c.cc.Invoke(ctx, RulesService_CreateRuleBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesServiceClient) DeleteRuleBinding(ctx context.Context, in *DeleteRuleBindingRequest, opts ...grpc.CallOption) (*DeleteRuleBindingResponse, error) {
	out := new(DeleteRuleBindingResponse)
	err := c.cc.Invoke(ctx, RulesService_DeleteRuleBinding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulesServiceServer is the server API for RulesService service.
// All implementations should embed UnimplementedRulesServiceServer
// for forward compatibility
type RulesServiceServer interface {
	// CreateRule
	//
	// Status: ALPHA
	//
	// Create a new rule
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error)
	// GetRule
	//
	// Status: ALPHA
	//
	// Gets an existing rule
	GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error)
	// ListRule
	//
	// Status: ALPHA
	//
	// Lists rules -> Owned and public rules
	ListRule(context.Context, *ListRuleRequest) (*ListRuleResponse, error)
	// UpdateRule
	//
	// Status: ALPHA
	//
	// Updates an existing rule
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error)
	// DeleteRule
	//
	// Status: ALPHA
	//
	// Deletes an existing rule
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	// CreateRuleBinding
	//
	// Status: ALPHA
	//
	// Associates a rule with an object, optionally cascading the rule to all children
	CreateRuleBinding(context.Context, *CreateRuleBindingRequest) (*CreateRuleBindingResponse, error)
	// DeleteRuleBinding
	//
	// Status: ALPHA
	//
	// Disassociates a rule from an object
	DeleteRuleBinding(context.Context, *DeleteRuleBindingRequest) (*DeleteRuleBindingResponse, error)
}

// UnimplementedRulesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRulesServiceServer struct {
}

func (UnimplementedRulesServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedRulesServiceServer) GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedRulesServiceServer) ListRule(context.Context, *ListRuleRequest) (*ListRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRule not implemented")
}
func (UnimplementedRulesServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedRulesServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedRulesServiceServer) CreateRuleBinding(context.Context, *CreateRuleBindingRequest) (*CreateRuleBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRuleBinding not implemented")
}
func (UnimplementedRulesServiceServer) DeleteRuleBinding(context.Context, *DeleteRuleBindingRequest) (*DeleteRuleBindingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuleBinding not implemented")
}

// UnsafeRulesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RulesServiceServer will
// result in compilation errors.
type UnsafeRulesServiceServer interface {
	mustEmbedUnimplementedRulesServiceServer()
}

func RegisterRulesServiceServer(s grpc.ServiceRegistrar, srv RulesServiceServer) {
	s.RegisterService(&RulesService_ServiceDesc, srv)
}

func _RulesService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulesService_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulesService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulesService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulesService_ListRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).ListRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulesService_ListRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).ListRule(ctx, req.(*ListRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulesService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulesService_UpdateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulesService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulesService_DeleteRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulesService_CreateRuleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).CreateRuleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulesService_CreateRuleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).CreateRuleBinding(ctx, req.(*CreateRuleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RulesService_DeleteRuleBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleBindingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServiceServer).DeleteRuleBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RulesService_DeleteRuleBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServiceServer).DeleteRuleBinding(ctx, req.(*DeleteRuleBindingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RulesService_ServiceDesc is the grpc.ServiceDesc for RulesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RulesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v2.RulesService",
	HandlerType: (*RulesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRule",
			Handler:    _RulesService_CreateRule_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _RulesService_GetRule_Handler,
		},
		{
			MethodName: "ListRule",
			Handler:    _RulesService_ListRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _RulesService_UpdateRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _RulesService_DeleteRule_Handler,
		},
		{
			MethodName: "CreateRuleBinding",
			Handler:    _RulesService_CreateRuleBinding_Handler,
		},
		{
			MethodName: "DeleteRuleBinding",
			Handler:    _RulesService_DeleteRuleBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v2/rules_service.proto",
}
