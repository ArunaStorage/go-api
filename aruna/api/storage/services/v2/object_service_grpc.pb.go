// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v2/object_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ObjectService_CreateObject_FullMethodName        = "/aruna.api.storage.services.v2.ObjectService/CreateObject"
	ObjectService_GetUploadURL_FullMethodName        = "/aruna.api.storage.services.v2.ObjectService/GetUploadURL"
	ObjectService_GetDownloadURL_FullMethodName      = "/aruna.api.storage.services.v2.ObjectService/GetDownloadURL"
	ObjectService_FinishObjectStaging_FullMethodName = "/aruna.api.storage.services.v2.ObjectService/FinishObjectStaging"
	ObjectService_UpdateObject_FullMethodName        = "/aruna.api.storage.services.v2.ObjectService/UpdateObject"
	ObjectService_CloneObject_FullMethodName         = "/aruna.api.storage.services.v2.ObjectService/CloneObject"
	ObjectService_DeleteObject_FullMethodName        = "/aruna.api.storage.services.v2.ObjectService/DeleteObject"
	ObjectService_GetObject_FullMethodName           = "/aruna.api.storage.services.v2.ObjectService/GetObject"
	ObjectService_GetObjects_FullMethodName          = "/aruna.api.storage.services.v2.ObjectService/GetObjects"
)

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectServiceClient interface {
	// CreateObject
	//
	// Status: BETA
	//
	// This creates a new object
	// Initializing an object will put it in a staging area.
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error)
	// GetUploadURL
	//
	// Status: BETA
	//
	// This is a proxy method that will call the apropriate method at dataproxy level
	// This method will return a (multi-part) url that can be used to upload a
	// file to S3. Part is a optional query parameter that can be used to upload a
	// part of the file / multipart upload.
	GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error)
	// GetDownloadUrl
	//
	// Status: BETA
	//
	// This is a proxy method that will call the apropriate method at dataproxy level
	// will return a url that can be used to download a file from S3.
	GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error)
	// FinishObjectStaging
	//
	// Status: BETA
	//
	// This method completes the staging of an object.
	FinishObjectStaging(ctx context.Context, in *FinishObjectStagingRequest, opts ...grpc.CallOption) (*FinishObjectStagingResponse, error)
	// UpdateObject
	//
	// Status: BETA
	//
	// Objects are immutable!
	// Updating an object will create a new revision for the object
	// This method will put the new revision in a staging area.
	// Staged objects will get a separate staging id and need to be finished
	// before they can be used.
	UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error)
	// CloneObject
	//
	// Status: BETA
	//
	// This method clones an object and creates a copy in the same collection.
	// This copy has a new id and revision and will not receive any updates from
	// the original object.
	CloneObject(ctx context.Context, in *CloneObjectRequest, opts ...grpc.CallOption) (*CloneObjectResponse, error)
	// DeleteObject
	//
	// Status: BETA
	//
	// Deletes the object with the complete revision history.
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	// GetObject
	//
	// Status: BETA
	//
	// gets a specific Object by ID that is associated to the
	// current collection By default only the latest revision of an object will be
	// returned Specify a revision_number to select an older revision With the
	// optional with_url boolean a download link can automatically be requested
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	// GetObjects
	//
	// Status: BETA
	//
	// Get multiple objects by ID at once
	GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*GetObjectsResponse, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error) {
	out := new(CreateObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_CreateObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error) {
	out := new(GetUploadURLResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetUploadURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error) {
	out := new(GetDownloadURLResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetDownloadURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) FinishObjectStaging(ctx context.Context, in *FinishObjectStagingRequest, opts ...grpc.CallOption) (*FinishObjectStagingResponse, error) {
	out := new(FinishObjectStagingResponse)
	err := c.cc.Invoke(ctx, ObjectService_FinishObjectStaging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error) {
	out := new(UpdateObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_UpdateObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CloneObject(ctx context.Context, in *CloneObjectRequest, opts ...grpc.CallOption) (*CloneObjectResponse, error) {
	out := new(CloneObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_CloneObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_DeleteObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*GetObjectsResponse, error) {
	out := new(GetObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectService_GetObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations should embed UnimplementedObjectServiceServer
// for forward compatibility
type ObjectServiceServer interface {
	// CreateObject
	//
	// Status: BETA
	//
	// This creates a new object
	// Initializing an object will put it in a staging area.
	CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error)
	// GetUploadURL
	//
	// Status: BETA
	//
	// This is a proxy method that will call the apropriate method at dataproxy level
	// This method will return a (multi-part) url that can be used to upload a
	// file to S3. Part is a optional query parameter that can be used to upload a
	// part of the file / multipart upload.
	GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error)
	// GetDownloadUrl
	//
	// Status: BETA
	//
	// This is a proxy method that will call the apropriate method at dataproxy level
	// will return a url that can be used to download a file from S3.
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error)
	// FinishObjectStaging
	//
	// Status: BETA
	//
	// This method completes the staging of an object.
	FinishObjectStaging(context.Context, *FinishObjectStagingRequest) (*FinishObjectStagingResponse, error)
	// UpdateObject
	//
	// Status: BETA
	//
	// Objects are immutable!
	// Updating an object will create a new revision for the object
	// This method will put the new revision in a staging area.
	// Staged objects will get a separate staging id and need to be finished
	// before they can be used.
	UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error)
	// CloneObject
	//
	// Status: BETA
	//
	// This method clones an object and creates a copy in the same collection.
	// This copy has a new id and revision and will not receive any updates from
	// the original object.
	CloneObject(context.Context, *CloneObjectRequest) (*CloneObjectResponse, error)
	// DeleteObject
	//
	// Status: BETA
	//
	// Deletes the object with the complete revision history.
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	// GetObject
	//
	// Status: BETA
	//
	// gets a specific Object by ID that is associated to the
	// current collection By default only the latest revision of an object will be
	// returned Specify a revision_number to select an older revision With the
	// optional with_url boolean a download link can automatically be requested
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	// GetObjects
	//
	// Status: BETA
	//
	// Get multiple objects by ID at once
	GetObjects(context.Context, *GetObjectsRequest) (*GetObjectsResponse, error)
}

// UnimplementedObjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectServiceServer struct {
}

func (UnimplementedObjectServiceServer) CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedObjectServiceServer) GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadURL not implemented")
}
func (UnimplementedObjectServiceServer) GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadURL not implemented")
}
func (UnimplementedObjectServiceServer) FinishObjectStaging(context.Context, *FinishObjectStagingRequest) (*FinishObjectStagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishObjectStaging not implemented")
}
func (UnimplementedObjectServiceServer) UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedObjectServiceServer) CloneObject(context.Context, *CloneObjectRequest) (*CloneObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneObject not implemented")
}
func (UnimplementedObjectServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedObjectServiceServer) GetObjects(context.Context, *GetObjectsRequest) (*GetObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjects not implemented")
}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_CreateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetUploadURL(ctx, req.(*GetUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_FinishObjectStaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishObjectStagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).FinishObjectStaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_FinishObjectStaging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).FinishObjectStaging(ctx, req.(*FinishObjectStagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_UpdateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UpdateObject(ctx, req.(*UpdateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CloneObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CloneObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_CloneObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CloneObject(ctx, req.(*CloneObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectService_GetObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjects(ctx, req.(*GetObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v2.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _ObjectService_CreateObject_Handler,
		},
		{
			MethodName: "GetUploadURL",
			Handler:    _ObjectService_GetUploadURL_Handler,
		},
		{
			MethodName: "GetDownloadURL",
			Handler:    _ObjectService_GetDownloadURL_Handler,
		},
		{
			MethodName: "FinishObjectStaging",
			Handler:    _ObjectService_FinishObjectStaging_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _ObjectService_UpdateObject_Handler,
		},
		{
			MethodName: "CloneObject",
			Handler:    _ObjectService_CloneObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectService_DeleteObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _ObjectService_GetObject_Handler,
		},
		{
			MethodName: "GetObjects",
			Handler:    _ObjectService_GetObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v2/object_service.proto",
}
