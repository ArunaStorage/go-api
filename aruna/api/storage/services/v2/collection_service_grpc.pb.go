// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v2/collection_service.proto

package servicesv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CollectionService_CreateCollection_FullMethodName            = "/aruna.api.storage.services.v2.CollectionService/CreateCollection"
	CollectionService_GetCollection_FullMethodName               = "/aruna.api.storage.services.v2.CollectionService/GetCollection"
	CollectionService_GetCollections_FullMethodName              = "/aruna.api.storage.services.v2.CollectionService/GetCollections"
	CollectionService_DeleteCollection_FullMethodName            = "/aruna.api.storage.services.v2.CollectionService/DeleteCollection"
	CollectionService_UpdateCollectionName_FullMethodName        = "/aruna.api.storage.services.v2.CollectionService/UpdateCollectionName"
	CollectionService_UpdateCollectionDescription_FullMethodName = "/aruna.api.storage.services.v2.CollectionService/UpdateCollectionDescription"
	CollectionService_UpdateCollectionKeyValues_FullMethodName   = "/aruna.api.storage.services.v2.CollectionService/UpdateCollectionKeyValues"
	CollectionService_UpdateCollectionDataClass_FullMethodName   = "/aruna.api.storage.services.v2.CollectionService/UpdateCollectionDataClass"
	CollectionService_SnapshotCollection_FullMethodName          = "/aruna.api.storage.services.v2.CollectionService/SnapshotCollection"
)

// CollectionServiceClient is the client API for CollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionServiceClient interface {
	// CreateNewCollection
	//
	// Status: BETA
	//
	// creates a new Collection
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	// GetCollection
	//
	// Status: BETA
	//
	// Request a specific collection by ID
	GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error)
	// GetCollections
	//
	// Status: BETA
	//
	// Queries multiple collections by ID
	GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error)
	// DeleteCollection
	//
	// Status: STABLE
	//
	// This request deletes the collection.
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
	// UpdateCollectionName
	//
	// Status: BETA
	//
	// Updates the collection name. Caveat! Will rename the "s3 bucket" for data proxies!
	UpdateCollectionName(ctx context.Context, in *UpdateCollectionNameRequest, opts ...grpc.CallOption) (*UpdateCollectionNameResponse, error)
	// UpdateCollectionDescription
	//
	// Status: BETA
	//
	// Updates the collection description.
	UpdateCollectionDescription(ctx context.Context, in *UpdateCollectionDescriptionRequest, opts ...grpc.CallOption) (*UpdateCollectionDescriptionResponse, error)
	// UpdateCollectionKeyValues
	//
	// Status: BETA
	//
	// Updates the collection key values.
	UpdateCollectionKeyValues(ctx context.Context, in *UpdateCollectionKeyValuesRequest, opts ...grpc.CallOption) (*UpdateCollectionKeyValuesResponse, error)
	// UpdateCollectionDataClass
	//
	// Status: BETA
	//
	// Updates the collection name. All (meta) data will be overwritten.
	UpdateCollectionDataClass(ctx context.Context, in *UpdateCollectionDataClassRequest, opts ...grpc.CallOption) (*UpdateCollectionDataClassResponse, error)
	// SnapshotCollectionRequest
	//
	// Status: BETA
	//
	// Archives the full collection, rendering all downstream relations immutable
	SnapshotCollection(ctx context.Context, in *SnapshotCollectionRequest, opts ...grpc.CallOption) (*SnapshotCollectionResponse, error)
}

type collectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionServiceClient(cc grpc.ClientConnInterface) CollectionServiceClient {
	return &collectionServiceClient{cc}
}

func (c *collectionServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, CollectionService_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollection(ctx context.Context, in *GetCollectionRequest, opts ...grpc.CallOption) (*GetCollectionResponse, error) {
	out := new(GetCollectionResponse)
	err := c.cc.Invoke(ctx, CollectionService_GetCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error) {
	out := new(GetCollectionsResponse)
	err := c.cc.Invoke(ctx, CollectionService_GetCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	out := new(DeleteCollectionResponse)
	err := c.cc.Invoke(ctx, CollectionService_DeleteCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) UpdateCollectionName(ctx context.Context, in *UpdateCollectionNameRequest, opts ...grpc.CallOption) (*UpdateCollectionNameResponse, error) {
	out := new(UpdateCollectionNameResponse)
	err := c.cc.Invoke(ctx, CollectionService_UpdateCollectionName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) UpdateCollectionDescription(ctx context.Context, in *UpdateCollectionDescriptionRequest, opts ...grpc.CallOption) (*UpdateCollectionDescriptionResponse, error) {
	out := new(UpdateCollectionDescriptionResponse)
	err := c.cc.Invoke(ctx, CollectionService_UpdateCollectionDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) UpdateCollectionKeyValues(ctx context.Context, in *UpdateCollectionKeyValuesRequest, opts ...grpc.CallOption) (*UpdateCollectionKeyValuesResponse, error) {
	out := new(UpdateCollectionKeyValuesResponse)
	err := c.cc.Invoke(ctx, CollectionService_UpdateCollectionKeyValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) UpdateCollectionDataClass(ctx context.Context, in *UpdateCollectionDataClassRequest, opts ...grpc.CallOption) (*UpdateCollectionDataClassResponse, error) {
	out := new(UpdateCollectionDataClassResponse)
	err := c.cc.Invoke(ctx, CollectionService_UpdateCollectionDataClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) SnapshotCollection(ctx context.Context, in *SnapshotCollectionRequest, opts ...grpc.CallOption) (*SnapshotCollectionResponse, error) {
	out := new(SnapshotCollectionResponse)
	err := c.cc.Invoke(ctx, CollectionService_SnapshotCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionServiceServer is the server API for CollectionService service.
// All implementations should embed UnimplementedCollectionServiceServer
// for forward compatibility
type CollectionServiceServer interface {
	// CreateNewCollection
	//
	// Status: BETA
	//
	// creates a new Collection
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	// GetCollection
	//
	// Status: BETA
	//
	// Request a specific collection by ID
	GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error)
	// GetCollections
	//
	// Status: BETA
	//
	// Queries multiple collections by ID
	GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error)
	// DeleteCollection
	//
	// Status: STABLE
	//
	// This request deletes the collection.
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error)
	// UpdateCollectionName
	//
	// Status: BETA
	//
	// Updates the collection name. Caveat! Will rename the "s3 bucket" for data proxies!
	UpdateCollectionName(context.Context, *UpdateCollectionNameRequest) (*UpdateCollectionNameResponse, error)
	// UpdateCollectionDescription
	//
	// Status: BETA
	//
	// Updates the collection description.
	UpdateCollectionDescription(context.Context, *UpdateCollectionDescriptionRequest) (*UpdateCollectionDescriptionResponse, error)
	// UpdateCollectionKeyValues
	//
	// Status: BETA
	//
	// Updates the collection key values.
	UpdateCollectionKeyValues(context.Context, *UpdateCollectionKeyValuesRequest) (*UpdateCollectionKeyValuesResponse, error)
	// UpdateCollectionDataClass
	//
	// Status: BETA
	//
	// Updates the collection name. All (meta) data will be overwritten.
	UpdateCollectionDataClass(context.Context, *UpdateCollectionDataClassRequest) (*UpdateCollectionDataClassResponse, error)
	// SnapshotCollectionRequest
	//
	// Status: BETA
	//
	// Archives the full collection, rendering all downstream relations immutable
	SnapshotCollection(context.Context, *SnapshotCollectionRequest) (*SnapshotCollectionResponse, error)
}

// UnimplementedCollectionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollectionServiceServer struct {
}

func (UnimplementedCollectionServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedCollectionServiceServer) GetCollection(context.Context, *GetCollectionRequest) (*GetCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollection not implemented")
}
func (UnimplementedCollectionServiceServer) GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedCollectionServiceServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}
func (UnimplementedCollectionServiceServer) UpdateCollectionName(context.Context, *UpdateCollectionNameRequest) (*UpdateCollectionNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionName not implemented")
}
func (UnimplementedCollectionServiceServer) UpdateCollectionDescription(context.Context, *UpdateCollectionDescriptionRequest) (*UpdateCollectionDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionDescription not implemented")
}
func (UnimplementedCollectionServiceServer) UpdateCollectionKeyValues(context.Context, *UpdateCollectionKeyValuesRequest) (*UpdateCollectionKeyValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionKeyValues not implemented")
}
func (UnimplementedCollectionServiceServer) UpdateCollectionDataClass(context.Context, *UpdateCollectionDataClassRequest) (*UpdateCollectionDataClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectionDataClass not implemented")
}
func (UnimplementedCollectionServiceServer) SnapshotCollection(context.Context, *SnapshotCollectionRequest) (*SnapshotCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotCollection not implemented")
}

// UnsafeCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServiceServer will
// result in compilation errors.
type UnsafeCollectionServiceServer interface {
	mustEmbedUnimplementedCollectionServiceServer()
}

func RegisterCollectionServiceServer(s grpc.ServiceRegistrar, srv CollectionServiceServer) {
	s.RegisterService(&CollectionService_ServiceDesc, srv)
}

func _CollectionService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_GetCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollection(ctx, req.(*GetCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_GetCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollections(ctx, req.(*GetCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_DeleteCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_UpdateCollectionName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).UpdateCollectionName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_UpdateCollectionName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).UpdateCollectionName(ctx, req.(*UpdateCollectionNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_UpdateCollectionDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).UpdateCollectionDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_UpdateCollectionDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).UpdateCollectionDescription(ctx, req.(*UpdateCollectionDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_UpdateCollectionKeyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionKeyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).UpdateCollectionKeyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_UpdateCollectionKeyValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).UpdateCollectionKeyValues(ctx, req.(*UpdateCollectionKeyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_UpdateCollectionDataClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionDataClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).UpdateCollectionDataClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_UpdateCollectionDataClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).UpdateCollectionDataClass(ctx, req.(*UpdateCollectionDataClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_SnapshotCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).SnapshotCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollectionService_SnapshotCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).SnapshotCollection(ctx, req.(*SnapshotCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionService_ServiceDesc is the grpc.ServiceDesc for CollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v2.CollectionService",
	HandlerType: (*CollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _CollectionService_CreateCollection_Handler,
		},
		{
			MethodName: "GetCollection",
			Handler:    _CollectionService_GetCollection_Handler,
		},
		{
			MethodName: "GetCollections",
			Handler:    _CollectionService_GetCollections_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _CollectionService_DeleteCollection_Handler,
		},
		{
			MethodName: "UpdateCollectionName",
			Handler:    _CollectionService_UpdateCollectionName_Handler,
		},
		{
			MethodName: "UpdateCollectionDescription",
			Handler:    _CollectionService_UpdateCollectionDescription_Handler,
		},
		{
			MethodName: "UpdateCollectionKeyValues",
			Handler:    _CollectionService_UpdateCollectionKeyValues_Handler,
		},
		{
			MethodName: "UpdateCollectionDataClass",
			Handler:    _CollectionService_UpdateCollectionDataClass_Handler,
		},
		{
			MethodName: "SnapshotCollection",
			Handler:    _CollectionService_SnapshotCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v2/collection_service.proto",
}
