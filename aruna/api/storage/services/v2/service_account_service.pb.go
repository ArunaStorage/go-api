// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: aruna/api/storage/services/v2/service_account_service.proto

package v2

import (
	v2 "github.com/ArunaStorage/go-api/v2/aruna/api/storage/models/v2"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateServiceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId       string             `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PermissionLevel v2.PermissionLevel `protobuf:"varint,3,opt,name=permission_level,json=permissionLevel,proto3,enum=aruna.api.storage.models.v2.PermissionLevel" json:"permission_level,omitempty"`
}

func (x *CreateServiceAccountRequest) Reset() {
	*x = CreateServiceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountRequest) ProtoMessage() {}

func (x *CreateServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServiceAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateServiceAccountRequest) GetPermissionLevel() v2.PermissionLevel {
	if x != nil {
		return x.PermissionLevel
	}
	return v2.PermissionLevel(0)
}

type ServiceAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string         `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	Name         string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Permission   *v2.Permission `protobuf:"bytes,3,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (x *ServiceAccount) Reset() {
	*x = ServiceAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccount) ProtoMessage() {}

func (x *ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccount.ProtoReflect.Descriptor instead.
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceAccount) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *ServiceAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceAccount) GetPermission() *v2.Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

type CreateServiceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccount *ServiceAccount `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
}

func (x *CreateServiceAccountResponse) Reset() {
	*x = CreateServiceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountResponse) ProtoMessage() {}

func (x *CreateServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateServiceAccountResponse) GetServiceAccount() *ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

type CreateServiceAccountTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	// Token permissions
	Permission *v2.Permission `protobuf:"bytes,2,opt,name=permission,proto3" json:"permission,omitempty"`
	// (optional) Token name
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// (optional) Token expiry
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *CreateServiceAccountTokenRequest) Reset() {
	*x = CreateServiceAccountTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceAccountTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountTokenRequest) ProtoMessage() {}

func (x *CreateServiceAccountTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountTokenRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountTokenRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateServiceAccountTokenRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *CreateServiceAccountTokenRequest) GetPermission() *v2.Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *CreateServiceAccountTokenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServiceAccountTokenRequest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type CreateServiceAccountTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains only the token description
	Token *v2.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// This is the actual secret API token
	TokenSecret string `protobuf:"bytes,2,opt,name=token_secret,json=tokenSecret,proto3" json:"token_secret,omitempty"`
}

func (x *CreateServiceAccountTokenResponse) Reset() {
	*x = CreateServiceAccountTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceAccountTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceAccountTokenResponse) ProtoMessage() {}

func (x *CreateServiceAccountTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceAccountTokenResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceAccountTokenResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateServiceAccountTokenResponse) GetToken() *v2.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CreateServiceAccountTokenResponse) GetTokenSecret() string {
	if x != nil {
		return x.TokenSecret
	}
	return ""
}

type GetServiceAccountTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	TokenId      string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *GetServiceAccountTokenRequest) Reset() {
	*x = GetServiceAccountTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceAccountTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAccountTokenRequest) ProtoMessage() {}

func (x *GetServiceAccountTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAccountTokenRequest.ProtoReflect.Descriptor instead.
func (*GetServiceAccountTokenRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetServiceAccountTokenRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *GetServiceAccountTokenRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type GetServiceAccountTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains only the token description
	Token *v2.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetServiceAccountTokenResponse) Reset() {
	*x = GetServiceAccountTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceAccountTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAccountTokenResponse) ProtoMessage() {}

func (x *GetServiceAccountTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAccountTokenResponse.ProtoReflect.Descriptor instead.
func (*GetServiceAccountTokenResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetServiceAccountTokenResponse) GetToken() *v2.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

type GetServiceAccountTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
}

func (x *GetServiceAccountTokensRequest) Reset() {
	*x = GetServiceAccountTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceAccountTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAccountTokensRequest) ProtoMessage() {}

func (x *GetServiceAccountTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAccountTokensRequest.ProtoReflect.Descriptor instead.
func (*GetServiceAccountTokensRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetServiceAccountTokensRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

type GetServiceAccountTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This contains only the token description
	Tokens []*v2.Token `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *GetServiceAccountTokensResponse) Reset() {
	*x = GetServiceAccountTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceAccountTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceAccountTokensResponse) ProtoMessage() {}

func (x *GetServiceAccountTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceAccountTokensResponse.ProtoReflect.Descriptor instead.
func (*GetServiceAccountTokensResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetServiceAccountTokensResponse) GetTokens() []*v2.Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DeleteServiceAccountTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	TokenId      string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (x *DeleteServiceAccountTokenRequest) Reset() {
	*x = DeleteServiceAccountTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountTokenRequest) ProtoMessage() {}

func (x *DeleteServiceAccountTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountTokenRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountTokenRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteServiceAccountTokenRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *DeleteServiceAccountTokenRequest) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

type DeleteServiceAccountTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServiceAccountTokenResponse) Reset() {
	*x = DeleteServiceAccountTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountTokenResponse) ProtoMessage() {}

func (x *DeleteServiceAccountTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountTokenResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountTokenResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{10}
}

type DeleteServiceAccountTokensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
}

func (x *DeleteServiceAccountTokensRequest) Reset() {
	*x = DeleteServiceAccountTokensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountTokensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountTokensRequest) ProtoMessage() {}

func (x *DeleteServiceAccountTokensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountTokensRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountTokensRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteServiceAccountTokensRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

type DeleteServiceAccountTokensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServiceAccountTokensResponse) Reset() {
	*x = DeleteServiceAccountTokensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountTokensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountTokensResponse) ProtoMessage() {}

func (x *DeleteServiceAccountTokensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountTokensResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountTokensResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{12}
}

type DeleteServiceAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
}

func (x *DeleteServiceAccountRequest) Reset() {
	*x = DeleteServiceAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountRequest) ProtoMessage() {}

func (x *DeleteServiceAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteServiceAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

type DeleteServiceAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServiceAccountResponse) Reset() {
	*x = DeleteServiceAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceAccountResponse) ProtoMessage() {}

func (x *DeleteServiceAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{14}
}

type CreateS3CredentialsSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	EndpointId   string `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
}

func (x *CreateS3CredentialsSvcAccountRequest) Reset() {
	*x = CreateS3CredentialsSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateS3CredentialsSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateS3CredentialsSvcAccountRequest) ProtoMessage() {}

func (x *CreateS3CredentialsSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateS3CredentialsSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateS3CredentialsSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{15}
}

func (x *CreateS3CredentialsSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *CreateS3CredentialsSvcAccountRequest) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

type CreateS3CredentialsSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3AccessKey   string `protobuf:"bytes,1,opt,name=s3_access_key,json=s3AccessKey,proto3" json:"s3_access_key,omitempty"`
	S3SecretKey   string `protobuf:"bytes,2,opt,name=s3_secret_key,json=s3SecretKey,proto3" json:"s3_secret_key,omitempty"`
	S3EndpointUrl string `protobuf:"bytes,3,opt,name=s3_endpoint_url,json=s3EndpointUrl,proto3" json:"s3_endpoint_url,omitempty"`
}

func (x *CreateS3CredentialsSvcAccountResponse) Reset() {
	*x = CreateS3CredentialsSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateS3CredentialsSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateS3CredentialsSvcAccountResponse) ProtoMessage() {}

func (x *CreateS3CredentialsSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateS3CredentialsSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateS3CredentialsSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateS3CredentialsSvcAccountResponse) GetS3AccessKey() string {
	if x != nil {
		return x.S3AccessKey
	}
	return ""
}

func (x *CreateS3CredentialsSvcAccountResponse) GetS3SecretKey() string {
	if x != nil {
		return x.S3SecretKey
	}
	return ""
}

func (x *CreateS3CredentialsSvcAccountResponse) GetS3EndpointUrl() string {
	if x != nil {
		return x.S3EndpointUrl
	}
	return ""
}

type GetS3CredentialsSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If called as admin, an id must be provided
	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	EndpointId   string `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
}

func (x *GetS3CredentialsSvcAccountRequest) Reset() {
	*x = GetS3CredentialsSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetS3CredentialsSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetS3CredentialsSvcAccountRequest) ProtoMessage() {}

func (x *GetS3CredentialsSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetS3CredentialsSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*GetS3CredentialsSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetS3CredentialsSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *GetS3CredentialsSvcAccountRequest) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

type GetS3CredentialsSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3AccessKey   string `protobuf:"bytes,1,opt,name=s3_access_key,json=s3AccessKey,proto3" json:"s3_access_key,omitempty"`
	S3SecretKey   string `protobuf:"bytes,2,opt,name=s3_secret_key,json=s3SecretKey,proto3" json:"s3_secret_key,omitempty"`
	S3EndpointUrl string `protobuf:"bytes,3,opt,name=s3_endpoint_url,json=s3EndpointUrl,proto3" json:"s3_endpoint_url,omitempty"`
}

func (x *GetS3CredentialsSvcAccountResponse) Reset() {
	*x = GetS3CredentialsSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetS3CredentialsSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetS3CredentialsSvcAccountResponse) ProtoMessage() {}

func (x *GetS3CredentialsSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetS3CredentialsSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*GetS3CredentialsSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetS3CredentialsSvcAccountResponse) GetS3AccessKey() string {
	if x != nil {
		return x.S3AccessKey
	}
	return ""
}

func (x *GetS3CredentialsSvcAccountResponse) GetS3SecretKey() string {
	if x != nil {
		return x.S3SecretKey
	}
	return ""
}

func (x *GetS3CredentialsSvcAccountResponse) GetS3EndpointUrl() string {
	if x != nil {
		return x.S3EndpointUrl
	}
	return ""
}

type DeleteS3CredentialsSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	EndpointId   string `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
}

func (x *DeleteS3CredentialsSvcAccountRequest) Reset() {
	*x = DeleteS3CredentialsSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteS3CredentialsSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteS3CredentialsSvcAccountRequest) ProtoMessage() {}

func (x *DeleteS3CredentialsSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteS3CredentialsSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteS3CredentialsSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteS3CredentialsSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *DeleteS3CredentialsSvcAccountRequest) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

type DeleteS3CredentialsSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteS3CredentialsSvcAccountResponse) Reset() {
	*x = DeleteS3CredentialsSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteS3CredentialsSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteS3CredentialsSvcAccountResponse) ProtoMessage() {}

func (x *DeleteS3CredentialsSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteS3CredentialsSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteS3CredentialsSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{20}
}

type CreateDataproxyTokenSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Needs to be provided by project admins
	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	// optional context to limit the scope
	Context    *v2.Context `protobuf:"bytes,3,opt,name=context,proto3,oneof" json:"context,omitempty"`
	EndpointId string      `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
}

func (x *CreateDataproxyTokenSvcAccountRequest) Reset() {
	*x = CreateDataproxyTokenSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataproxyTokenSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataproxyTokenSvcAccountRequest) ProtoMessage() {}

func (x *CreateDataproxyTokenSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataproxyTokenSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateDataproxyTokenSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{21}
}

func (x *CreateDataproxyTokenSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *CreateDataproxyTokenSvcAccountRequest) GetContext() *v2.Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CreateDataproxyTokenSvcAccountRequest) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

type CreateDataproxyTokenSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateDataproxyTokenSvcAccountResponse) Reset() {
	*x = CreateDataproxyTokenSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataproxyTokenSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataproxyTokenSvcAccountResponse) ProtoMessage() {}

func (x *CreateDataproxyTokenSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataproxyTokenSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateDataproxyTokenSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{22}
}

func (x *CreateDataproxyTokenSvcAccountResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AddPubkeySvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	PublicKey    string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *AddPubkeySvcAccountRequest) Reset() {
	*x = AddPubkeySvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPubkeySvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPubkeySvcAccountRequest) ProtoMessage() {}

func (x *AddPubkeySvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPubkeySvcAccountRequest.ProtoReflect.Descriptor instead.
func (*AddPubkeySvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{23}
}

func (x *AddPubkeySvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *AddPubkeySvcAccountRequest) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type AddPubkeySvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddPubkeySvcAccountResponse) Reset() {
	*x = AddPubkeySvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPubkeySvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPubkeySvcAccountResponse) ProtoMessage() {}

func (x *AddPubkeySvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPubkeySvcAccountResponse.ProtoReflect.Descriptor instead.
func (*AddPubkeySvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{24}
}

type AddTrustedEndpointsSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	EndpointId   string `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
}

func (x *AddTrustedEndpointsSvcAccountRequest) Reset() {
	*x = AddTrustedEndpointsSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrustedEndpointsSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrustedEndpointsSvcAccountRequest) ProtoMessage() {}

func (x *AddTrustedEndpointsSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrustedEndpointsSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*AddTrustedEndpointsSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{25}
}

func (x *AddTrustedEndpointsSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *AddTrustedEndpointsSvcAccountRequest) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

type AddTrustedEndpointsSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTrustedEndpointsSvcAccountResponse) Reset() {
	*x = AddTrustedEndpointsSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTrustedEndpointsSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTrustedEndpointsSvcAccountResponse) ProtoMessage() {}

func (x *AddTrustedEndpointsSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTrustedEndpointsSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*AddTrustedEndpointsSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{26}
}

type RemoveTrustedEndpointsSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	EndpointId   string `protobuf:"bytes,2,opt,name=endpoint_id,json=endpointId,proto3" json:"endpoint_id,omitempty"`
}

func (x *RemoveTrustedEndpointsSvcAccountRequest) Reset() {
	*x = RemoveTrustedEndpointsSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTrustedEndpointsSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTrustedEndpointsSvcAccountRequest) ProtoMessage() {}

func (x *RemoveTrustedEndpointsSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTrustedEndpointsSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*RemoveTrustedEndpointsSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{27}
}

func (x *RemoveTrustedEndpointsSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *RemoveTrustedEndpointsSvcAccountRequest) GetEndpointId() string {
	if x != nil {
		return x.EndpointId
	}
	return ""
}

type RemoveTrustedEndpointsSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTrustedEndpointsSvcAccountResponse) Reset() {
	*x = RemoveTrustedEndpointsSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTrustedEndpointsSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTrustedEndpointsSvcAccountResponse) ProtoMessage() {}

func (x *RemoveTrustedEndpointsSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTrustedEndpointsSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*RemoveTrustedEndpointsSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{28}
}

type AddDataProxyAttributeSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId string                 `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	Attribute    *v2.DataProxyAttribute `protobuf:"bytes,2,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *AddDataProxyAttributeSvcAccountRequest) Reset() {
	*x = AddDataProxyAttributeSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDataProxyAttributeSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataProxyAttributeSvcAccountRequest) ProtoMessage() {}

func (x *AddDataProxyAttributeSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataProxyAttributeSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*AddDataProxyAttributeSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{29}
}

func (x *AddDataProxyAttributeSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *AddDataProxyAttributeSvcAccountRequest) GetAttribute() *v2.DataProxyAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

type AddDataProxyAttributeSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddDataProxyAttributeSvcAccountResponse) Reset() {
	*x = AddDataProxyAttributeSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDataProxyAttributeSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataProxyAttributeSvcAccountResponse) ProtoMessage() {}

func (x *AddDataProxyAttributeSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataProxyAttributeSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*AddDataProxyAttributeSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{30}
}

type RemoveDataProxyAttributeSvcAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcAccountId  string `protobuf:"bytes,1,opt,name=svc_account_id,json=svcAccountId,proto3" json:"svc_account_id,omitempty"`
	DataproxyId   string `protobuf:"bytes,2,opt,name=dataproxy_id,json=dataproxyId,proto3" json:"dataproxy_id,omitempty"`
	AttributeName string `protobuf:"bytes,3,opt,name=attribute_name,json=attributeName,proto3" json:"attribute_name,omitempty"`
}

func (x *RemoveDataProxyAttributeSvcAccountRequest) Reset() {
	*x = RemoveDataProxyAttributeSvcAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDataProxyAttributeSvcAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDataProxyAttributeSvcAccountRequest) ProtoMessage() {}

func (x *RemoveDataProxyAttributeSvcAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDataProxyAttributeSvcAccountRequest.ProtoReflect.Descriptor instead.
func (*RemoveDataProxyAttributeSvcAccountRequest) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{31}
}

func (x *RemoveDataProxyAttributeSvcAccountRequest) GetSvcAccountId() string {
	if x != nil {
		return x.SvcAccountId
	}
	return ""
}

func (x *RemoveDataProxyAttributeSvcAccountRequest) GetDataproxyId() string {
	if x != nil {
		return x.DataproxyId
	}
	return ""
}

func (x *RemoveDataProxyAttributeSvcAccountRequest) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

type RemoveDataProxyAttributeSvcAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDataProxyAttributeSvcAccountResponse) Reset() {
	*x = RemoveDataProxyAttributeSvcAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDataProxyAttributeSvcAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDataProxyAttributeSvcAccountResponse) ProtoMessage() {}

func (x *RemoveDataProxyAttributeSvcAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDataProxyAttributeSvcAccountResponse.ProtoReflect.Descriptor instead.
func (*RemoveDataProxyAttributeSvcAccountResponse) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP(), []int{32}
}

var File_aruna_api_storage_services_v2_service_account_service_proto protoreflect.FileDescriptor

var file_aruna_api_storage_services_v2_service_account_service_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x28, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x93,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe0, 0x01, 0x0a,
	0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22,
	0x80, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x60, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x46, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x63, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x49, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x22,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x43, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x33, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x33, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x22, 0x6a, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x22, 0x47, 0x65, 0x74, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x33, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x33, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x33, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x33, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x33, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x22, 0x6d, 0x0a, 0x24, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x33, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x27, 0x0a, 0x25, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x33, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x25,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e, 0x0a,
	0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x61, 0x0a,
	0x1a, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x76, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6d, 0x0a, 0x24, 0x41, 0x64, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x27,
	0x0a, 0x25, 0x41, 0x64, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x26, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53,
	0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x76,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9b, 0x01, 0x0a, 0x29, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x76, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x2a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xf6, 0x1c, 0x0a,
	0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3a, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0xd7, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0xd6, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c,
	0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xce, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12,
	0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0xdf, 0x01,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x2a, 0x37, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76,
	0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0xd7, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x40,
	0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x2a, 0x2c, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x2a, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xf6, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x44, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x32,
	0x42, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x33, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x33, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x40, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x12,
	0x45, 0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x33, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x33, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x83, 0x02, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x76, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e,
	0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x33, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x3a, 0x01, 0x2a, 0x32, 0x4c,
	0x2f, 0x76, 0x32, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x33, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x33, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0xfa, 0x01, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x44, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x22, 0x40, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73,
	0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x7b, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc5, 0x01, 0x0a, 0x13, 0x41, 0x64,
	0x64, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x39, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x76, 0x63, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x12, 0xee, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x43, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c, 0x3a, 0x01, 0x2a, 0x22, 0x37, 0x2f, 0x76, 0x32, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0xf4, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x47, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x2a, 0x37, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xf8, 0x01, 0x0a, 0x1f, 0x41, 0x64,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x2e,
	0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x73,
	0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x12, 0xfe, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x53, 0x76, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x76,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x2a, 0x3b, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x76, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x0e, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x42, 0x99, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x1a, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x72, 0x75, 0x6e, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2f, 0x67, 0x6f, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x72, 0x75,
	0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x32, 0xa2, 0x02, 0x04, 0x41, 0x41, 0x53,
	0x53, 0xaa, 0x02, 0x1d, 0x41, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56,
	0x32, 0xca, 0x02, 0x1d, 0x41, 0x72, 0x75, 0x6e, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x56,
	0x32, 0xe2, 0x02, 0x29, 0x41, 0x72, 0x75, 0x6e, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x56,
	0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x21,
	0x41, 0x72, 0x75, 0x6e, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x56,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aruna_api_storage_services_v2_service_account_service_proto_rawDescOnce sync.Once
	file_aruna_api_storage_services_v2_service_account_service_proto_rawDescData = file_aruna_api_storage_services_v2_service_account_service_proto_rawDesc
)

func file_aruna_api_storage_services_v2_service_account_service_proto_rawDescGZIP() []byte {
	file_aruna_api_storage_services_v2_service_account_service_proto_rawDescOnce.Do(func() {
		file_aruna_api_storage_services_v2_service_account_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_aruna_api_storage_services_v2_service_account_service_proto_rawDescData)
	})
	return file_aruna_api_storage_services_v2_service_account_service_proto_rawDescData
}

var file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_aruna_api_storage_services_v2_service_account_service_proto_goTypes = []interface{}{
	(*CreateServiceAccountRequest)(nil),                // 0: aruna.api.storage.services.v2.CreateServiceAccountRequest
	(*ServiceAccount)(nil),                             // 1: aruna.api.storage.services.v2.ServiceAccount
	(*CreateServiceAccountResponse)(nil),               // 2: aruna.api.storage.services.v2.CreateServiceAccountResponse
	(*CreateServiceAccountTokenRequest)(nil),           // 3: aruna.api.storage.services.v2.CreateServiceAccountTokenRequest
	(*CreateServiceAccountTokenResponse)(nil),          // 4: aruna.api.storage.services.v2.CreateServiceAccountTokenResponse
	(*GetServiceAccountTokenRequest)(nil),              // 5: aruna.api.storage.services.v2.GetServiceAccountTokenRequest
	(*GetServiceAccountTokenResponse)(nil),             // 6: aruna.api.storage.services.v2.GetServiceAccountTokenResponse
	(*GetServiceAccountTokensRequest)(nil),             // 7: aruna.api.storage.services.v2.GetServiceAccountTokensRequest
	(*GetServiceAccountTokensResponse)(nil),            // 8: aruna.api.storage.services.v2.GetServiceAccountTokensResponse
	(*DeleteServiceAccountTokenRequest)(nil),           // 9: aruna.api.storage.services.v2.DeleteServiceAccountTokenRequest
	(*DeleteServiceAccountTokenResponse)(nil),          // 10: aruna.api.storage.services.v2.DeleteServiceAccountTokenResponse
	(*DeleteServiceAccountTokensRequest)(nil),          // 11: aruna.api.storage.services.v2.DeleteServiceAccountTokensRequest
	(*DeleteServiceAccountTokensResponse)(nil),         // 12: aruna.api.storage.services.v2.DeleteServiceAccountTokensResponse
	(*DeleteServiceAccountRequest)(nil),                // 13: aruna.api.storage.services.v2.DeleteServiceAccountRequest
	(*DeleteServiceAccountResponse)(nil),               // 14: aruna.api.storage.services.v2.DeleteServiceAccountResponse
	(*CreateS3CredentialsSvcAccountRequest)(nil),       // 15: aruna.api.storage.services.v2.CreateS3CredentialsSvcAccountRequest
	(*CreateS3CredentialsSvcAccountResponse)(nil),      // 16: aruna.api.storage.services.v2.CreateS3CredentialsSvcAccountResponse
	(*GetS3CredentialsSvcAccountRequest)(nil),          // 17: aruna.api.storage.services.v2.GetS3CredentialsSvcAccountRequest
	(*GetS3CredentialsSvcAccountResponse)(nil),         // 18: aruna.api.storage.services.v2.GetS3CredentialsSvcAccountResponse
	(*DeleteS3CredentialsSvcAccountRequest)(nil),       // 19: aruna.api.storage.services.v2.DeleteS3CredentialsSvcAccountRequest
	(*DeleteS3CredentialsSvcAccountResponse)(nil),      // 20: aruna.api.storage.services.v2.DeleteS3CredentialsSvcAccountResponse
	(*CreateDataproxyTokenSvcAccountRequest)(nil),      // 21: aruna.api.storage.services.v2.CreateDataproxyTokenSvcAccountRequest
	(*CreateDataproxyTokenSvcAccountResponse)(nil),     // 22: aruna.api.storage.services.v2.CreateDataproxyTokenSvcAccountResponse
	(*AddPubkeySvcAccountRequest)(nil),                 // 23: aruna.api.storage.services.v2.AddPubkeySvcAccountRequest
	(*AddPubkeySvcAccountResponse)(nil),                // 24: aruna.api.storage.services.v2.AddPubkeySvcAccountResponse
	(*AddTrustedEndpointsSvcAccountRequest)(nil),       // 25: aruna.api.storage.services.v2.AddTrustedEndpointsSvcAccountRequest
	(*AddTrustedEndpointsSvcAccountResponse)(nil),      // 26: aruna.api.storage.services.v2.AddTrustedEndpointsSvcAccountResponse
	(*RemoveTrustedEndpointsSvcAccountRequest)(nil),    // 27: aruna.api.storage.services.v2.RemoveTrustedEndpointsSvcAccountRequest
	(*RemoveTrustedEndpointsSvcAccountResponse)(nil),   // 28: aruna.api.storage.services.v2.RemoveTrustedEndpointsSvcAccountResponse
	(*AddDataProxyAttributeSvcAccountRequest)(nil),     // 29: aruna.api.storage.services.v2.AddDataProxyAttributeSvcAccountRequest
	(*AddDataProxyAttributeSvcAccountResponse)(nil),    // 30: aruna.api.storage.services.v2.AddDataProxyAttributeSvcAccountResponse
	(*RemoveDataProxyAttributeSvcAccountRequest)(nil),  // 31: aruna.api.storage.services.v2.RemoveDataProxyAttributeSvcAccountRequest
	(*RemoveDataProxyAttributeSvcAccountResponse)(nil), // 32: aruna.api.storage.services.v2.RemoveDataProxyAttributeSvcAccountResponse
	(v2.PermissionLevel)(0),                            // 33: aruna.api.storage.models.v2.PermissionLevel
	(*v2.Permission)(nil),                              // 34: aruna.api.storage.models.v2.Permission
	(*timestamppb.Timestamp)(nil),                      // 35: google.protobuf.Timestamp
	(*v2.Token)(nil),                                   // 36: aruna.api.storage.models.v2.Token
	(*v2.Context)(nil),                                 // 37: aruna.api.storage.models.v2.Context
	(*v2.DataProxyAttribute)(nil),                      // 38: aruna.api.storage.models.v2.DataProxyAttribute
}
var file_aruna_api_storage_services_v2_service_account_service_proto_depIdxs = []int32{
	33, // 0: aruna.api.storage.services.v2.CreateServiceAccountRequest.permission_level:type_name -> aruna.api.storage.models.v2.PermissionLevel
	34, // 1: aruna.api.storage.services.v2.ServiceAccount.permission:type_name -> aruna.api.storage.models.v2.Permission
	1,  // 2: aruna.api.storage.services.v2.CreateServiceAccountResponse.service_account:type_name -> aruna.api.storage.services.v2.ServiceAccount
	34, // 3: aruna.api.storage.services.v2.CreateServiceAccountTokenRequest.permission:type_name -> aruna.api.storage.models.v2.Permission
	35, // 4: aruna.api.storage.services.v2.CreateServiceAccountTokenRequest.expires_at:type_name -> google.protobuf.Timestamp
	36, // 5: aruna.api.storage.services.v2.CreateServiceAccountTokenResponse.token:type_name -> aruna.api.storage.models.v2.Token
	36, // 6: aruna.api.storage.services.v2.GetServiceAccountTokenResponse.token:type_name -> aruna.api.storage.models.v2.Token
	36, // 7: aruna.api.storage.services.v2.GetServiceAccountTokensResponse.tokens:type_name -> aruna.api.storage.models.v2.Token
	37, // 8: aruna.api.storage.services.v2.CreateDataproxyTokenSvcAccountRequest.context:type_name -> aruna.api.storage.models.v2.Context
	38, // 9: aruna.api.storage.services.v2.AddDataProxyAttributeSvcAccountRequest.attribute:type_name -> aruna.api.storage.models.v2.DataProxyAttribute
	0,  // 10: aruna.api.storage.services.v2.ServiceAccountService.CreateServiceAccount:input_type -> aruna.api.storage.services.v2.CreateServiceAccountRequest
	3,  // 11: aruna.api.storage.services.v2.ServiceAccountService.CreateServiceAccountToken:input_type -> aruna.api.storage.services.v2.CreateServiceAccountTokenRequest
	5,  // 12: aruna.api.storage.services.v2.ServiceAccountService.GetServiceAccountToken:input_type -> aruna.api.storage.services.v2.GetServiceAccountTokenRequest
	7,  // 13: aruna.api.storage.services.v2.ServiceAccountService.GetServiceAccountTokens:input_type -> aruna.api.storage.services.v2.GetServiceAccountTokensRequest
	9,  // 14: aruna.api.storage.services.v2.ServiceAccountService.DeleteServiceAccountToken:input_type -> aruna.api.storage.services.v2.DeleteServiceAccountTokenRequest
	11, // 15: aruna.api.storage.services.v2.ServiceAccountService.DeleteServiceAccountTokens:input_type -> aruna.api.storage.services.v2.DeleteServiceAccountTokensRequest
	13, // 16: aruna.api.storage.services.v2.ServiceAccountService.DeleteServiceAccount:input_type -> aruna.api.storage.services.v2.DeleteServiceAccountRequest
	15, // 17: aruna.api.storage.services.v2.ServiceAccountService.CreateS3CredentialsSvcAccount:input_type -> aruna.api.storage.services.v2.CreateS3CredentialsSvcAccountRequest
	17, // 18: aruna.api.storage.services.v2.ServiceAccountService.GetS3CredentialsSvcAccount:input_type -> aruna.api.storage.services.v2.GetS3CredentialsSvcAccountRequest
	19, // 19: aruna.api.storage.services.v2.ServiceAccountService.DeleteS3CredentialsSvcAccount:input_type -> aruna.api.storage.services.v2.DeleteS3CredentialsSvcAccountRequest
	21, // 20: aruna.api.storage.services.v2.ServiceAccountService.CreateDataproxyTokenSvcAccount:input_type -> aruna.api.storage.services.v2.CreateDataproxyTokenSvcAccountRequest
	23, // 21: aruna.api.storage.services.v2.ServiceAccountService.AddPubkeySvcAccount:input_type -> aruna.api.storage.services.v2.AddPubkeySvcAccountRequest
	25, // 22: aruna.api.storage.services.v2.ServiceAccountService.AddTrustedEndpointsSvcAccount:input_type -> aruna.api.storage.services.v2.AddTrustedEndpointsSvcAccountRequest
	27, // 23: aruna.api.storage.services.v2.ServiceAccountService.RemoveTrustedEndpointsSvcAccount:input_type -> aruna.api.storage.services.v2.RemoveTrustedEndpointsSvcAccountRequest
	29, // 24: aruna.api.storage.services.v2.ServiceAccountService.AddDataProxyAttributeSvcAccount:input_type -> aruna.api.storage.services.v2.AddDataProxyAttributeSvcAccountRequest
	31, // 25: aruna.api.storage.services.v2.ServiceAccountService.RemoveDataProxyAttributeSvcAccount:input_type -> aruna.api.storage.services.v2.RemoveDataProxyAttributeSvcAccountRequest
	2,  // 26: aruna.api.storage.services.v2.ServiceAccountService.CreateServiceAccount:output_type -> aruna.api.storage.services.v2.CreateServiceAccountResponse
	4,  // 27: aruna.api.storage.services.v2.ServiceAccountService.CreateServiceAccountToken:output_type -> aruna.api.storage.services.v2.CreateServiceAccountTokenResponse
	6,  // 28: aruna.api.storage.services.v2.ServiceAccountService.GetServiceAccountToken:output_type -> aruna.api.storage.services.v2.GetServiceAccountTokenResponse
	8,  // 29: aruna.api.storage.services.v2.ServiceAccountService.GetServiceAccountTokens:output_type -> aruna.api.storage.services.v2.GetServiceAccountTokensResponse
	10, // 30: aruna.api.storage.services.v2.ServiceAccountService.DeleteServiceAccountToken:output_type -> aruna.api.storage.services.v2.DeleteServiceAccountTokenResponse
	12, // 31: aruna.api.storage.services.v2.ServiceAccountService.DeleteServiceAccountTokens:output_type -> aruna.api.storage.services.v2.DeleteServiceAccountTokensResponse
	14, // 32: aruna.api.storage.services.v2.ServiceAccountService.DeleteServiceAccount:output_type -> aruna.api.storage.services.v2.DeleteServiceAccountResponse
	16, // 33: aruna.api.storage.services.v2.ServiceAccountService.CreateS3CredentialsSvcAccount:output_type -> aruna.api.storage.services.v2.CreateS3CredentialsSvcAccountResponse
	18, // 34: aruna.api.storage.services.v2.ServiceAccountService.GetS3CredentialsSvcAccount:output_type -> aruna.api.storage.services.v2.GetS3CredentialsSvcAccountResponse
	20, // 35: aruna.api.storage.services.v2.ServiceAccountService.DeleteS3CredentialsSvcAccount:output_type -> aruna.api.storage.services.v2.DeleteS3CredentialsSvcAccountResponse
	22, // 36: aruna.api.storage.services.v2.ServiceAccountService.CreateDataproxyTokenSvcAccount:output_type -> aruna.api.storage.services.v2.CreateDataproxyTokenSvcAccountResponse
	24, // 37: aruna.api.storage.services.v2.ServiceAccountService.AddPubkeySvcAccount:output_type -> aruna.api.storage.services.v2.AddPubkeySvcAccountResponse
	26, // 38: aruna.api.storage.services.v2.ServiceAccountService.AddTrustedEndpointsSvcAccount:output_type -> aruna.api.storage.services.v2.AddTrustedEndpointsSvcAccountResponse
	28, // 39: aruna.api.storage.services.v2.ServiceAccountService.RemoveTrustedEndpointsSvcAccount:output_type -> aruna.api.storage.services.v2.RemoveTrustedEndpointsSvcAccountResponse
	30, // 40: aruna.api.storage.services.v2.ServiceAccountService.AddDataProxyAttributeSvcAccount:output_type -> aruna.api.storage.services.v2.AddDataProxyAttributeSvcAccountResponse
	32, // 41: aruna.api.storage.services.v2.ServiceAccountService.RemoveDataProxyAttributeSvcAccount:output_type -> aruna.api.storage.services.v2.RemoveDataProxyAttributeSvcAccountResponse
	26, // [26:42] is the sub-list for method output_type
	10, // [10:26] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_aruna_api_storage_services_v2_service_account_service_proto_init() }
func file_aruna_api_storage_services_v2_service_account_service_proto_init() {
	if File_aruna_api_storage_services_v2_service_account_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceAccountTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceAccountTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceAccountTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceAccountTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceAccountTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceAccountTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountTokensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountTokensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateS3CredentialsSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateS3CredentialsSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetS3CredentialsSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetS3CredentialsSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteS3CredentialsSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteS3CredentialsSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataproxyTokenSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataproxyTokenSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPubkeySvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPubkeySvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrustedEndpointsSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTrustedEndpointsSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTrustedEndpointsSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTrustedEndpointsSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDataProxyAttributeSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDataProxyAttributeSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDataProxyAttributeSvcAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDataProxyAttributeSvcAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aruna_api_storage_services_v2_service_account_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aruna_api_storage_services_v2_service_account_service_proto_goTypes,
		DependencyIndexes: file_aruna_api_storage_services_v2_service_account_service_proto_depIdxs,
		MessageInfos:      file_aruna_api_storage_services_v2_service_account_service_proto_msgTypes,
	}.Build()
	File_aruna_api_storage_services_v2_service_account_service_proto = out.File
	file_aruna_api_storage_services_v2_service_account_service_proto_rawDesc = nil
	file_aruna_api_storage_services_v2_service_account_service_proto_goTypes = nil
	file_aruna_api_storage_services_v2_service_account_service_proto_depIdxs = nil
}
