// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v2/dataset_service.proto

package servicesv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatasetService_CreateDataset_FullMethodName            = "/aruna.api.storage.services.v2.DatasetService/CreateDataset"
	DatasetService_GetDataset_FullMethodName               = "/aruna.api.storage.services.v2.DatasetService/GetDataset"
	DatasetService_GetDatasets_FullMethodName              = "/aruna.api.storage.services.v2.DatasetService/GetDatasets"
	DatasetService_DeleteDataset_FullMethodName            = "/aruna.api.storage.services.v2.DatasetService/DeleteDataset"
	DatasetService_UpdateDatasetName_FullMethodName        = "/aruna.api.storage.services.v2.DatasetService/UpdateDatasetName"
	DatasetService_UpdateDatasetDescription_FullMethodName = "/aruna.api.storage.services.v2.DatasetService/UpdateDatasetDescription"
	DatasetService_UpdateDatasetKeyValues_FullMethodName   = "/aruna.api.storage.services.v2.DatasetService/UpdateDatasetKeyValues"
	DatasetService_UpdateDatasetDataClass_FullMethodName   = "/aruna.api.storage.services.v2.DatasetService/UpdateDatasetDataClass"
	DatasetService_SnapshotDataset_FullMethodName          = "/aruna.api.storage.services.v2.DatasetService/SnapshotDataset"
)

// DatasetServiceClient is the client API for DatasetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetServiceClient interface {
	// CreateNewDataset
	//
	// Status: BETA
	//
	// creates a new Dataset
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
	// GetDataset
	//
	// Status: BETA
	//
	// Request a specific dataset by ID
	GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error)
	// GetDatasets
	//
	// Status: BETA
	//
	// Queries multiple datasets by ID
	GetDatasets(ctx context.Context, in *GetDatasetsRequest, opts ...grpc.CallOption) (*GetDatasetsResponse, error)
	// DeleteDataset
	//
	// Status: STABLE
	//
	// This request deletes the dataset.
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*DeleteDatasetResponse, error)
	// UpdateDatasetName
	//
	// Status: BETA
	//
	// Updates the dataset name. Caveat! Will rename the "s3 bucket" for data proxies!
	UpdateDatasetName(ctx context.Context, in *UpdateDatasetNameRequest, opts ...grpc.CallOption) (*UpdateDatasetNameResponse, error)
	// UpdateDatasetDescription
	//
	// Status: BETA
	//
	// Updates the dataset description.
	UpdateDatasetDescription(ctx context.Context, in *UpdateDatasetDescriptionRequest, opts ...grpc.CallOption) (*UpdateDatasetDescriptionResponse, error)
	// UpdateDatasetKeyValues
	//
	// Status: BETA
	//
	// Updates the dataset key values.
	UpdateDatasetKeyValues(ctx context.Context, in *UpdateDatasetKeyValuesRequest, opts ...grpc.CallOption) (*UpdateDatasetKeyValuesResponse, error)
	// UpdateDatasetDataClass
	//
	// Status: BETA
	//
	// Updates the dataset name. All (meta) data will be overwritten.
	UpdateDatasetDataClass(ctx context.Context, in *UpdateDatasetDataClassRequest, opts ...grpc.CallOption) (*UpdateDatasetDataClassResponse, error)
	// SnapshotDatasetRequest
	//
	// Status: BETA
	//
	// Archives the full dataset, rendering all downstream relations immutable
	SnapshotDataset(ctx context.Context, in *SnapshotDatasetRequest, opts ...grpc.CallOption) (*SnapshotDatasetResponse, error)
}

type datasetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetServiceClient(cc grpc.ClientConnInterface) DatasetServiceClient {
	return &datasetServiceClient{cc}
}

func (c *datasetServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	out := new(CreateDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetService_CreateDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDataset(ctx context.Context, in *GetDatasetRequest, opts ...grpc.CallOption) (*GetDatasetResponse, error) {
	out := new(GetDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetService_GetDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) GetDatasets(ctx context.Context, in *GetDatasetsRequest, opts ...grpc.CallOption) (*GetDatasetsResponse, error) {
	out := new(GetDatasetsResponse)
	err := c.cc.Invoke(ctx, DatasetService_GetDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*DeleteDatasetResponse, error) {
	out := new(DeleteDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetService_DeleteDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetName(ctx context.Context, in *UpdateDatasetNameRequest, opts ...grpc.CallOption) (*UpdateDatasetNameResponse, error) {
	out := new(UpdateDatasetNameResponse)
	err := c.cc.Invoke(ctx, DatasetService_UpdateDatasetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetDescription(ctx context.Context, in *UpdateDatasetDescriptionRequest, opts ...grpc.CallOption) (*UpdateDatasetDescriptionResponse, error) {
	out := new(UpdateDatasetDescriptionResponse)
	err := c.cc.Invoke(ctx, DatasetService_UpdateDatasetDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetKeyValues(ctx context.Context, in *UpdateDatasetKeyValuesRequest, opts ...grpc.CallOption) (*UpdateDatasetKeyValuesResponse, error) {
	out := new(UpdateDatasetKeyValuesResponse)
	err := c.cc.Invoke(ctx, DatasetService_UpdateDatasetKeyValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) UpdateDatasetDataClass(ctx context.Context, in *UpdateDatasetDataClassRequest, opts ...grpc.CallOption) (*UpdateDatasetDataClassResponse, error) {
	out := new(UpdateDatasetDataClassResponse)
	err := c.cc.Invoke(ctx, DatasetService_UpdateDatasetDataClass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetServiceClient) SnapshotDataset(ctx context.Context, in *SnapshotDatasetRequest, opts ...grpc.CallOption) (*SnapshotDatasetResponse, error) {
	out := new(SnapshotDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetService_SnapshotDataset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetServiceServer is the server API for DatasetService service.
// All implementations should embed UnimplementedDatasetServiceServer
// for forward compatibility
type DatasetServiceServer interface {
	// CreateNewDataset
	//
	// Status: BETA
	//
	// creates a new Dataset
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
	// GetDataset
	//
	// Status: BETA
	//
	// Request a specific dataset by ID
	GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error)
	// GetDatasets
	//
	// Status: BETA
	//
	// Queries multiple datasets by ID
	GetDatasets(context.Context, *GetDatasetsRequest) (*GetDatasetsResponse, error)
	// DeleteDataset
	//
	// Status: STABLE
	//
	// This request deletes the dataset.
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*DeleteDatasetResponse, error)
	// UpdateDatasetName
	//
	// Status: BETA
	//
	// Updates the dataset name. Caveat! Will rename the "s3 bucket" for data proxies!
	UpdateDatasetName(context.Context, *UpdateDatasetNameRequest) (*UpdateDatasetNameResponse, error)
	// UpdateDatasetDescription
	//
	// Status: BETA
	//
	// Updates the dataset description.
	UpdateDatasetDescription(context.Context, *UpdateDatasetDescriptionRequest) (*UpdateDatasetDescriptionResponse, error)
	// UpdateDatasetKeyValues
	//
	// Status: BETA
	//
	// Updates the dataset key values.
	UpdateDatasetKeyValues(context.Context, *UpdateDatasetKeyValuesRequest) (*UpdateDatasetKeyValuesResponse, error)
	// UpdateDatasetDataClass
	//
	// Status: BETA
	//
	// Updates the dataset name. All (meta) data will be overwritten.
	UpdateDatasetDataClass(context.Context, *UpdateDatasetDataClassRequest) (*UpdateDatasetDataClassResponse, error)
	// SnapshotDatasetRequest
	//
	// Status: BETA
	//
	// Archives the full dataset, rendering all downstream relations immutable
	SnapshotDataset(context.Context, *SnapshotDatasetRequest) (*SnapshotDatasetResponse, error)
}

// UnimplementedDatasetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDatasetServiceServer struct {
}

func (UnimplementedDatasetServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatasetServiceServer) GetDataset(context.Context, *GetDatasetRequest) (*GetDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataset not implemented")
}
func (UnimplementedDatasetServiceServer) GetDatasets(context.Context, *GetDatasetsRequest) (*GetDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasets not implemented")
}
func (UnimplementedDatasetServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*DeleteDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDatasetName(context.Context, *UpdateDatasetNameRequest) (*UpdateDatasetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetName not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDatasetDescription(context.Context, *UpdateDatasetDescriptionRequest) (*UpdateDatasetDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetDescription not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDatasetKeyValues(context.Context, *UpdateDatasetKeyValuesRequest) (*UpdateDatasetKeyValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetKeyValues not implemented")
}
func (UnimplementedDatasetServiceServer) UpdateDatasetDataClass(context.Context, *UpdateDatasetDataClassRequest) (*UpdateDatasetDataClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetDataClass not implemented")
}
func (UnimplementedDatasetServiceServer) SnapshotDataset(context.Context, *SnapshotDatasetRequest) (*SnapshotDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotDataset not implemented")
}

// UnsafeDatasetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetServiceServer will
// result in compilation errors.
type UnsafeDatasetServiceServer interface {
	mustEmbedUnimplementedDatasetServiceServer()
}

func RegisterDatasetServiceServer(s grpc.ServiceRegistrar, srv DatasetServiceServer) {
	s.RegisterService(&DatasetService_ServiceDesc, srv)
}

func _DatasetService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_GetDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDataset(ctx, req.(*GetDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_GetDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).GetDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_GetDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).GetDatasets(ctx, req.(*GetDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_DeleteDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UpdateDatasetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetName(ctx, req.(*UpdateDatasetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UpdateDatasetDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetDescription(ctx, req.(*UpdateDatasetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetKeyValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetKeyValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetKeyValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UpdateDatasetKeyValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetKeyValues(ctx, req.(*UpdateDatasetKeyValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_UpdateDatasetDataClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetDataClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).UpdateDatasetDataClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_UpdateDatasetDataClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).UpdateDatasetDataClass(ctx, req.(*UpdateDatasetDataClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetService_SnapshotDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetServiceServer).SnapshotDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetService_SnapshotDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetServiceServer).SnapshotDataset(ctx, req.(*SnapshotDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetService_ServiceDesc is the grpc.ServiceDesc for DatasetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v2.DatasetService",
	HandlerType: (*DatasetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetService_CreateDataset_Handler,
		},
		{
			MethodName: "GetDataset",
			Handler:    _DatasetService_GetDataset_Handler,
		},
		{
			MethodName: "GetDatasets",
			Handler:    _DatasetService_GetDatasets_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetService_DeleteDataset_Handler,
		},
		{
			MethodName: "UpdateDatasetName",
			Handler:    _DatasetService_UpdateDatasetName_Handler,
		},
		{
			MethodName: "UpdateDatasetDescription",
			Handler:    _DatasetService_UpdateDatasetDescription_Handler,
		},
		{
			MethodName: "UpdateDatasetKeyValues",
			Handler:    _DatasetService_UpdateDatasetKeyValues_Handler,
		},
		{
			MethodName: "UpdateDatasetDataClass",
			Handler:    _DatasetService_UpdateDatasetDataClass_Handler,
		},
		{
			MethodName: "SnapshotDataset",
			Handler:    _DatasetService_SnapshotDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v2/dataset_service.proto",
}
