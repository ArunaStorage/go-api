// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v2/service_account_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServiceAccountService_CreateServiceAccount_FullMethodName           = "/aruna.api.storage.services.v2.ServiceAccountService/CreateServiceAccount"
	ServiceAccountService_CreateServiceAccountToken_FullMethodName      = "/aruna.api.storage.services.v2.ServiceAccountService/CreateServiceAccountToken"
	ServiceAccountService_SetServiceAccountPermission_FullMethodName    = "/aruna.api.storage.services.v2.ServiceAccountService/SetServiceAccountPermission"
	ServiceAccountService_GetServiceAccountToken_FullMethodName         = "/aruna.api.storage.services.v2.ServiceAccountService/GetServiceAccountToken"
	ServiceAccountService_GetServiceAccountTokens_FullMethodName        = "/aruna.api.storage.services.v2.ServiceAccountService/GetServiceAccountTokens"
	ServiceAccountService_DeleteServiceAccountToken_FullMethodName      = "/aruna.api.storage.services.v2.ServiceAccountService/DeleteServiceAccountToken"
	ServiceAccountService_DeleteServiceAccountTokens_FullMethodName     = "/aruna.api.storage.services.v2.ServiceAccountService/DeleteServiceAccountTokens"
	ServiceAccountService_DeleteServiceAccount_FullMethodName           = "/aruna.api.storage.services.v2.ServiceAccountService/DeleteServiceAccount"
	ServiceAccountService_GetS3CredentialsSvcAccount_FullMethodName     = "/aruna.api.storage.services.v2.ServiceAccountService/GetS3CredentialsSvcAccount"
	ServiceAccountService_CreateDataproxyTokenSvcAccount_FullMethodName = "/aruna.api.storage.services.v2.ServiceAccountService/CreateDataproxyTokenSvcAccount"
)

// ServiceAccountServiceClient is the client API for ServiceAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAccountServiceClient interface {
	// CreateServiceAccount
	//
	// Status: BETA
	//
	// Creates a service account for a given project
	// If the service account has permissions for the global Admin project
	// it will be a global service account that can interact with any resource
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error)
	// CreateServiceAccountToken
	//
	// Status: BETA
	//
	// Creates a token for a service account
	// Each service account can only have one permission -> The token will have the same permission as the
	// service account
	CreateServiceAccountToken(ctx context.Context, in *CreateServiceAccountTokenRequest, opts ...grpc.CallOption) (*CreateServiceAccountTokenResponse, error)
	// SetServiceAccountPermission
	//
	// Status: BETA
	//
	// Overwrites the project specific permissions for a service account
	SetServiceAccountPermission(ctx context.Context, in *SetServiceAccountPermissionRequest, opts ...grpc.CallOption) (*SetServiceAccountPermissionResponse, error)
	// GetServiceAccountToken
	//
	// Status: BETA
	//
	// This requests the overall information about a specifc service account token (by id)
	// it will not contain the token itself.
	GetServiceAccountToken(ctx context.Context, in *GetServiceAccountTokenRequest, opts ...grpc.CallOption) (*GetServiceAccountTokenResponse, error)
	// GetServiceAccountTokens
	//
	// Status: BETA
	//
	// This requests the overall information about all service account tokens
	// it will not contain the token itself.
	GetServiceAccountTokens(ctx context.Context, in *GetServiceAccountTokensRequest, opts ...grpc.CallOption) (*GetServiceAccountTokensResponse, error)
	// DeleteServiceAccountToken
	//
	// Status: BETA
	//
	// Deletes one service account token by ID
	DeleteServiceAccountToken(ctx context.Context, in *DeleteServiceAccountTokenRequest, opts ...grpc.CallOption) (*DeleteServiceAccountTokenResponse, error)
	// DeleteServiceAccountTokens
	//
	// Status: BETA
	//
	// Deletes all service account tokens
	DeleteServiceAccountTokens(ctx context.Context, in *DeleteServiceAccountTokensRequest, opts ...grpc.CallOption) (*DeleteServiceAccountTokensResponse, error)
	// DeleteServiceAccount
	//
	// Status: BETA
	//
	// Deletes a service account (by id)
	DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*DeleteServiceAccountResponse, error)
	// GetS3Credentials
	//
	// Status: ALPHA
	//
	// Gets s3 credentials for a specific user and data_proxy
	GetS3CredentialsSvcAccount(ctx context.Context, in *GetS3CredentialsSvcAccountRequest, opts ...grpc.CallOption) (*GetS3CredentialsSvcAccountResponse, error)
	// GetDataproxyToken
	//
	// Status: ALPHA
	//
	// Gets token for a specific user and data_proxy
	CreateDataproxyTokenSvcAccount(ctx context.Context, in *CreateDataproxyTokenSvcAccountRequest, opts ...grpc.CallOption) (*CreateDataproxyTokenSvcAccountResponse, error)
}

type serviceAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAccountServiceClient(cc grpc.ClientConnInterface) ServiceAccountServiceClient {
	return &serviceAccountServiceClient{cc}
}

func (c *serviceAccountServiceClient) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*CreateServiceAccountResponse, error) {
	out := new(CreateServiceAccountResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_CreateServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) CreateServiceAccountToken(ctx context.Context, in *CreateServiceAccountTokenRequest, opts ...grpc.CallOption) (*CreateServiceAccountTokenResponse, error) {
	out := new(CreateServiceAccountTokenResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_CreateServiceAccountToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) SetServiceAccountPermission(ctx context.Context, in *SetServiceAccountPermissionRequest, opts ...grpc.CallOption) (*SetServiceAccountPermissionResponse, error) {
	out := new(SetServiceAccountPermissionResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_SetServiceAccountPermission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) GetServiceAccountToken(ctx context.Context, in *GetServiceAccountTokenRequest, opts ...grpc.CallOption) (*GetServiceAccountTokenResponse, error) {
	out := new(GetServiceAccountTokenResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_GetServiceAccountToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) GetServiceAccountTokens(ctx context.Context, in *GetServiceAccountTokensRequest, opts ...grpc.CallOption) (*GetServiceAccountTokensResponse, error) {
	out := new(GetServiceAccountTokensResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_GetServiceAccountTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) DeleteServiceAccountToken(ctx context.Context, in *DeleteServiceAccountTokenRequest, opts ...grpc.CallOption) (*DeleteServiceAccountTokenResponse, error) {
	out := new(DeleteServiceAccountTokenResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_DeleteServiceAccountToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) DeleteServiceAccountTokens(ctx context.Context, in *DeleteServiceAccountTokensRequest, opts ...grpc.CallOption) (*DeleteServiceAccountTokensResponse, error) {
	out := new(DeleteServiceAccountTokensResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_DeleteServiceAccountTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*DeleteServiceAccountResponse, error) {
	out := new(DeleteServiceAccountResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_DeleteServiceAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) GetS3CredentialsSvcAccount(ctx context.Context, in *GetS3CredentialsSvcAccountRequest, opts ...grpc.CallOption) (*GetS3CredentialsSvcAccountResponse, error) {
	out := new(GetS3CredentialsSvcAccountResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_GetS3CredentialsSvcAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceAccountServiceClient) CreateDataproxyTokenSvcAccount(ctx context.Context, in *CreateDataproxyTokenSvcAccountRequest, opts ...grpc.CallOption) (*CreateDataproxyTokenSvcAccountResponse, error) {
	out := new(CreateDataproxyTokenSvcAccountResponse)
	err := c.cc.Invoke(ctx, ServiceAccountService_CreateDataproxyTokenSvcAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAccountServiceServer is the server API for ServiceAccountService service.
// All implementations should embed UnimplementedServiceAccountServiceServer
// for forward compatibility
type ServiceAccountServiceServer interface {
	// CreateServiceAccount
	//
	// Status: BETA
	//
	// Creates a service account for a given project
	// If the service account has permissions for the global Admin project
	// it will be a global service account that can interact with any resource
	CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*CreateServiceAccountResponse, error)
	// CreateServiceAccountToken
	//
	// Status: BETA
	//
	// Creates a token for a service account
	// Each service account can only have one permission -> The token will have the same permission as the
	// service account
	CreateServiceAccountToken(context.Context, *CreateServiceAccountTokenRequest) (*CreateServiceAccountTokenResponse, error)
	// SetServiceAccountPermission
	//
	// Status: BETA
	//
	// Overwrites the project specific permissions for a service account
	SetServiceAccountPermission(context.Context, *SetServiceAccountPermissionRequest) (*SetServiceAccountPermissionResponse, error)
	// GetServiceAccountToken
	//
	// Status: BETA
	//
	// This requests the overall information about a specifc service account token (by id)
	// it will not contain the token itself.
	GetServiceAccountToken(context.Context, *GetServiceAccountTokenRequest) (*GetServiceAccountTokenResponse, error)
	// GetServiceAccountTokens
	//
	// Status: BETA
	//
	// This requests the overall information about all service account tokens
	// it will not contain the token itself.
	GetServiceAccountTokens(context.Context, *GetServiceAccountTokensRequest) (*GetServiceAccountTokensResponse, error)
	// DeleteServiceAccountToken
	//
	// Status: BETA
	//
	// Deletes one service account token by ID
	DeleteServiceAccountToken(context.Context, *DeleteServiceAccountTokenRequest) (*DeleteServiceAccountTokenResponse, error)
	// DeleteServiceAccountTokens
	//
	// Status: BETA
	//
	// Deletes all service account tokens
	DeleteServiceAccountTokens(context.Context, *DeleteServiceAccountTokensRequest) (*DeleteServiceAccountTokensResponse, error)
	// DeleteServiceAccount
	//
	// Status: BETA
	//
	// Deletes a service account (by id)
	DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*DeleteServiceAccountResponse, error)
	// GetS3Credentials
	//
	// Status: ALPHA
	//
	// Gets s3 credentials for a specific user and data_proxy
	GetS3CredentialsSvcAccount(context.Context, *GetS3CredentialsSvcAccountRequest) (*GetS3CredentialsSvcAccountResponse, error)
	// GetDataproxyToken
	//
	// Status: ALPHA
	//
	// Gets token for a specific user and data_proxy
	CreateDataproxyTokenSvcAccount(context.Context, *CreateDataproxyTokenSvcAccountRequest) (*CreateDataproxyTokenSvcAccountResponse, error)
}

// UnimplementedServiceAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedServiceAccountServiceServer struct {
}

func (UnimplementedServiceAccountServiceServer) CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*CreateServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) CreateServiceAccountToken(context.Context, *CreateServiceAccountTokenRequest) (*CreateServiceAccountTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceAccountToken not implemented")
}
func (UnimplementedServiceAccountServiceServer) SetServiceAccountPermission(context.Context, *SetServiceAccountPermissionRequest) (*SetServiceAccountPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServiceAccountPermission not implemented")
}
func (UnimplementedServiceAccountServiceServer) GetServiceAccountToken(context.Context, *GetServiceAccountTokenRequest) (*GetServiceAccountTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccountToken not implemented")
}
func (UnimplementedServiceAccountServiceServer) GetServiceAccountTokens(context.Context, *GetServiceAccountTokensRequest) (*GetServiceAccountTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceAccountTokens not implemented")
}
func (UnimplementedServiceAccountServiceServer) DeleteServiceAccountToken(context.Context, *DeleteServiceAccountTokenRequest) (*DeleteServiceAccountTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccountToken not implemented")
}
func (UnimplementedServiceAccountServiceServer) DeleteServiceAccountTokens(context.Context, *DeleteServiceAccountTokensRequest) (*DeleteServiceAccountTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccountTokens not implemented")
}
func (UnimplementedServiceAccountServiceServer) DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*DeleteServiceAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) GetS3CredentialsSvcAccount(context.Context, *GetS3CredentialsSvcAccountRequest) (*GetS3CredentialsSvcAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS3CredentialsSvcAccount not implemented")
}
func (UnimplementedServiceAccountServiceServer) CreateDataproxyTokenSvcAccount(context.Context, *CreateDataproxyTokenSvcAccountRequest) (*CreateDataproxyTokenSvcAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataproxyTokenSvcAccount not implemented")
}

// UnsafeServiceAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAccountServiceServer will
// result in compilation errors.
type UnsafeServiceAccountServiceServer interface {
	mustEmbedUnimplementedServiceAccountServiceServer()
}

func RegisterServiceAccountServiceServer(s grpc.ServiceRegistrar, srv ServiceAccountServiceServer) {
	s.RegisterService(&ServiceAccountService_ServiceDesc, srv)
}

func _ServiceAccountService_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_CreateServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).CreateServiceAccount(ctx, req.(*CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_CreateServiceAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).CreateServiceAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_CreateServiceAccountToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).CreateServiceAccountToken(ctx, req.(*CreateServiceAccountTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_SetServiceAccountPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceAccountPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).SetServiceAccountPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_SetServiceAccountPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).SetServiceAccountPermission(ctx, req.(*SetServiceAccountPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_GetServiceAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).GetServiceAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_GetServiceAccountToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).GetServiceAccountToken(ctx, req.(*GetServiceAccountTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_GetServiceAccountTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).GetServiceAccountTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_GetServiceAccountTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).GetServiceAccountTokens(ctx, req.(*GetServiceAccountTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_DeleteServiceAccountToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccountToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_DeleteServiceAccountToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccountToken(ctx, req.(*DeleteServiceAccountTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_DeleteServiceAccountTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccountTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_DeleteServiceAccountTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccountTokens(ctx, req.(*DeleteServiceAccountTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_DeleteServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_DeleteServiceAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).DeleteServiceAccount(ctx, req.(*DeleteServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_GetS3CredentialsSvcAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetS3CredentialsSvcAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).GetS3CredentialsSvcAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_GetS3CredentialsSvcAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).GetS3CredentialsSvcAccount(ctx, req.(*GetS3CredentialsSvcAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceAccountService_CreateDataproxyTokenSvcAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataproxyTokenSvcAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAccountServiceServer).CreateDataproxyTokenSvcAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceAccountService_CreateDataproxyTokenSvcAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAccountServiceServer).CreateDataproxyTokenSvcAccount(ctx, req.(*CreateDataproxyTokenSvcAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceAccountService_ServiceDesc is the grpc.ServiceDesc for ServiceAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v2.ServiceAccountService",
	HandlerType: (*ServiceAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceAccount",
			Handler:    _ServiceAccountService_CreateServiceAccount_Handler,
		},
		{
			MethodName: "CreateServiceAccountToken",
			Handler:    _ServiceAccountService_CreateServiceAccountToken_Handler,
		},
		{
			MethodName: "SetServiceAccountPermission",
			Handler:    _ServiceAccountService_SetServiceAccountPermission_Handler,
		},
		{
			MethodName: "GetServiceAccountToken",
			Handler:    _ServiceAccountService_GetServiceAccountToken_Handler,
		},
		{
			MethodName: "GetServiceAccountTokens",
			Handler:    _ServiceAccountService_GetServiceAccountTokens_Handler,
		},
		{
			MethodName: "DeleteServiceAccountToken",
			Handler:    _ServiceAccountService_DeleteServiceAccountToken_Handler,
		},
		{
			MethodName: "DeleteServiceAccountTokens",
			Handler:    _ServiceAccountService_DeleteServiceAccountTokens_Handler,
		},
		{
			MethodName: "DeleteServiceAccount",
			Handler:    _ServiceAccountService_DeleteServiceAccount_Handler,
		},
		{
			MethodName: "GetS3CredentialsSvcAccount",
			Handler:    _ServiceAccountService_GetS3CredentialsSvcAccount_Handler,
		},
		{
			MethodName: "CreateDataproxyTokenSvcAccount",
			Handler:    _ServiceAccountService_CreateDataproxyTokenSvcAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v2/service_account_service.proto",
}
