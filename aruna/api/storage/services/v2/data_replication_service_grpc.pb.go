// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v2/data_replication_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataReplicationService_ReplicateProjectData_FullMethodName    = "/aruna.api.storage.services.v2.DataReplicationService/ReplicateProjectData"
	DataReplicationService_PartialReplicateData_FullMethodName    = "/aruna.api.storage.services.v2.DataReplicationService/PartialReplicateData"
	DataReplicationService_UpdateReplicationStatus_FullMethodName = "/aruna.api.storage.services.v2.DataReplicationService/UpdateReplicationStatus"
	DataReplicationService_GetReplicationStatus_FullMethodName    = "/aruna.api.storage.services.v2.DataReplicationService/GetReplicationStatus"
	DataReplicationService_DeleteReplication_FullMethodName       = "/aruna.api.storage.services.v2.DataReplicationService/DeleteReplication"
)

// DataReplicationServiceClient is the client API for DataReplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataReplicationServiceClient interface {
	// ReplicateProjectData
	//
	// Status: ALPHA
	//
	// Replicates the (full) project data from one endpoint to another
	ReplicateProjectData(ctx context.Context, in *ReplicateProjectDataRequest, opts ...grpc.CallOption) (*ReplicateProjectDataResponse, error)
	// PartialReplicateData
	//
	// Status: ALPHA
	//
	// Partial replicate data between endpoints
	PartialReplicateData(ctx context.Context, in *PartialReplicateDataRequest, opts ...grpc.CallOption) (*PartialReplicateDataResponse, error)
	// UpdateReplicationStatus
	//
	// Status: ALPHA
	//
	// Update the replication status of a project
	UpdateReplicationStatus(ctx context.Context, in *UpdateReplicationStatusRequest, opts ...grpc.CallOption) (*UpdateReplicationStatusResponse, error)
	// GetReplicationStatus
	//
	// Status: ALPHA
	//
	// Get the replication status of a project
	GetReplicationStatus(ctx context.Context, in *GetReplicationStatusRequest, opts ...grpc.CallOption) (*GetReplicationStatusResponse, error)
	// DeleteReplication
	//
	// Status: ALPHA
	//
	// Delete the replication status of a project
	DeleteReplication(ctx context.Context, in *DeleteReplicationRequest, opts ...grpc.CallOption) (*DeleteReplicationResponse, error)
}

type dataReplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataReplicationServiceClient(cc grpc.ClientConnInterface) DataReplicationServiceClient {
	return &dataReplicationServiceClient{cc}
}

func (c *dataReplicationServiceClient) ReplicateProjectData(ctx context.Context, in *ReplicateProjectDataRequest, opts ...grpc.CallOption) (*ReplicateProjectDataResponse, error) {
	out := new(ReplicateProjectDataResponse)
	err := c.cc.Invoke(ctx, DataReplicationService_ReplicateProjectData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReplicationServiceClient) PartialReplicateData(ctx context.Context, in *PartialReplicateDataRequest, opts ...grpc.CallOption) (*PartialReplicateDataResponse, error) {
	out := new(PartialReplicateDataResponse)
	err := c.cc.Invoke(ctx, DataReplicationService_PartialReplicateData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReplicationServiceClient) UpdateReplicationStatus(ctx context.Context, in *UpdateReplicationStatusRequest, opts ...grpc.CallOption) (*UpdateReplicationStatusResponse, error) {
	out := new(UpdateReplicationStatusResponse)
	err := c.cc.Invoke(ctx, DataReplicationService_UpdateReplicationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReplicationServiceClient) GetReplicationStatus(ctx context.Context, in *GetReplicationStatusRequest, opts ...grpc.CallOption) (*GetReplicationStatusResponse, error) {
	out := new(GetReplicationStatusResponse)
	err := c.cc.Invoke(ctx, DataReplicationService_GetReplicationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataReplicationServiceClient) DeleteReplication(ctx context.Context, in *DeleteReplicationRequest, opts ...grpc.CallOption) (*DeleteReplicationResponse, error) {
	out := new(DeleteReplicationResponse)
	err := c.cc.Invoke(ctx, DataReplicationService_DeleteReplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataReplicationServiceServer is the server API for DataReplicationService service.
// All implementations should embed UnimplementedDataReplicationServiceServer
// for forward compatibility
type DataReplicationServiceServer interface {
	// ReplicateProjectData
	//
	// Status: ALPHA
	//
	// Replicates the (full) project data from one endpoint to another
	ReplicateProjectData(context.Context, *ReplicateProjectDataRequest) (*ReplicateProjectDataResponse, error)
	// PartialReplicateData
	//
	// Status: ALPHA
	//
	// Partial replicate data between endpoints
	PartialReplicateData(context.Context, *PartialReplicateDataRequest) (*PartialReplicateDataResponse, error)
	// UpdateReplicationStatus
	//
	// Status: ALPHA
	//
	// Update the replication status of a project
	UpdateReplicationStatus(context.Context, *UpdateReplicationStatusRequest) (*UpdateReplicationStatusResponse, error)
	// GetReplicationStatus
	//
	// Status: ALPHA
	//
	// Get the replication status of a project
	GetReplicationStatus(context.Context, *GetReplicationStatusRequest) (*GetReplicationStatusResponse, error)
	// DeleteReplication
	//
	// Status: ALPHA
	//
	// Delete the replication status of a project
	DeleteReplication(context.Context, *DeleteReplicationRequest) (*DeleteReplicationResponse, error)
}

// UnimplementedDataReplicationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataReplicationServiceServer struct {
}

func (UnimplementedDataReplicationServiceServer) ReplicateProjectData(context.Context, *ReplicateProjectDataRequest) (*ReplicateProjectDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateProjectData not implemented")
}
func (UnimplementedDataReplicationServiceServer) PartialReplicateData(context.Context, *PartialReplicateDataRequest) (*PartialReplicateDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialReplicateData not implemented")
}
func (UnimplementedDataReplicationServiceServer) UpdateReplicationStatus(context.Context, *UpdateReplicationStatusRequest) (*UpdateReplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplicationStatus not implemented")
}
func (UnimplementedDataReplicationServiceServer) GetReplicationStatus(context.Context, *GetReplicationStatusRequest) (*GetReplicationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicationStatus not implemented")
}
func (UnimplementedDataReplicationServiceServer) DeleteReplication(context.Context, *DeleteReplicationRequest) (*DeleteReplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplication not implemented")
}

// UnsafeDataReplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataReplicationServiceServer will
// result in compilation errors.
type UnsafeDataReplicationServiceServer interface {
	mustEmbedUnimplementedDataReplicationServiceServer()
}

func RegisterDataReplicationServiceServer(s grpc.ServiceRegistrar, srv DataReplicationServiceServer) {
	s.RegisterService(&DataReplicationService_ServiceDesc, srv)
}

func _DataReplicationService_ReplicateProjectData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateProjectDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReplicationServiceServer).ReplicateProjectData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataReplicationService_ReplicateProjectData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReplicationServiceServer).ReplicateProjectData(ctx, req.(*ReplicateProjectDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReplicationService_PartialReplicateData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartialReplicateDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReplicationServiceServer).PartialReplicateData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataReplicationService_PartialReplicateData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReplicationServiceServer).PartialReplicateData(ctx, req.(*PartialReplicateDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReplicationService_UpdateReplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReplicationServiceServer).UpdateReplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataReplicationService_UpdateReplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReplicationServiceServer).UpdateReplicationStatus(ctx, req.(*UpdateReplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReplicationService_GetReplicationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReplicationServiceServer).GetReplicationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataReplicationService_GetReplicationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReplicationServiceServer).GetReplicationStatus(ctx, req.(*GetReplicationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataReplicationService_DeleteReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataReplicationServiceServer).DeleteReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataReplicationService_DeleteReplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataReplicationServiceServer).DeleteReplication(ctx, req.(*DeleteReplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataReplicationService_ServiceDesc is the grpc.ServiceDesc for DataReplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataReplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v2.DataReplicationService",
	HandlerType: (*DataReplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplicateProjectData",
			Handler:    _DataReplicationService_ReplicateProjectData_Handler,
		},
		{
			MethodName: "PartialReplicateData",
			Handler:    _DataReplicationService_PartialReplicateData_Handler,
		},
		{
			MethodName: "UpdateReplicationStatus",
			Handler:    _DataReplicationService_UpdateReplicationStatus_Handler,
		},
		{
			MethodName: "GetReplicationStatus",
			Handler:    _DataReplicationService_GetReplicationStatus_Handler,
		},
		{
			MethodName: "DeleteReplication",
			Handler:    _DataReplicationService_DeleteReplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v2/data_replication_service.proto",
}
