// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v2/user_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_RegisterUser_FullMethodName                     = "/aruna.api.storage.services.v2.UserService/RegisterUser"
	UserService_DeactivateUser_FullMethodName                   = "/aruna.api.storage.services.v2.UserService/DeactivateUser"
	UserService_ActivateUser_FullMethodName                     = "/aruna.api.storage.services.v2.UserService/ActivateUser"
	UserService_CreateAPIToken_FullMethodName                   = "/aruna.api.storage.services.v2.UserService/CreateAPIToken"
	UserService_GetAPIToken_FullMethodName                      = "/aruna.api.storage.services.v2.UserService/GetAPIToken"
	UserService_GetAPITokens_FullMethodName                     = "/aruna.api.storage.services.v2.UserService/GetAPITokens"
	UserService_DeleteAPIToken_FullMethodName                   = "/aruna.api.storage.services.v2.UserService/DeleteAPIToken"
	UserService_DeleteAPITokens_FullMethodName                  = "/aruna.api.storage.services.v2.UserService/DeleteAPITokens"
	UserService_GetUser_FullMethodName                          = "/aruna.api.storage.services.v2.UserService/GetUser"
	UserService_GetUserRedacted_FullMethodName                  = "/aruna.api.storage.services.v2.UserService/GetUserRedacted"
	UserService_UpdateUserDisplayName_FullMethodName            = "/aruna.api.storage.services.v2.UserService/UpdateUserDisplayName"
	UserService_UpdateUserEmail_FullMethodName                  = "/aruna.api.storage.services.v2.UserService/UpdateUserEmail"
	UserService_GetNotActivatedUsers_FullMethodName             = "/aruna.api.storage.services.v2.UserService/GetNotActivatedUsers"
	UserService_GetAllUsers_FullMethodName                      = "/aruna.api.storage.services.v2.UserService/GetAllUsers"
	UserService_CreateS3CredentialsUserToken_FullMethodName     = "/aruna.api.storage.services.v2.UserService/CreateS3CredentialsUserToken"
	UserService_GetS3CredentialsUserToken_FullMethodName        = "/aruna.api.storage.services.v2.UserService/GetS3CredentialsUserToken"
	UserService_DeleteS3CredentialsUserToken_FullMethodName     = "/aruna.api.storage.services.v2.UserService/DeleteS3CredentialsUserToken"
	UserService_GetDataproxyTokenUser_FullMethodName            = "/aruna.api.storage.services.v2.UserService/GetDataproxyTokenUser"
	UserService_GetPersonalNotifications_FullMethodName         = "/aruna.api.storage.services.v2.UserService/GetPersonalNotifications"
	UserService_AcknowledgePersonalNotifications_FullMethodName = "/aruna.api.storage.services.v2.UserService/AcknowledgePersonalNotifications"
	UserService_AddOidcProvider_FullMethodName                  = "/aruna.api.storage.services.v2.UserService/AddOidcProvider"
	UserService_RemoveOidcProvider_FullMethodName               = "/aruna.api.storage.services.v2.UserService/RemoveOidcProvider"
	UserService_AddPubkeyUser_FullMethodName                    = "/aruna.api.storage.services.v2.UserService/AddPubkeyUser"
	UserService_AddTrustedEndpointsUser_FullMethodName          = "/aruna.api.storage.services.v2.UserService/AddTrustedEndpointsUser"
	UserService_RemoveTrustedEndpointsUser_FullMethodName       = "/aruna.api.storage.services.v2.UserService/RemoveTrustedEndpointsUser"
	UserService_AddDataProxyAttributeUser_FullMethodName        = "/aruna.api.storage.services.v2.UserService/AddDataProxyAttributeUser"
	UserService_RemoveDataProxyAttributeUser_FullMethodName     = "/aruna.api.storage.services.v2.UserService/RemoveDataProxyAttributeUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// RegisterUser
	//
	// Status: BETA
	//
	// This request should be called when a new user logs in for the first time
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// DeActivateUser
	//
	// Status: BETA
	//
	// This deactivates a specific user (Admin request)
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error)
	// ActivateUser
	//
	// Status: BETA
	//
	// This activates a specific user (Admin request)
	ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error)
	// CreateAPIToken
	//
	// Status: BETA
	//
	// Creates an API token to authenticate
	CreateAPIToken(ctx context.Context, in *CreateAPITokenRequest, opts ...grpc.CallOption) (*CreateAPITokenResponse, error)
	// GetAPIToken
	//
	// Status: BETA
	//
	// Returns one API token by id
	GetAPIToken(ctx context.Context, in *GetAPITokenRequest, opts ...grpc.CallOption) (*GetAPITokenResponse, error)
	// GetAPITokens
	//
	// Status: STABLE
	//
	// Returns a list of API tokens for a specific user
	GetAPITokens(ctx context.Context, in *GetAPITokensRequest, opts ...grpc.CallOption) (*GetAPITokensResponse, error)
	// DeleteAPIToken
	//
	// Status: STABLE
	//
	// Deletes the specified API Token
	DeleteAPIToken(ctx context.Context, in *DeleteAPITokenRequest, opts ...grpc.CallOption) (*DeleteAPITokenResponse, error)
	// DeleteAPITokens
	//
	// Status: BETA
	//
	// Deletes the specified API Token
	DeleteAPITokens(ctx context.Context, in *DeleteAPITokensRequest, opts ...grpc.CallOption) (*DeleteAPITokensResponse, error)
	// GetUserRequest
	//
	// Status: STABLE
	//
	// This is a request that returns the user information of the
	// current user or if invoked by an admin from another user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// GetUserRequestRedacted
	//
	// Status: STABLE
	//
	// This is a request that returns the user information of the
	// current user or if invoked by an admin from another user
	// Redacts personal information like name or email
	GetUserRedacted(ctx context.Context, in *GetUserRedactedRequest, opts ...grpc.CallOption) (*GetUserRedactedResponse, error)
	// UpdateUserDisplayName
	//
	// Status: STABLE
	//
	// Updates the Displayname for the user (Personal only)
	UpdateUserDisplayName(ctx context.Context, in *UpdateUserDisplayNameRequest, opts ...grpc.CallOption) (*UpdateUserDisplayNameResponse, error)
	// UpdateUserDisplayName
	//
	// Status: ALPHA
	//
	// Updates the email for the user (Personal only)
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error)
	// GetNotActivatedUsers
	//
	// Status: STABLE
	//
	// Get all not activated users (Admin only)
	GetNotActivatedUsers(ctx context.Context, in *GetNotActivatedUsersRequest, opts ...grpc.CallOption) (*GetNotActivatedUsersResponse, error)
	// GetAllUsers
	//
	// Status: ALPHA
	//
	// Get all users including permissions (Admin only)
	GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error)
	// CreateS3CredentialsUserToken
	//
	// Status: ALPHA
	//
	// Creates or updates S3 credentials for a specific user and data_proxy
	CreateS3CredentialsUserToken(ctx context.Context, in *CreateS3CredentialsUserTokenRequest, opts ...grpc.CallOption) (*CreateS3CredentialsUserTokenResponse, error)
	// GetS3CredentialsUserToken
	//
	// Status: ALPHA
	//
	// Gets S3 credentials for a specific token and data_proxy
	GetS3CredentialsUserToken(ctx context.Context, in *GetS3CredentialsUserTokenRequest, opts ...grpc.CallOption) (*GetS3CredentialsUserTokenResponse, error)
	// DeleteS3CredentialsUserToken
	//
	// Status: ALPHA
	//
	// Revokes existing S3 credentials for a specific user and data_proxy
	DeleteS3CredentialsUserToken(ctx context.Context, in *DeleteS3CredentialsUserTokenRequest, opts ...grpc.CallOption) (*DeleteS3CredentialsUserResponse, error)
	// GetDataproxyToken
	//
	// Status: ALPHA
	//
	// Gets token for a specific user and data_proxy
	GetDataproxyTokenUser(ctx context.Context, in *GetDataproxyTokenUserRequest, opts ...grpc.CallOption) (*GetDataproxyTokenUserResponse, error)
	// GetPersonalNotifications
	//
	// Status: ALPHA
	//
	// Fetches personal notifications
	GetPersonalNotifications(ctx context.Context, in *GetPersonalNotificationsRequest, opts ...grpc.CallOption) (*GetPersonalNotificationsResponse, error)
	// AcknowledgePersonalNotifications
	//
	// Status: ALPHA
	//
	// Acknowledges personal notifications
	AcknowledgePersonalNotifications(ctx context.Context, in *AcknowledgePersonalNotificationsRequest, opts ...grpc.CallOption) (*AcknowledgePersonalNotificationsResponse, error)
	// AddOidcProvider
	//
	// Status: BETA
	//
	// Add alternative oidc login method for user
	AddOidcProvider(ctx context.Context, in *AddOidcProviderRequest, opts ...grpc.CallOption) (*AddOidcProviderResponse, error)
	// RemoveOidcProvider
	//
	// Status: BETA
	//
	// Remove alternative oidc login method from user
	// (Only works if user has more than one oidc provider)
	RemoveOidcProvider(ctx context.Context, in *RemoveOidcProviderRequest, opts ...grpc.CallOption) (*RemoveOidcProviderResponse, error)
	// AddPubkeyUser
	//
	// Status: ALPHA
	//
	// Adds an ED25519 public key for the user
	AddPubkeyUser(ctx context.Context, in *AddPubkeyUserRequest, opts ...grpc.CallOption) (*AddPubkeyUserResponse, error)
	// AddTrustedEndpointsUser
	//
	// Status: ALPHA
	//
	// Adds an endpoint to the trusted endpoints list of the user
	AddTrustedEndpointsUser(ctx context.Context, in *AddTrustedEndpointsUserRequest, opts ...grpc.CallOption) (*AddTrustedEndpointsUserResponse, error)
	// RemoveTrustedEndpointsUser
	//
	// Status: ALPHA
	//
	// Removes an endpoint from the trusted endpoints list of the user
	RemoveTrustedEndpointsUser(ctx context.Context, in *RemoveTrustedEndpointsUserRequest, opts ...grpc.CallOption) (*RemoveTrustedEndpointsUserResponse, error)
	// AddDataProxyAttributeUser
	//
	// Status: ALPHA
	//
	// Adds an data proxy specific attribute to the user
	AddDataProxyAttributeUser(ctx context.Context, in *AddDataProxyAttributeUserRequest, opts ...grpc.CallOption) (*AddDataProxyAttributeUserResponse, error)
	// RemoveDataProxyAttributeUser
	//
	// Status: ALPHA
	//
	// Removes an data proxy specific attribute from the user
	RemoveDataProxyAttributeUser(ctx context.Context, in *RemoveDataProxyAttributeUserRequest, opts ...grpc.CallOption) (*RemoveDataProxyAttributeUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...grpc.CallOption) (*DeactivateUserResponse, error) {
	out := new(DeactivateUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeactivateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ActivateUser(ctx context.Context, in *ActivateUserRequest, opts ...grpc.CallOption) (*ActivateUserResponse, error) {
	out := new(ActivateUserResponse)
	err := c.cc.Invoke(ctx, UserService_ActivateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateAPIToken(ctx context.Context, in *CreateAPITokenRequest, opts ...grpc.CallOption) (*CreateAPITokenResponse, error) {
	out := new(CreateAPITokenResponse)
	err := c.cc.Invoke(ctx, UserService_CreateAPIToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAPIToken(ctx context.Context, in *GetAPITokenRequest, opts ...grpc.CallOption) (*GetAPITokenResponse, error) {
	out := new(GetAPITokenResponse)
	err := c.cc.Invoke(ctx, UserService_GetAPIToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAPITokens(ctx context.Context, in *GetAPITokensRequest, opts ...grpc.CallOption) (*GetAPITokensResponse, error) {
	out := new(GetAPITokensResponse)
	err := c.cc.Invoke(ctx, UserService_GetAPITokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAPIToken(ctx context.Context, in *DeleteAPITokenRequest, opts ...grpc.CallOption) (*DeleteAPITokenResponse, error) {
	out := new(DeleteAPITokenResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteAPIToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteAPITokens(ctx context.Context, in *DeleteAPITokensRequest, opts ...grpc.CallOption) (*DeleteAPITokensResponse, error) {
	out := new(DeleteAPITokensResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteAPITokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserRedacted(ctx context.Context, in *GetUserRedactedRequest, opts ...grpc.CallOption) (*GetUserRedactedResponse, error) {
	out := new(GetUserRedactedResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserRedacted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserDisplayName(ctx context.Context, in *UpdateUserDisplayNameRequest, opts ...grpc.CallOption) (*UpdateUserDisplayNameResponse, error) {
	out := new(UpdateUserDisplayNameResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserDisplayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...grpc.CallOption) (*UpdateUserEmailResponse, error) {
	out := new(UpdateUserEmailResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetNotActivatedUsers(ctx context.Context, in *GetNotActivatedUsersRequest, opts ...grpc.CallOption) (*GetNotActivatedUsersResponse, error) {
	out := new(GetNotActivatedUsersResponse)
	err := c.cc.Invoke(ctx, UserService_GetNotActivatedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsers(ctx context.Context, in *GetAllUsersRequest, opts ...grpc.CallOption) (*GetAllUsersResponse, error) {
	out := new(GetAllUsersResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateS3CredentialsUserToken(ctx context.Context, in *CreateS3CredentialsUserTokenRequest, opts ...grpc.CallOption) (*CreateS3CredentialsUserTokenResponse, error) {
	out := new(CreateS3CredentialsUserTokenResponse)
	err := c.cc.Invoke(ctx, UserService_CreateS3CredentialsUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetS3CredentialsUserToken(ctx context.Context, in *GetS3CredentialsUserTokenRequest, opts ...grpc.CallOption) (*GetS3CredentialsUserTokenResponse, error) {
	out := new(GetS3CredentialsUserTokenResponse)
	err := c.cc.Invoke(ctx, UserService_GetS3CredentialsUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteS3CredentialsUserToken(ctx context.Context, in *DeleteS3CredentialsUserTokenRequest, opts ...grpc.CallOption) (*DeleteS3CredentialsUserResponse, error) {
	out := new(DeleteS3CredentialsUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteS3CredentialsUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDataproxyTokenUser(ctx context.Context, in *GetDataproxyTokenUserRequest, opts ...grpc.CallOption) (*GetDataproxyTokenUserResponse, error) {
	out := new(GetDataproxyTokenUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetDataproxyTokenUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPersonalNotifications(ctx context.Context, in *GetPersonalNotificationsRequest, opts ...grpc.CallOption) (*GetPersonalNotificationsResponse, error) {
	out := new(GetPersonalNotificationsResponse)
	err := c.cc.Invoke(ctx, UserService_GetPersonalNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AcknowledgePersonalNotifications(ctx context.Context, in *AcknowledgePersonalNotificationsRequest, opts ...grpc.CallOption) (*AcknowledgePersonalNotificationsResponse, error) {
	out := new(AcknowledgePersonalNotificationsResponse)
	err := c.cc.Invoke(ctx, UserService_AcknowledgePersonalNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddOidcProvider(ctx context.Context, in *AddOidcProviderRequest, opts ...grpc.CallOption) (*AddOidcProviderResponse, error) {
	out := new(AddOidcProviderResponse)
	err := c.cc.Invoke(ctx, UserService_AddOidcProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveOidcProvider(ctx context.Context, in *RemoveOidcProviderRequest, opts ...grpc.CallOption) (*RemoveOidcProviderResponse, error) {
	out := new(RemoveOidcProviderResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveOidcProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddPubkeyUser(ctx context.Context, in *AddPubkeyUserRequest, opts ...grpc.CallOption) (*AddPubkeyUserResponse, error) {
	out := new(AddPubkeyUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddPubkeyUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddTrustedEndpointsUser(ctx context.Context, in *AddTrustedEndpointsUserRequest, opts ...grpc.CallOption) (*AddTrustedEndpointsUserResponse, error) {
	out := new(AddTrustedEndpointsUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddTrustedEndpointsUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveTrustedEndpointsUser(ctx context.Context, in *RemoveTrustedEndpointsUserRequest, opts ...grpc.CallOption) (*RemoveTrustedEndpointsUserResponse, error) {
	out := new(RemoveTrustedEndpointsUserResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveTrustedEndpointsUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddDataProxyAttributeUser(ctx context.Context, in *AddDataProxyAttributeUserRequest, opts ...grpc.CallOption) (*AddDataProxyAttributeUserResponse, error) {
	out := new(AddDataProxyAttributeUserResponse)
	err := c.cc.Invoke(ctx, UserService_AddDataProxyAttributeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveDataProxyAttributeUser(ctx context.Context, in *RemoveDataProxyAttributeUserRequest, opts ...grpc.CallOption) (*RemoveDataProxyAttributeUserResponse, error) {
	out := new(RemoveDataProxyAttributeUserResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveDataProxyAttributeUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// RegisterUser
	//
	// Status: BETA
	//
	// This request should be called when a new user logs in for the first time
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// DeActivateUser
	//
	// Status: BETA
	//
	// This deactivates a specific user (Admin request)
	DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error)
	// ActivateUser
	//
	// Status: BETA
	//
	// This activates a specific user (Admin request)
	ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error)
	// CreateAPIToken
	//
	// Status: BETA
	//
	// Creates an API token to authenticate
	CreateAPIToken(context.Context, *CreateAPITokenRequest) (*CreateAPITokenResponse, error)
	// GetAPIToken
	//
	// Status: BETA
	//
	// Returns one API token by id
	GetAPIToken(context.Context, *GetAPITokenRequest) (*GetAPITokenResponse, error)
	// GetAPITokens
	//
	// Status: STABLE
	//
	// Returns a list of API tokens for a specific user
	GetAPITokens(context.Context, *GetAPITokensRequest) (*GetAPITokensResponse, error)
	// DeleteAPIToken
	//
	// Status: STABLE
	//
	// Deletes the specified API Token
	DeleteAPIToken(context.Context, *DeleteAPITokenRequest) (*DeleteAPITokenResponse, error)
	// DeleteAPITokens
	//
	// Status: BETA
	//
	// Deletes the specified API Token
	DeleteAPITokens(context.Context, *DeleteAPITokensRequest) (*DeleteAPITokensResponse, error)
	// GetUserRequest
	//
	// Status: STABLE
	//
	// This is a request that returns the user information of the
	// current user or if invoked by an admin from another user
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// GetUserRequestRedacted
	//
	// Status: STABLE
	//
	// This is a request that returns the user information of the
	// current user or if invoked by an admin from another user
	// Redacts personal information like name or email
	GetUserRedacted(context.Context, *GetUserRedactedRequest) (*GetUserRedactedResponse, error)
	// UpdateUserDisplayName
	//
	// Status: STABLE
	//
	// Updates the Displayname for the user (Personal only)
	UpdateUserDisplayName(context.Context, *UpdateUserDisplayNameRequest) (*UpdateUserDisplayNameResponse, error)
	// UpdateUserDisplayName
	//
	// Status: ALPHA
	//
	// Updates the email for the user (Personal only)
	UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error)
	// GetNotActivatedUsers
	//
	// Status: STABLE
	//
	// Get all not activated users (Admin only)
	GetNotActivatedUsers(context.Context, *GetNotActivatedUsersRequest) (*GetNotActivatedUsersResponse, error)
	// GetAllUsers
	//
	// Status: ALPHA
	//
	// Get all users including permissions (Admin only)
	GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error)
	// CreateS3CredentialsUserToken
	//
	// Status: ALPHA
	//
	// Creates or updates S3 credentials for a specific user and data_proxy
	CreateS3CredentialsUserToken(context.Context, *CreateS3CredentialsUserTokenRequest) (*CreateS3CredentialsUserTokenResponse, error)
	// GetS3CredentialsUserToken
	//
	// Status: ALPHA
	//
	// Gets S3 credentials for a specific token and data_proxy
	GetS3CredentialsUserToken(context.Context, *GetS3CredentialsUserTokenRequest) (*GetS3CredentialsUserTokenResponse, error)
	// DeleteS3CredentialsUserToken
	//
	// Status: ALPHA
	//
	// Revokes existing S3 credentials for a specific user and data_proxy
	DeleteS3CredentialsUserToken(context.Context, *DeleteS3CredentialsUserTokenRequest) (*DeleteS3CredentialsUserResponse, error)
	// GetDataproxyToken
	//
	// Status: ALPHA
	//
	// Gets token for a specific user and data_proxy
	GetDataproxyTokenUser(context.Context, *GetDataproxyTokenUserRequest) (*GetDataproxyTokenUserResponse, error)
	// GetPersonalNotifications
	//
	// Status: ALPHA
	//
	// Fetches personal notifications
	GetPersonalNotifications(context.Context, *GetPersonalNotificationsRequest) (*GetPersonalNotificationsResponse, error)
	// AcknowledgePersonalNotifications
	//
	// Status: ALPHA
	//
	// Acknowledges personal notifications
	AcknowledgePersonalNotifications(context.Context, *AcknowledgePersonalNotificationsRequest) (*AcknowledgePersonalNotificationsResponse, error)
	// AddOidcProvider
	//
	// Status: BETA
	//
	// Add alternative oidc login method for user
	AddOidcProvider(context.Context, *AddOidcProviderRequest) (*AddOidcProviderResponse, error)
	// RemoveOidcProvider
	//
	// Status: BETA
	//
	// Remove alternative oidc login method from user
	// (Only works if user has more than one oidc provider)
	RemoveOidcProvider(context.Context, *RemoveOidcProviderRequest) (*RemoveOidcProviderResponse, error)
	// AddPubkeyUser
	//
	// Status: ALPHA
	//
	// Adds an ED25519 public key for the user
	AddPubkeyUser(context.Context, *AddPubkeyUserRequest) (*AddPubkeyUserResponse, error)
	// AddTrustedEndpointsUser
	//
	// Status: ALPHA
	//
	// Adds an endpoint to the trusted endpoints list of the user
	AddTrustedEndpointsUser(context.Context, *AddTrustedEndpointsUserRequest) (*AddTrustedEndpointsUserResponse, error)
	// RemoveTrustedEndpointsUser
	//
	// Status: ALPHA
	//
	// Removes an endpoint from the trusted endpoints list of the user
	RemoveTrustedEndpointsUser(context.Context, *RemoveTrustedEndpointsUserRequest) (*RemoveTrustedEndpointsUserResponse, error)
	// AddDataProxyAttributeUser
	//
	// Status: ALPHA
	//
	// Adds an data proxy specific attribute to the user
	AddDataProxyAttributeUser(context.Context, *AddDataProxyAttributeUserRequest) (*AddDataProxyAttributeUserResponse, error)
	// RemoveDataProxyAttributeUser
	//
	// Status: ALPHA
	//
	// Removes an data proxy specific attribute from the user
	RemoveDataProxyAttributeUser(context.Context, *RemoveDataProxyAttributeUserRequest) (*RemoveDataProxyAttributeUserResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserServiceServer) DeactivateUser(context.Context, *DeactivateUserRequest) (*DeactivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateUser not implemented")
}
func (UnimplementedUserServiceServer) ActivateUser(context.Context, *ActivateUserRequest) (*ActivateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateUser not implemented")
}
func (UnimplementedUserServiceServer) CreateAPIToken(context.Context, *CreateAPITokenRequest) (*CreateAPITokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIToken not implemented")
}
func (UnimplementedUserServiceServer) GetAPIToken(context.Context, *GetAPITokenRequest) (*GetAPITokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIToken not implemented")
}
func (UnimplementedUserServiceServer) GetAPITokens(context.Context, *GetAPITokensRequest) (*GetAPITokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPITokens not implemented")
}
func (UnimplementedUserServiceServer) DeleteAPIToken(context.Context, *DeleteAPITokenRequest) (*DeleteAPITokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPIToken not implemented")
}
func (UnimplementedUserServiceServer) DeleteAPITokens(context.Context, *DeleteAPITokensRequest) (*DeleteAPITokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPITokens not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserRedacted(context.Context, *GetUserRedactedRequest) (*GetUserRedactedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRedacted not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserDisplayName(context.Context, *UpdateUserDisplayNameRequest) (*UpdateUserDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDisplayName not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserEmail(context.Context, *UpdateUserEmailRequest) (*UpdateUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedUserServiceServer) GetNotActivatedUsers(context.Context, *GetNotActivatedUsersRequest) (*GetNotActivatedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotActivatedUsers not implemented")
}
func (UnimplementedUserServiceServer) GetAllUsers(context.Context, *GetAllUsersRequest) (*GetAllUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserServiceServer) CreateS3CredentialsUserToken(context.Context, *CreateS3CredentialsUserTokenRequest) (*CreateS3CredentialsUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateS3CredentialsUserToken not implemented")
}
func (UnimplementedUserServiceServer) GetS3CredentialsUserToken(context.Context, *GetS3CredentialsUserTokenRequest) (*GetS3CredentialsUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetS3CredentialsUserToken not implemented")
}
func (UnimplementedUserServiceServer) DeleteS3CredentialsUserToken(context.Context, *DeleteS3CredentialsUserTokenRequest) (*DeleteS3CredentialsUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteS3CredentialsUserToken not implemented")
}
func (UnimplementedUserServiceServer) GetDataproxyTokenUser(context.Context, *GetDataproxyTokenUserRequest) (*GetDataproxyTokenUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataproxyTokenUser not implemented")
}
func (UnimplementedUserServiceServer) GetPersonalNotifications(context.Context, *GetPersonalNotificationsRequest) (*GetPersonalNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalNotifications not implemented")
}
func (UnimplementedUserServiceServer) AcknowledgePersonalNotifications(context.Context, *AcknowledgePersonalNotificationsRequest) (*AcknowledgePersonalNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgePersonalNotifications not implemented")
}
func (UnimplementedUserServiceServer) AddOidcProvider(context.Context, *AddOidcProviderRequest) (*AddOidcProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOidcProvider not implemented")
}
func (UnimplementedUserServiceServer) RemoveOidcProvider(context.Context, *RemoveOidcProviderRequest) (*RemoveOidcProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOidcProvider not implemented")
}
func (UnimplementedUserServiceServer) AddPubkeyUser(context.Context, *AddPubkeyUserRequest) (*AddPubkeyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPubkeyUser not implemented")
}
func (UnimplementedUserServiceServer) AddTrustedEndpointsUser(context.Context, *AddTrustedEndpointsUserRequest) (*AddTrustedEndpointsUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTrustedEndpointsUser not implemented")
}
func (UnimplementedUserServiceServer) RemoveTrustedEndpointsUser(context.Context, *RemoveTrustedEndpointsUserRequest) (*RemoveTrustedEndpointsUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTrustedEndpointsUser not implemented")
}
func (UnimplementedUserServiceServer) AddDataProxyAttributeUser(context.Context, *AddDataProxyAttributeUserRequest) (*AddDataProxyAttributeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataProxyAttributeUser not implemented")
}
func (UnimplementedUserServiceServer) RemoveDataProxyAttributeUser(context.Context, *RemoveDataProxyAttributeUserRequest) (*RemoveDataProxyAttributeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDataProxyAttributeUser not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeactivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeactivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeactivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeactivateUser(ctx, req.(*DeactivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ActivateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ActivateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ActivateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ActivateUser(ctx, req.(*ActivateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateAPIToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPITokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateAPIToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateAPIToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateAPIToken(ctx, req.(*CreateAPITokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAPIToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPITokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAPIToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAPIToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAPIToken(ctx, req.(*GetAPITokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAPITokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPITokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAPITokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAPITokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAPITokens(ctx, req.(*GetAPITokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAPIToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPITokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAPIToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteAPIToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAPIToken(ctx, req.(*DeleteAPITokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteAPITokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPITokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteAPITokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteAPITokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteAPITokens(ctx, req.(*DeleteAPITokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserRedacted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRedactedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserRedacted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserRedacted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserRedacted(ctx, req.(*GetUserRedactedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserDisplayName(ctx, req.(*UpdateUserDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserEmail(ctx, req.(*UpdateUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetNotActivatedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotActivatedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetNotActivatedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetNotActivatedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetNotActivatedUsers(ctx, req.(*GetNotActivatedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUsers(ctx, req.(*GetAllUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateS3CredentialsUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateS3CredentialsUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateS3CredentialsUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateS3CredentialsUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateS3CredentialsUserToken(ctx, req.(*CreateS3CredentialsUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetS3CredentialsUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetS3CredentialsUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetS3CredentialsUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetS3CredentialsUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetS3CredentialsUserToken(ctx, req.(*GetS3CredentialsUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteS3CredentialsUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteS3CredentialsUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteS3CredentialsUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteS3CredentialsUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteS3CredentialsUserToken(ctx, req.(*DeleteS3CredentialsUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDataproxyTokenUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataproxyTokenUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDataproxyTokenUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetDataproxyTokenUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDataproxyTokenUser(ctx, req.(*GetDataproxyTokenUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPersonalNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPersonalNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetPersonalNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPersonalNotifications(ctx, req.(*GetPersonalNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AcknowledgePersonalNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgePersonalNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AcknowledgePersonalNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AcknowledgePersonalNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AcknowledgePersonalNotifications(ctx, req.(*AcknowledgePersonalNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddOidcProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOidcProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddOidcProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddOidcProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddOidcProvider(ctx, req.(*AddOidcProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveOidcProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOidcProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveOidcProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveOidcProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveOidcProvider(ctx, req.(*RemoveOidcProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddPubkeyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPubkeyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddPubkeyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddPubkeyUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddPubkeyUser(ctx, req.(*AddPubkeyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddTrustedEndpointsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrustedEndpointsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddTrustedEndpointsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddTrustedEndpointsUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddTrustedEndpointsUser(ctx, req.(*AddTrustedEndpointsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveTrustedEndpointsUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTrustedEndpointsUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveTrustedEndpointsUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveTrustedEndpointsUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveTrustedEndpointsUser(ctx, req.(*RemoveTrustedEndpointsUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddDataProxyAttributeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataProxyAttributeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddDataProxyAttributeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddDataProxyAttributeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddDataProxyAttributeUser(ctx, req.(*AddDataProxyAttributeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveDataProxyAttributeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDataProxyAttributeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveDataProxyAttributeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveDataProxyAttributeUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveDataProxyAttributeUser(ctx, req.(*RemoveDataProxyAttributeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v2.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserService_RegisterUser_Handler,
		},
		{
			MethodName: "DeactivateUser",
			Handler:    _UserService_DeactivateUser_Handler,
		},
		{
			MethodName: "ActivateUser",
			Handler:    _UserService_ActivateUser_Handler,
		},
		{
			MethodName: "CreateAPIToken",
			Handler:    _UserService_CreateAPIToken_Handler,
		},
		{
			MethodName: "GetAPIToken",
			Handler:    _UserService_GetAPIToken_Handler,
		},
		{
			MethodName: "GetAPITokens",
			Handler:    _UserService_GetAPITokens_Handler,
		},
		{
			MethodName: "DeleteAPIToken",
			Handler:    _UserService_DeleteAPIToken_Handler,
		},
		{
			MethodName: "DeleteAPITokens",
			Handler:    _UserService_DeleteAPITokens_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUserRedacted",
			Handler:    _UserService_GetUserRedacted_Handler,
		},
		{
			MethodName: "UpdateUserDisplayName",
			Handler:    _UserService_UpdateUserDisplayName_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _UserService_UpdateUserEmail_Handler,
		},
		{
			MethodName: "GetNotActivatedUsers",
			Handler:    _UserService_GetNotActivatedUsers_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserService_GetAllUsers_Handler,
		},
		{
			MethodName: "CreateS3CredentialsUserToken",
			Handler:    _UserService_CreateS3CredentialsUserToken_Handler,
		},
		{
			MethodName: "GetS3CredentialsUserToken",
			Handler:    _UserService_GetS3CredentialsUserToken_Handler,
		},
		{
			MethodName: "DeleteS3CredentialsUserToken",
			Handler:    _UserService_DeleteS3CredentialsUserToken_Handler,
		},
		{
			MethodName: "GetDataproxyTokenUser",
			Handler:    _UserService_GetDataproxyTokenUser_Handler,
		},
		{
			MethodName: "GetPersonalNotifications",
			Handler:    _UserService_GetPersonalNotifications_Handler,
		},
		{
			MethodName: "AcknowledgePersonalNotifications",
			Handler:    _UserService_AcknowledgePersonalNotifications_Handler,
		},
		{
			MethodName: "AddOidcProvider",
			Handler:    _UserService_AddOidcProvider_Handler,
		},
		{
			MethodName: "RemoveOidcProvider",
			Handler:    _UserService_RemoveOidcProvider_Handler,
		},
		{
			MethodName: "AddPubkeyUser",
			Handler:    _UserService_AddPubkeyUser_Handler,
		},
		{
			MethodName: "AddTrustedEndpointsUser",
			Handler:    _UserService_AddTrustedEndpointsUser_Handler,
		},
		{
			MethodName: "RemoveTrustedEndpointsUser",
			Handler:    _UserService_RemoveTrustedEndpointsUser_Handler,
		},
		{
			MethodName: "AddDataProxyAttributeUser",
			Handler:    _UserService_AddDataProxyAttributeUser_Handler,
		},
		{
			MethodName: "RemoveDataProxyAttributeUser",
			Handler:    _UserService_RemoveDataProxyAttributeUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v2/user_service.proto",
}
