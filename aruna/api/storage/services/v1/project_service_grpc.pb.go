// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v1/project_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// CreateProject
	//
	// Creates a new project all users and collections are bundled in a project.
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// AddUserToProject
	//
	// Adds a new user to a given project by its id
	AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error)
	// GetProject
	//
	// Requests a project by id
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// GetProject
	//
	// Admin request to get all projects
	GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error)
	// DestroyProject
	//
	// Destroys the project and all its associated data. Must be empty
	// (cannot contain any collections).
	DestroyProject(ctx context.Context, in *DestroyProjectRequest, opts ...grpc.CallOption) (*DestroyProjectResponse, error)
	// UpdateProject
	//
	// Updates the project. All (meta) data will be overwritten.
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	// RemoveUserFromProject
	//
	// Removes a specified user from the project.
	RemoveUserFromProject(ctx context.Context, in *RemoveUserFromProjectRequest, opts ...grpc.CallOption) (*RemoveUserFromProjectResponse, error)
	// GetUserPermissionsForProject
	//
	// Get the user_permission of a specific user for the project.
	GetUserPermissionsForProject(ctx context.Context, in *GetUserPermissionsForProjectRequest, opts ...grpc.CallOption) (*GetUserPermissionsForProjectResponse, error)
	// EditUserPermissionsForProject
	//
	// Modifies the user_permission of a specific user for the project.
	EditUserPermissionsForProject(ctx context.Context, in *EditUserPermissionsForProjectRequest, opts ...grpc.CallOption) (*EditUserPermissionsForProjectResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error) {
	out := new(AddUserToProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/AddUserToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	out := new(GetProjectsResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/GetProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DestroyProject(ctx context.Context, in *DestroyProjectRequest, opts ...grpc.CallOption) (*DestroyProjectResponse, error) {
	out := new(DestroyProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/DestroyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RemoveUserFromProject(ctx context.Context, in *RemoveUserFromProjectRequest, opts ...grpc.CallOption) (*RemoveUserFromProjectResponse, error) {
	out := new(RemoveUserFromProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/RemoveUserFromProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetUserPermissionsForProject(ctx context.Context, in *GetUserPermissionsForProjectRequest, opts ...grpc.CallOption) (*GetUserPermissionsForProjectResponse, error) {
	out := new(GetUserPermissionsForProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/GetUserPermissionsForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) EditUserPermissionsForProject(ctx context.Context, in *EditUserPermissionsForProjectRequest, opts ...grpc.CallOption) (*EditUserPermissionsForProjectResponse, error) {
	out := new(EditUserPermissionsForProjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ProjectService/EditUserPermissionsForProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations should embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	// CreateProject
	//
	// Creates a new project all users and collections are bundled in a project.
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// AddUserToProject
	//
	// Adds a new user to a given project by its id
	AddUserToProject(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error)
	// GetProject
	//
	// Requests a project by id
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// GetProject
	//
	// Admin request to get all projects
	GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error)
	// DestroyProject
	//
	// Destroys the project and all its associated data. Must be empty
	// (cannot contain any collections).
	DestroyProject(context.Context, *DestroyProjectRequest) (*DestroyProjectResponse, error)
	// UpdateProject
	//
	// Updates the project. All (meta) data will be overwritten.
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	// RemoveUserFromProject
	//
	// Removes a specified user from the project.
	RemoveUserFromProject(context.Context, *RemoveUserFromProjectRequest) (*RemoveUserFromProjectResponse, error)
	// GetUserPermissionsForProject
	//
	// Get the user_permission of a specific user for the project.
	GetUserPermissionsForProject(context.Context, *GetUserPermissionsForProjectRequest) (*GetUserPermissionsForProjectResponse, error)
	// EditUserPermissionsForProject
	//
	// Modifies the user_permission of a specific user for the project.
	EditUserPermissionsForProject(context.Context, *EditUserPermissionsForProjectRequest) (*EditUserPermissionsForProjectResponse, error)
}

// UnimplementedProjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) AddUserToProject(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToProject not implemented")
}
func (UnimplementedProjectServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectServiceServer) GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (UnimplementedProjectServiceServer) DestroyProject(context.Context, *DestroyProjectRequest) (*DestroyProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectServiceServer) RemoveUserFromProject(context.Context, *RemoveUserFromProjectRequest) (*RemoveUserFromProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromProject not implemented")
}
func (UnimplementedProjectServiceServer) GetUserPermissionsForProject(context.Context, *GetUserPermissionsForProjectRequest) (*GetUserPermissionsForProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionsForProject not implemented")
}
func (UnimplementedProjectServiceServer) EditUserPermissionsForProject(context.Context, *EditUserPermissionsForProjectRequest) (*EditUserPermissionsForProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserPermissionsForProject not implemented")
}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddUserToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddUserToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/AddUserToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddUserToProject(ctx, req.(*AddUserToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjects(ctx, req.(*GetProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DestroyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DestroyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/DestroyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DestroyProject(ctx, req.(*DestroyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RemoveUserFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RemoveUserFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/RemoveUserFromProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RemoveUserFromProject(ctx, req.(*RemoveUserFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetUserPermissionsForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetUserPermissionsForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/GetUserPermissionsForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetUserPermissionsForProject(ctx, req.(*GetUserPermissionsForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_EditUserPermissionsForProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserPermissionsForProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).EditUserPermissionsForProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ProjectService/EditUserPermissionsForProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).EditUserPermissionsForProject(ctx, req.(*EditUserPermissionsForProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "AddUserToProject",
			Handler:    _ProjectService_AddUserToProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectService_GetProject_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _ProjectService_GetProjects_Handler,
		},
		{
			MethodName: "DestroyProject",
			Handler:    _ProjectService_DestroyProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectService_UpdateProject_Handler,
		},
		{
			MethodName: "RemoveUserFromProject",
			Handler:    _ProjectService_RemoveUserFromProject_Handler,
		},
		{
			MethodName: "GetUserPermissionsForProject",
			Handler:    _ProjectService_GetUserPermissionsForProject_Handler,
		},
		{
			MethodName: "EditUserPermissionsForProject",
			Handler:    _ProjectService_EditUserPermissionsForProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v1/project_service.proto",
}
