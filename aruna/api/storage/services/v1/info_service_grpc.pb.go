// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v1/info_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceInfoServiceClient is the client API for ResourceInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceInfoServiceClient interface {
	// GetResourceHierarchy
	//
	// This requests a hierarchy based on one resource (object / objectgroup or collection)
	// and returns a hierarchy with all associated higherlevel objects up to projects.
	// Needs projects level read access.
	GetResourceHierarchy(ctx context.Context, in *GetResourceHierarchyRequest, opts ...grpc.CallOption) (*GetResourceHierarchyResponse, error)
}

type resourceInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceInfoServiceClient(cc grpc.ClientConnInterface) ResourceInfoServiceClient {
	return &resourceInfoServiceClient{cc}
}

func (c *resourceInfoServiceClient) GetResourceHierarchy(ctx context.Context, in *GetResourceHierarchyRequest, opts ...grpc.CallOption) (*GetResourceHierarchyResponse, error) {
	out := new(GetResourceHierarchyResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ResourceInfoService/GetResourceHierarchy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceInfoServiceServer is the server API for ResourceInfoService service.
// All implementations should embed UnimplementedResourceInfoServiceServer
// for forward compatibility
type ResourceInfoServiceServer interface {
	// GetResourceHierarchy
	//
	// This requests a hierarchy based on one resource (object / objectgroup or collection)
	// and returns a hierarchy with all associated higherlevel objects up to projects.
	// Needs projects level read access.
	GetResourceHierarchy(context.Context, *GetResourceHierarchyRequest) (*GetResourceHierarchyResponse, error)
}

// UnimplementedResourceInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedResourceInfoServiceServer struct {
}

func (UnimplementedResourceInfoServiceServer) GetResourceHierarchy(context.Context, *GetResourceHierarchyRequest) (*GetResourceHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceHierarchy not implemented")
}

// UnsafeResourceInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceInfoServiceServer will
// result in compilation errors.
type UnsafeResourceInfoServiceServer interface {
	mustEmbedUnimplementedResourceInfoServiceServer()
}

func RegisterResourceInfoServiceServer(s grpc.ServiceRegistrar, srv ResourceInfoServiceServer) {
	s.RegisterService(&ResourceInfoService_ServiceDesc, srv)
}

func _ResourceInfoService_GetResourceHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceInfoServiceServer).GetResourceHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ResourceInfoService/GetResourceHierarchy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceInfoServiceServer).GetResourceHierarchy(ctx, req.(*GetResourceHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceInfoService_ServiceDesc is the grpc.ServiceDesc for ResourceInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v1.ResourceInfoService",
	HandlerType: (*ResourceInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceHierarchy",
			Handler:    _ResourceInfoService_GetResourceHierarchy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v1/info_service.proto",
}

// StorageInfoServiceClient is the client API for StorageInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageInfoServiceClient interface {
	// GetStorageVersion
	//
	// Status: ALPHA
	//
	// A request to get the current version of the server application
	// String representation and https://semver.org/
	GetStorageVersion(ctx context.Context, in *GetStorageVersionRequest, opts ...grpc.CallOption) (*GetStorageVersionResponse, error)
	// GetStorageStatus
	//
	// Status: ALPHA
	//
	// A request to get the current status of the storage components by location(s)
	GetStorageStatus(ctx context.Context, in *GetStorageStatusRequest, opts ...grpc.CallOption) (*GetStorageStatusResponse, error)
}

type storageInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageInfoServiceClient(cc grpc.ClientConnInterface) StorageInfoServiceClient {
	return &storageInfoServiceClient{cc}
}

func (c *storageInfoServiceClient) GetStorageVersion(ctx context.Context, in *GetStorageVersionRequest, opts ...grpc.CallOption) (*GetStorageVersionResponse, error) {
	out := new(GetStorageVersionResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.StorageInfoService/GetStorageVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageInfoServiceClient) GetStorageStatus(ctx context.Context, in *GetStorageStatusRequest, opts ...grpc.CallOption) (*GetStorageStatusResponse, error) {
	out := new(GetStorageStatusResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.StorageInfoService/GetStorageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageInfoServiceServer is the server API for StorageInfoService service.
// All implementations should embed UnimplementedStorageInfoServiceServer
// for forward compatibility
type StorageInfoServiceServer interface {
	// GetStorageVersion
	//
	// Status: ALPHA
	//
	// A request to get the current version of the server application
	// String representation and https://semver.org/
	GetStorageVersion(context.Context, *GetStorageVersionRequest) (*GetStorageVersionResponse, error)
	// GetStorageStatus
	//
	// Status: ALPHA
	//
	// A request to get the current status of the storage components by location(s)
	GetStorageStatus(context.Context, *GetStorageStatusRequest) (*GetStorageStatusResponse, error)
}

// UnimplementedStorageInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStorageInfoServiceServer struct {
}

func (UnimplementedStorageInfoServiceServer) GetStorageVersion(context.Context, *GetStorageVersionRequest) (*GetStorageVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageVersion not implemented")
}
func (UnimplementedStorageInfoServiceServer) GetStorageStatus(context.Context, *GetStorageStatusRequest) (*GetStorageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageStatus not implemented")
}

// UnsafeStorageInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageInfoServiceServer will
// result in compilation errors.
type UnsafeStorageInfoServiceServer interface {
	mustEmbedUnimplementedStorageInfoServiceServer()
}

func RegisterStorageInfoServiceServer(s grpc.ServiceRegistrar, srv StorageInfoServiceServer) {
	s.RegisterService(&StorageInfoService_ServiceDesc, srv)
}

func _StorageInfoService_GetStorageVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInfoServiceServer).GetStorageVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.StorageInfoService/GetStorageVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInfoServiceServer).GetStorageVersion(ctx, req.(*GetStorageVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageInfoService_GetStorageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageInfoServiceServer).GetStorageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.StorageInfoService/GetStorageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageInfoServiceServer).GetStorageStatus(ctx, req.(*GetStorageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageInfoService_ServiceDesc is the grpc.ServiceDesc for StorageInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v1.StorageInfoService",
	HandlerType: (*StorageInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStorageVersion",
			Handler:    _StorageInfoService_GetStorageVersion_Handler,
		},
		{
			MethodName: "GetStorageStatus",
			Handler:    _StorageInfoService_GetStorageStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v1/info_service.proto",
}
