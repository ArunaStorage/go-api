// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v1/collection_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectionServiceClient is the client API for CollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectionServiceClient interface {
	// CreateNewCollection
	//
	// Status: STABLE
	//
	// creates a new Collection
	CreateNewCollection(ctx context.Context, in *CreateNewCollectionRequest, opts ...grpc.CallOption) (*CreateNewCollectionResponse, error)
	// GetCollectionByID
	//
	// Status: STABLE
	//
	// Queries a specific Collection by ID
	// The result can be one_of:
	// CollectionOverview -> default
	// CollectionWithID
	// Collection (full)
	// This can be modified with the optional OutputFormat parameter
	GetCollectionByID(ctx context.Context, in *GetCollectionByIDRequest, opts ...grpc.CallOption) (*GetCollectionByIDResponse, error)
	// GetCollections
	//
	// Status: STABLE
	//
	// queries multiple collections by ID or by LabelFilter
	// This returns by default a paginated result with 20 entries.
	// Must specify a project_id as context
	GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error)
	// UpdateCollection
	//
	// Status: STABLE
	//
	// Updates the current collection
	// This will update the collection in place if it is unversioned / latest
	// A versioned (pinned) collection requires a new semantic version after the
	// update This can be used to pin a collection to a specific version similar
	// to the PinCollectionVersion request
	UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionResponse, error)
	// PinCollectionVersion
	//
	// Status: STABLE
	//
	// This pins the current status of the version to a
	// specific version. Effectively creating a copy of the collection with a
	// stable version All objects will be pinned to an explicit revision number
	// Pinned collections can not be updated in place
	PinCollectionVersion(ctx context.Context, in *PinCollectionVersionRequest, opts ...grpc.CallOption) (*PinCollectionVersionResponse, error)
	// DeleteCollection
	//
	// Status: STABLE
	//
	// This request deletes the collection.
	// If with_version is true, it deletes the collection and all its versions.
	// If cascade is true, all objects that are owned by the collection will also
	// deleted. This should be avoided
	DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error)
}

type collectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectionServiceClient(cc grpc.ClientConnInterface) CollectionServiceClient {
	return &collectionServiceClient{cc}
}

func (c *collectionServiceClient) CreateNewCollection(ctx context.Context, in *CreateNewCollectionRequest, opts ...grpc.CallOption) (*CreateNewCollectionResponse, error) {
	out := new(CreateNewCollectionResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.CollectionService/CreateNewCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollectionByID(ctx context.Context, in *GetCollectionByIDRequest, opts ...grpc.CallOption) (*GetCollectionByIDResponse, error) {
	out := new(GetCollectionByIDResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.CollectionService/GetCollectionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) GetCollections(ctx context.Context, in *GetCollectionsRequest, opts ...grpc.CallOption) (*GetCollectionsResponse, error) {
	out := new(GetCollectionsResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.CollectionService/GetCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) UpdateCollection(ctx context.Context, in *UpdateCollectionRequest, opts ...grpc.CallOption) (*UpdateCollectionResponse, error) {
	out := new(UpdateCollectionResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.CollectionService/UpdateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) PinCollectionVersion(ctx context.Context, in *PinCollectionVersionRequest, opts ...grpc.CallOption) (*PinCollectionVersionResponse, error) {
	out := new(PinCollectionVersionResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.CollectionService/PinCollectionVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectionServiceClient) DeleteCollection(ctx context.Context, in *DeleteCollectionRequest, opts ...grpc.CallOption) (*DeleteCollectionResponse, error) {
	out := new(DeleteCollectionResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.CollectionService/DeleteCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectionServiceServer is the server API for CollectionService service.
// All implementations should embed UnimplementedCollectionServiceServer
// for forward compatibility
type CollectionServiceServer interface {
	// CreateNewCollection
	//
	// Status: STABLE
	//
	// creates a new Collection
	CreateNewCollection(context.Context, *CreateNewCollectionRequest) (*CreateNewCollectionResponse, error)
	// GetCollectionByID
	//
	// Status: STABLE
	//
	// Queries a specific Collection by ID
	// The result can be one_of:
	// CollectionOverview -> default
	// CollectionWithID
	// Collection (full)
	// This can be modified with the optional OutputFormat parameter
	GetCollectionByID(context.Context, *GetCollectionByIDRequest) (*GetCollectionByIDResponse, error)
	// GetCollections
	//
	// Status: STABLE
	//
	// queries multiple collections by ID or by LabelFilter
	// This returns by default a paginated result with 20 entries.
	// Must specify a project_id as context
	GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error)
	// UpdateCollection
	//
	// Status: STABLE
	//
	// Updates the current collection
	// This will update the collection in place if it is unversioned / latest
	// A versioned (pinned) collection requires a new semantic version after the
	// update This can be used to pin a collection to a specific version similar
	// to the PinCollectionVersion request
	UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionResponse, error)
	// PinCollectionVersion
	//
	// Status: STABLE
	//
	// This pins the current status of the version to a
	// specific version. Effectively creating a copy of the collection with a
	// stable version All objects will be pinned to an explicit revision number
	// Pinned collections can not be updated in place
	PinCollectionVersion(context.Context, *PinCollectionVersionRequest) (*PinCollectionVersionResponse, error)
	// DeleteCollection
	//
	// Status: STABLE
	//
	// This request deletes the collection.
	// If with_version is true, it deletes the collection and all its versions.
	// If cascade is true, all objects that are owned by the collection will also
	// deleted. This should be avoided
	DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error)
}

// UnimplementedCollectionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCollectionServiceServer struct {
}

func (UnimplementedCollectionServiceServer) CreateNewCollection(context.Context, *CreateNewCollectionRequest) (*CreateNewCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCollection not implemented")
}
func (UnimplementedCollectionServiceServer) GetCollectionByID(context.Context, *GetCollectionByIDRequest) (*GetCollectionByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionByID not implemented")
}
func (UnimplementedCollectionServiceServer) GetCollections(context.Context, *GetCollectionsRequest) (*GetCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollections not implemented")
}
func (UnimplementedCollectionServiceServer) UpdateCollection(context.Context, *UpdateCollectionRequest) (*UpdateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollection not implemented")
}
func (UnimplementedCollectionServiceServer) PinCollectionVersion(context.Context, *PinCollectionVersionRequest) (*PinCollectionVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinCollectionVersion not implemented")
}
func (UnimplementedCollectionServiceServer) DeleteCollection(context.Context, *DeleteCollectionRequest) (*DeleteCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollection not implemented")
}

// UnsafeCollectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectionServiceServer will
// result in compilation errors.
type UnsafeCollectionServiceServer interface {
	mustEmbedUnimplementedCollectionServiceServer()
}

func RegisterCollectionServiceServer(s grpc.ServiceRegistrar, srv CollectionServiceServer) {
	s.RegisterService(&CollectionService_ServiceDesc, srv)
}

func _CollectionService_CreateNewCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).CreateNewCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.CollectionService/CreateNewCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).CreateNewCollection(ctx, req.(*CreateNewCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollectionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollectionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.CollectionService/GetCollectionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollectionByID(ctx, req.(*GetCollectionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_GetCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).GetCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.CollectionService/GetCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).GetCollections(ctx, req.(*GetCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_UpdateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).UpdateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.CollectionService/UpdateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).UpdateCollection(ctx, req.(*UpdateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_PinCollectionVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinCollectionVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).PinCollectionVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.CollectionService/PinCollectionVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).PinCollectionVersion(ctx, req.(*PinCollectionVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectionService_DeleteCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectionServiceServer).DeleteCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.CollectionService/DeleteCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectionServiceServer).DeleteCollection(ctx, req.(*DeleteCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectionService_ServiceDesc is the grpc.ServiceDesc for CollectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v1.CollectionService",
	HandlerType: (*CollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewCollection",
			Handler:    _CollectionService_CreateNewCollection_Handler,
		},
		{
			MethodName: "GetCollectionByID",
			Handler:    _CollectionService_GetCollectionByID_Handler,
		},
		{
			MethodName: "GetCollections",
			Handler:    _CollectionService_GetCollections_Handler,
		},
		{
			MethodName: "UpdateCollection",
			Handler:    _CollectionService_UpdateCollection_Handler,
		},
		{
			MethodName: "PinCollectionVersion",
			Handler:    _CollectionService_PinCollectionVersion_Handler,
		},
		{
			MethodName: "DeleteCollection",
			Handler:    _CollectionService_DeleteCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/storage/services/v1/collection_service.proto",
}
