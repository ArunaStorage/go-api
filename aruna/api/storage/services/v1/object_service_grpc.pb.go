// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/storage/services/v1/object_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectServiceClient is the client API for ObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectServiceClient interface {
	// InitializeNewObject
	//
	// Status: STABLE
	//
	// This initializes a new object
	// Initializing an object will put it in a staging area.
	// Staged objects will get a separate staging id and need to be finished
	// before they can be used.
	InitializeNewObject(ctx context.Context, in *InitializeNewObjectRequest, opts ...grpc.CallOption) (*InitializeNewObjectResponse, error)
	// GetUploadURL
	//
	// Status: STABLE
	//
	// This method will return a (multi-part) url that can be used to upload a
	// file to S3. Part is a optional query parameter that can be used to upload a
	// part of the file / multipart upload.
	GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error)
	// GetDownloadUrl
	//
	// Status: STABLE
	//
	// This method will return a url that can be used to download a file from S3.
	GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error)
	// GetDownloadLinksBatch
	//
	// Status: BETA
	//
	// This method can be used to get download urls for multiple objects.
	// The order of the returned urls will be the same as the order of the object
	// ids in the request.
	GetDownloadLinksBatch(ctx context.Context, in *GetDownloadLinksBatchRequest, opts ...grpc.CallOption) (*GetDownloadLinksBatchResponse, error)
	// CreateDownloadLinksStream
	//
	// Status: BETA
	//
	// Creates a stream of objects and presigned links based on the provided query
	// This can be used retrieve a large number of Objects as a stream that would
	// otherwise cause issues with the connection
	CreateDownloadLinksStream(ctx context.Context, in *CreateDownloadLinksStreamRequest, opts ...grpc.CallOption) (ObjectService_CreateDownloadLinksStreamClient, error)
	// FinishObjectStaging
	//
	// Status: STABLE
	//
	// This method completes the staging of an object.
	FinishObjectStaging(ctx context.Context, in *FinishObjectStagingRequest, opts ...grpc.CallOption) (*FinishObjectStagingResponse, error)
	// UpdateObject
	//
	// Status: STABLE
	//
	// Objects are immutable!
	// Updating an object will create a new revision for the object
	// This method will put the new revision in a staging area.
	// Staged objects will get a separate staging id and need to be finished
	// before they can be used.
	UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error)
	// CreateObjectReference
	//
	// Status: STABLE
	//
	// Creates a new reference of this object in another collection
	CreateObjectReference(ctx context.Context, in *CreateObjectReferenceRequest, opts ...grpc.CallOption) (*CreateObjectReferenceResponse, error)
	// CloneObject
	//
	// Status: STABLE
	//
	// This method clones an object and creates a copy in the same collection.
	// This copy has a new id and revision and will not receive any updates from
	// the original object.
	CloneObject(ctx context.Context, in *CloneObjectRequest, opts ...grpc.CallOption) (*CloneObjectResponse, error)
	// DeleteObject
	//
	// Status: STABLE
	//
	// Deletes the object with the complete revision history.
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	// DeleteObjects
	//
	// Status: STABLE
	//
	// Deletes multiple objects at once.
	DeleteObjects(ctx context.Context, in *DeleteObjectsRequest, opts ...grpc.CallOption) (*DeleteObjectsResponse, error)
	// GetObjectByID
	//
	// Status: STABLE
	//
	// gets a specific Object by ID that is associated to the
	// current collection By default only the latest revision of an object will be
	// returned Specify a revision_number to select an older revision With the
	// optional with_url boolean a download link can automatically be requested
	GetObjectByID(ctx context.Context, in *GetObjectByIDRequest, opts ...grpc.CallOption) (*GetObjectByIDResponse, error)
	// GetObjects
	//
	// Status: STABLE
	//
	// GetObjects returns a (paginated) list of objects in a specific collection
	// By default only the latest revisions of all objects will be shown
	// This behaviour can be changed with the include_history flag
	// With the optional with_url boolean a download link can automatically be
	// requested for each Object This request contains a LabelOrIDQuery message,
	// this is either a list of request ObjectIDs or a query filtered by Labels
	GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*GetObjectsResponse, error)
	// GetObjectRevisions
	//
	// Status: STABLE
	//
	// This returns the full list of revisions of a specified object
	// With the optional with_url boolean a download link can automatically be
	// requested for each Object This is by default a paginated request
	GetObjectRevisions(ctx context.Context, in *GetObjectRevisionsRequest, opts ...grpc.CallOption) (*GetObjectRevisionsResponse, error)
	// GetLatestObjectRevision
	//
	// Status: STABLE
	//
	// This returns the latest revision of a specific object
	// The returned `latest` object will have a different id if the current
	// object is not the latest revision
	GetLatestObjectRevision(ctx context.Context, in *GetLatestObjectRevisionRequest, opts ...grpc.CallOption) (*GetLatestObjectRevisionResponse, error)
	// GetObjectEndpoints
	//
	// Status: BETA
	//
	// This returns a list of endpoints
	// One endpoint will be the "default" endpoint
	GetObjectEndpoints(ctx context.Context, in *GetObjectEndpointsRequest, opts ...grpc.CallOption) (*GetObjectEndpointsResponse, error)
	// AddLabelsToObject
	//
	// Status: STABLE
	//
	// This is a specific request to add new label(s)
	// to an existing object, in contrast to UpdateObject
	// this will not create a new object in the staging area
	// Instead it will directly add the specified label(s) to the object
	AddLabelsToObject(ctx context.Context, in *AddLabelsToObjectRequest, opts ...grpc.CallOption) (*AddLabelsToObjectResponse, error)
	// SetHooksOfObject
	//
	// Status: BETA
	//
	// This is a specific request to update the complete list
	// of hooks for a specific object. This will not update the object
	// and create a new id, instead it will overwrite all hooks of the existing
	// object.
	SetHooksOfObject(ctx context.Context, in *SetHooksOfObjectRequest, opts ...grpc.CallOption) (*SetHooksOfObjectResponse, error)
	// GetReferences
	//
	// Status: STABLE
	//
	// Get a list of references for this object (optional) including all revisions
	GetReferences(ctx context.Context, in *GetReferencesRequest, opts ...grpc.CallOption) (*GetReferencesResponse, error)
	// GetObjectPath
	//
	// Status: BETA
	//
	// Get all object_paths for this object in a specific collection
	// !! Paths are collection specific !!
	GetObjectPath(ctx context.Context, in *GetObjectPathRequest, opts ...grpc.CallOption) (*GetObjectPathResponse, error)
	// GetObjectPaths
	//
	// Status: BETA
	//
	// Get all object_paths for a specific collection
	// !! Paths are collection specific !!
	GetObjectPaths(ctx context.Context, in *GetObjectPathsRequest, opts ...grpc.CallOption) (*GetObjectPathsResponse, error)
	// CreateObjectPath
	//
	// Status: BETA
	//
	// Create collection_specific object_paths for an object
	// !! Paths are collection specific !!
	CreateObjectPath(ctx context.Context, in *CreateObjectPathRequest, opts ...grpc.CallOption) (*CreateObjectPathResponse, error)
	// SetObjectPathVisibility
	//
	// Status: BETA
	//
	// Updates the visibility setting for an object_path (hide/unhide)
	// !! Paths are collection specific !!
	SetObjectPathVisibility(ctx context.Context, in *SetObjectPathVisibilityRequest, opts ...grpc.CallOption) (*SetObjectPathVisibilityResponse, error)
	// GetObjectsByPath
	//
	// Status: BETA
	//
	// Gets a specific object by object_path
	// !! Paths are collection specific !!
	GetObjectsByPath(ctx context.Context, in *GetObjectsByPathRequest, opts ...grpc.CallOption) (*GetObjectsByPathResponse, error)
	// GetProjectCollectionIdsByPath
	//
	// Status: BETA
	//
	// Gets a specific project and collection_id by object_path
	// !! Paths are collection specific !!
	GetProjectCollectionIdsByPath(ctx context.Context, in *GetProjectCollectionIdsByPathRequest, opts ...grpc.CallOption) (*GetProjectCollectionIdsByPathResponse, error)
	// GetObjectsAsListV2
	//
	// Status: ALPHA
	//
	// Gets a list of objects represented similar to a S3 ListObjectsV2 request
	// !! Paths are collection specific !!
	GetObjectsAsListV2(ctx context.Context, in *GetObjectsAsListV2Request, opts ...grpc.CallOption) (*GetObjectsAsListV2Response, error)
}

type objectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectServiceClient(cc grpc.ClientConnInterface) ObjectServiceClient {
	return &objectServiceClient{cc}
}

func (c *objectServiceClient) InitializeNewObject(ctx context.Context, in *InitializeNewObjectRequest, opts ...grpc.CallOption) (*InitializeNewObjectResponse, error) {
	out := new(InitializeNewObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/InitializeNewObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetUploadURL(ctx context.Context, in *GetUploadURLRequest, opts ...grpc.CallOption) (*GetUploadURLResponse, error) {
	out := new(GetUploadURLResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetUploadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetDownloadURL(ctx context.Context, in *GetDownloadURLRequest, opts ...grpc.CallOption) (*GetDownloadURLResponse, error) {
	out := new(GetDownloadURLResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetDownloadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetDownloadLinksBatch(ctx context.Context, in *GetDownloadLinksBatchRequest, opts ...grpc.CallOption) (*GetDownloadLinksBatchResponse, error) {
	out := new(GetDownloadLinksBatchResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetDownloadLinksBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CreateDownloadLinksStream(ctx context.Context, in *CreateDownloadLinksStreamRequest, opts ...grpc.CallOption) (ObjectService_CreateDownloadLinksStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectService_ServiceDesc.Streams[0], "/aruna.api.storage.services.v1.ObjectService/CreateDownloadLinksStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectServiceCreateDownloadLinksStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectService_CreateDownloadLinksStreamClient interface {
	Recv() (*CreateDownloadLinksStreamResponse, error)
	grpc.ClientStream
}

type objectServiceCreateDownloadLinksStreamClient struct {
	grpc.ClientStream
}

func (x *objectServiceCreateDownloadLinksStreamClient) Recv() (*CreateDownloadLinksStreamResponse, error) {
	m := new(CreateDownloadLinksStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectServiceClient) FinishObjectStaging(ctx context.Context, in *FinishObjectStagingRequest, opts ...grpc.CallOption) (*FinishObjectStagingResponse, error) {
	out := new(FinishObjectStagingResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/FinishObjectStaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error) {
	out := new(UpdateObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/UpdateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CreateObjectReference(ctx context.Context, in *CreateObjectReferenceRequest, opts ...grpc.CallOption) (*CreateObjectReferenceResponse, error) {
	out := new(CreateObjectReferenceResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/CreateObjectReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CloneObject(ctx context.Context, in *CloneObjectRequest, opts ...grpc.CallOption) (*CloneObjectResponse, error) {
	out := new(CloneObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/CloneObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) DeleteObjects(ctx context.Context, in *DeleteObjectsRequest, opts ...grpc.CallOption) (*DeleteObjectsResponse, error) {
	out := new(DeleteObjectsResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/DeleteObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectByID(ctx context.Context, in *GetObjectByIDRequest, opts ...grpc.CallOption) (*GetObjectByIDResponse, error) {
	out := new(GetObjectByIDResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjectByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjects(ctx context.Context, in *GetObjectsRequest, opts ...grpc.CallOption) (*GetObjectsResponse, error) {
	out := new(GetObjectsResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectRevisions(ctx context.Context, in *GetObjectRevisionsRequest, opts ...grpc.CallOption) (*GetObjectRevisionsResponse, error) {
	out := new(GetObjectRevisionsResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjectRevisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetLatestObjectRevision(ctx context.Context, in *GetLatestObjectRevisionRequest, opts ...grpc.CallOption) (*GetLatestObjectRevisionResponse, error) {
	out := new(GetLatestObjectRevisionResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetLatestObjectRevision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectEndpoints(ctx context.Context, in *GetObjectEndpointsRequest, opts ...grpc.CallOption) (*GetObjectEndpointsResponse, error) {
	out := new(GetObjectEndpointsResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjectEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) AddLabelsToObject(ctx context.Context, in *AddLabelsToObjectRequest, opts ...grpc.CallOption) (*AddLabelsToObjectResponse, error) {
	out := new(AddLabelsToObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/AddLabelsToObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) SetHooksOfObject(ctx context.Context, in *SetHooksOfObjectRequest, opts ...grpc.CallOption) (*SetHooksOfObjectResponse, error) {
	out := new(SetHooksOfObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/SetHooksOfObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetReferences(ctx context.Context, in *GetReferencesRequest, opts ...grpc.CallOption) (*GetReferencesResponse, error) {
	out := new(GetReferencesResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectPath(ctx context.Context, in *GetObjectPathRequest, opts ...grpc.CallOption) (*GetObjectPathResponse, error) {
	out := new(GetObjectPathResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjectPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectPaths(ctx context.Context, in *GetObjectPathsRequest, opts ...grpc.CallOption) (*GetObjectPathsResponse, error) {
	out := new(GetObjectPathsResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjectPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) CreateObjectPath(ctx context.Context, in *CreateObjectPathRequest, opts ...grpc.CallOption) (*CreateObjectPathResponse, error) {
	out := new(CreateObjectPathResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/CreateObjectPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) SetObjectPathVisibility(ctx context.Context, in *SetObjectPathVisibilityRequest, opts ...grpc.CallOption) (*SetObjectPathVisibilityResponse, error) {
	out := new(SetObjectPathVisibilityResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/SetObjectPathVisibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectsByPath(ctx context.Context, in *GetObjectsByPathRequest, opts ...grpc.CallOption) (*GetObjectsByPathResponse, error) {
	out := new(GetObjectsByPathResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjectsByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetProjectCollectionIdsByPath(ctx context.Context, in *GetProjectCollectionIdsByPathRequest, opts ...grpc.CallOption) (*GetProjectCollectionIdsByPathResponse, error) {
	out := new(GetProjectCollectionIdsByPathResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetProjectCollectionIdsByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectServiceClient) GetObjectsAsListV2(ctx context.Context, in *GetObjectsAsListV2Request, opts ...grpc.CallOption) (*GetObjectsAsListV2Response, error) {
	out := new(GetObjectsAsListV2Response)
	err := c.cc.Invoke(ctx, "/aruna.api.storage.services.v1.ObjectService/GetObjectsAsListV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectServiceServer is the server API for ObjectService service.
// All implementations should embed UnimplementedObjectServiceServer
// for forward compatibility
type ObjectServiceServer interface {
	// InitializeNewObject
	//
	// Status: STABLE
	//
	// This initializes a new object
	// Initializing an object will put it in a staging area.
	// Staged objects will get a separate staging id and need to be finished
	// before they can be used.
	InitializeNewObject(context.Context, *InitializeNewObjectRequest) (*InitializeNewObjectResponse, error)
	// GetUploadURL
	//
	// Status: STABLE
	//
	// This method will return a (multi-part) url that can be used to upload a
	// file to S3. Part is a optional query parameter that can be used to upload a
	// part of the file / multipart upload.
	GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error)
	// GetDownloadUrl
	//
	// Status: STABLE
	//
	// This method will return a url that can be used to download a file from S3.
	GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error)
	// GetDownloadLinksBatch
	//
	// Status: BETA
	//
	// This method can be used to get download urls for multiple objects.
	// The order of the returned urls will be the same as the order of the object
	// ids in the request.
	GetDownloadLinksBatch(context.Context, *GetDownloadLinksBatchRequest) (*GetDownloadLinksBatchResponse, error)
	// CreateDownloadLinksStream
	//
	// Status: BETA
	//
	// Creates a stream of objects and presigned links based on the provided query
	// This can be used retrieve a large number of Objects as a stream that would
	// otherwise cause issues with the connection
	CreateDownloadLinksStream(*CreateDownloadLinksStreamRequest, ObjectService_CreateDownloadLinksStreamServer) error
	// FinishObjectStaging
	//
	// Status: STABLE
	//
	// This method completes the staging of an object.
	FinishObjectStaging(context.Context, *FinishObjectStagingRequest) (*FinishObjectStagingResponse, error)
	// UpdateObject
	//
	// Status: STABLE
	//
	// Objects are immutable!
	// Updating an object will create a new revision for the object
	// This method will put the new revision in a staging area.
	// Staged objects will get a separate staging id and need to be finished
	// before they can be used.
	UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error)
	// CreateObjectReference
	//
	// Status: STABLE
	//
	// Creates a new reference of this object in another collection
	CreateObjectReference(context.Context, *CreateObjectReferenceRequest) (*CreateObjectReferenceResponse, error)
	// CloneObject
	//
	// Status: STABLE
	//
	// This method clones an object and creates a copy in the same collection.
	// This copy has a new id and revision and will not receive any updates from
	// the original object.
	CloneObject(context.Context, *CloneObjectRequest) (*CloneObjectResponse, error)
	// DeleteObject
	//
	// Status: STABLE
	//
	// Deletes the object with the complete revision history.
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	// DeleteObjects
	//
	// Status: STABLE
	//
	// Deletes multiple objects at once.
	DeleteObjects(context.Context, *DeleteObjectsRequest) (*DeleteObjectsResponse, error)
	// GetObjectByID
	//
	// Status: STABLE
	//
	// gets a specific Object by ID that is associated to the
	// current collection By default only the latest revision of an object will be
	// returned Specify a revision_number to select an older revision With the
	// optional with_url boolean a download link can automatically be requested
	GetObjectByID(context.Context, *GetObjectByIDRequest) (*GetObjectByIDResponse, error)
	// GetObjects
	//
	// Status: STABLE
	//
	// GetObjects returns a (paginated) list of objects in a specific collection
	// By default only the latest revisions of all objects will be shown
	// This behaviour can be changed with the include_history flag
	// With the optional with_url boolean a download link can automatically be
	// requested for each Object This request contains a LabelOrIDQuery message,
	// this is either a list of request ObjectIDs or a query filtered by Labels
	GetObjects(context.Context, *GetObjectsRequest) (*GetObjectsResponse, error)
	// GetObjectRevisions
	//
	// Status: STABLE
	//
	// This returns the full list of revisions of a specified object
	// With the optional with_url boolean a download link can automatically be
	// requested for each Object This is by default a paginated request
	GetObjectRevisions(context.Context, *GetObjectRevisionsRequest) (*GetObjectRevisionsResponse, error)
	// GetLatestObjectRevision
	//
	// Status: STABLE
	//
	// This returns the latest revision of a specific object
	// The returned `latest` object will have a different id if the current
	// object is not the latest revision
	GetLatestObjectRevision(context.Context, *GetLatestObjectRevisionRequest) (*GetLatestObjectRevisionResponse, error)
	// GetObjectEndpoints
	//
	// Status: BETA
	//
	// This returns a list of endpoints
	// One endpoint will be the "default" endpoint
	GetObjectEndpoints(context.Context, *GetObjectEndpointsRequest) (*GetObjectEndpointsResponse, error)
	// AddLabelsToObject
	//
	// Status: STABLE
	//
	// This is a specific request to add new label(s)
	// to an existing object, in contrast to UpdateObject
	// this will not create a new object in the staging area
	// Instead it will directly add the specified label(s) to the object
	AddLabelsToObject(context.Context, *AddLabelsToObjectRequest) (*AddLabelsToObjectResponse, error)
	// SetHooksOfObject
	//
	// Status: BETA
	//
	// This is a specific request to update the complete list
	// of hooks for a specific object. This will not update the object
	// and create a new id, instead it will overwrite all hooks of the existing
	// object.
	SetHooksOfObject(context.Context, *SetHooksOfObjectRequest) (*SetHooksOfObjectResponse, error)
	// GetReferences
	//
	// Status: STABLE
	//
	// Get a list of references for this object (optional) including all revisions
	GetReferences(context.Context, *GetReferencesRequest) (*GetReferencesResponse, error)
	// GetObjectPath
	//
	// Status: BETA
	//
	// Get all object_paths for this object in a specific collection
	// !! Paths are collection specific !!
	GetObjectPath(context.Context, *GetObjectPathRequest) (*GetObjectPathResponse, error)
	// GetObjectPaths
	//
	// Status: BETA
	//
	// Get all object_paths for a specific collection
	// !! Paths are collection specific !!
	GetObjectPaths(context.Context, *GetObjectPathsRequest) (*GetObjectPathsResponse, error)
	// CreateObjectPath
	//
	// Status: BETA
	//
	// Create collection_specific object_paths for an object
	// !! Paths are collection specific !!
	CreateObjectPath(context.Context, *CreateObjectPathRequest) (*CreateObjectPathResponse, error)
	// SetObjectPathVisibility
	//
	// Status: BETA
	//
	// Updates the visibility setting for an object_path (hide/unhide)
	// !! Paths are collection specific !!
	SetObjectPathVisibility(context.Context, *SetObjectPathVisibilityRequest) (*SetObjectPathVisibilityResponse, error)
	// GetObjectsByPath
	//
	// Status: BETA
	//
	// Gets a specific object by object_path
	// !! Paths are collection specific !!
	GetObjectsByPath(context.Context, *GetObjectsByPathRequest) (*GetObjectsByPathResponse, error)
	// GetProjectCollectionIdsByPath
	//
	// Status: BETA
	//
	// Gets a specific project and collection_id by object_path
	// !! Paths are collection specific !!
	GetProjectCollectionIdsByPath(context.Context, *GetProjectCollectionIdsByPathRequest) (*GetProjectCollectionIdsByPathResponse, error)
	// GetObjectsAsListV2
	//
	// Status: ALPHA
	//
	// Gets a list of objects represented similar to a S3 ListObjectsV2 request
	// !! Paths are collection specific !!
	GetObjectsAsListV2(context.Context, *GetObjectsAsListV2Request) (*GetObjectsAsListV2Response, error)
}

// UnimplementedObjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectServiceServer struct {
}

func (UnimplementedObjectServiceServer) InitializeNewObject(context.Context, *InitializeNewObjectRequest) (*InitializeNewObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeNewObject not implemented")
}
func (UnimplementedObjectServiceServer) GetUploadURL(context.Context, *GetUploadURLRequest) (*GetUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadURL not implemented")
}
func (UnimplementedObjectServiceServer) GetDownloadURL(context.Context, *GetDownloadURLRequest) (*GetDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadURL not implemented")
}
func (UnimplementedObjectServiceServer) GetDownloadLinksBatch(context.Context, *GetDownloadLinksBatchRequest) (*GetDownloadLinksBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadLinksBatch not implemented")
}
func (UnimplementedObjectServiceServer) CreateDownloadLinksStream(*CreateDownloadLinksStreamRequest, ObjectService_CreateDownloadLinksStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateDownloadLinksStream not implemented")
}
func (UnimplementedObjectServiceServer) FinishObjectStaging(context.Context, *FinishObjectStagingRequest) (*FinishObjectStagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishObjectStaging not implemented")
}
func (UnimplementedObjectServiceServer) UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedObjectServiceServer) CreateObjectReference(context.Context, *CreateObjectReferenceRequest) (*CreateObjectReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectReference not implemented")
}
func (UnimplementedObjectServiceServer) CloneObject(context.Context, *CloneObjectRequest) (*CloneObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneObject not implemented")
}
func (UnimplementedObjectServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectServiceServer) DeleteObjects(context.Context, *DeleteObjectsRequest) (*DeleteObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjects not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectByID(context.Context, *GetObjectByIDRequest) (*GetObjectByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectByID not implemented")
}
func (UnimplementedObjectServiceServer) GetObjects(context.Context, *GetObjectsRequest) (*GetObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjects not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectRevisions(context.Context, *GetObjectRevisionsRequest) (*GetObjectRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectRevisions not implemented")
}
func (UnimplementedObjectServiceServer) GetLatestObjectRevision(context.Context, *GetLatestObjectRevisionRequest) (*GetLatestObjectRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestObjectRevision not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectEndpoints(context.Context, *GetObjectEndpointsRequest) (*GetObjectEndpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectEndpoints not implemented")
}
func (UnimplementedObjectServiceServer) AddLabelsToObject(context.Context, *AddLabelsToObjectRequest) (*AddLabelsToObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabelsToObject not implemented")
}
func (UnimplementedObjectServiceServer) SetHooksOfObject(context.Context, *SetHooksOfObjectRequest) (*SetHooksOfObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHooksOfObject not implemented")
}
func (UnimplementedObjectServiceServer) GetReferences(context.Context, *GetReferencesRequest) (*GetReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferences not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectPath(context.Context, *GetObjectPathRequest) (*GetObjectPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectPath not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectPaths(context.Context, *GetObjectPathsRequest) (*GetObjectPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectPaths not implemented")
}
func (UnimplementedObjectServiceServer) CreateObjectPath(context.Context, *CreateObjectPathRequest) (*CreateObjectPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectPath not implemented")
}
func (UnimplementedObjectServiceServer) SetObjectPathVisibility(context.Context, *SetObjectPathVisibilityRequest) (*SetObjectPathVisibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetObjectPathVisibility not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectsByPath(context.Context, *GetObjectsByPathRequest) (*GetObjectsByPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByPath not implemented")
}
func (UnimplementedObjectServiceServer) GetProjectCollectionIdsByPath(context.Context, *GetProjectCollectionIdsByPathRequest) (*GetProjectCollectionIdsByPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectCollectionIdsByPath not implemented")
}
func (UnimplementedObjectServiceServer) GetObjectsAsListV2(context.Context, *GetObjectsAsListV2Request) (*GetObjectsAsListV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsAsListV2 not implemented")
}

// UnsafeObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectServiceServer will
// result in compilation errors.
type UnsafeObjectServiceServer interface {
	mustEmbedUnimplementedObjectServiceServer()
}

func RegisterObjectServiceServer(s grpc.ServiceRegistrar, srv ObjectServiceServer) {
	s.RegisterService(&ObjectService_ServiceDesc, srv)
}

func _ObjectService_InitializeNewObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeNewObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).InitializeNewObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/InitializeNewObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).InitializeNewObject(ctx, req.(*InitializeNewObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetUploadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetUploadURL(ctx, req.(*GetUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetDownloadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetDownloadURL(ctx, req.(*GetDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetDownloadLinksBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadLinksBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetDownloadLinksBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetDownloadLinksBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetDownloadLinksBatch(ctx, req.(*GetDownloadLinksBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CreateDownloadLinksStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateDownloadLinksStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectServiceServer).CreateDownloadLinksStream(m, &objectServiceCreateDownloadLinksStreamServer{stream})
}

type ObjectService_CreateDownloadLinksStreamServer interface {
	Send(*CreateDownloadLinksStreamResponse) error
	grpc.ServerStream
}

type objectServiceCreateDownloadLinksStreamServer struct {
	grpc.ServerStream
}

func (x *objectServiceCreateDownloadLinksStreamServer) Send(m *CreateDownloadLinksStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectService_FinishObjectStaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishObjectStagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).FinishObjectStaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/FinishObjectStaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).FinishObjectStaging(ctx, req.(*FinishObjectStagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/UpdateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).UpdateObject(ctx, req.(*UpdateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CreateObjectReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CreateObjectReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/CreateObjectReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CreateObjectReference(ctx, req.(*CreateObjectReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CloneObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CloneObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/CloneObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CloneObject(ctx, req.(*CloneObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_DeleteObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).DeleteObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/DeleteObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).DeleteObjects(ctx, req.(*DeleteObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjectByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectByID(ctx, req.(*GetObjectByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjects(ctx, req.(*GetObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjectRevisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectRevisions(ctx, req.(*GetObjectRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetLatestObjectRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestObjectRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetLatestObjectRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetLatestObjectRevision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetLatestObjectRevision(ctx, req.(*GetLatestObjectRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectEndpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjectEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectEndpoints(ctx, req.(*GetObjectEndpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_AddLabelsToObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLabelsToObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).AddLabelsToObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/AddLabelsToObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).AddLabelsToObject(ctx, req.(*AddLabelsToObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_SetHooksOfObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHooksOfObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).SetHooksOfObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/SetHooksOfObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).SetHooksOfObject(ctx, req.(*SetHooksOfObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetReferences(ctx, req.(*GetReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjectPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectPath(ctx, req.(*GetObjectPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjectPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectPaths(ctx, req.(*GetObjectPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_CreateObjectPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).CreateObjectPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/CreateObjectPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).CreateObjectPath(ctx, req.(*CreateObjectPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_SetObjectPathVisibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetObjectPathVisibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).SetObjectPathVisibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/SetObjectPathVisibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).SetObjectPathVisibility(ctx, req.(*SetObjectPathVisibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectsByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectsByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjectsByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectsByPath(ctx, req.(*GetObjectsByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetProjectCollectionIdsByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectCollectionIdsByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetProjectCollectionIdsByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetProjectCollectionIdsByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetProjectCollectionIdsByPath(ctx, req.(*GetProjectCollectionIdsByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectService_GetObjectsAsListV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectsAsListV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectServiceServer).GetObjectsAsListV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.storage.services.v1.ObjectService/GetObjectsAsListV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectServiceServer).GetObjectsAsListV2(ctx, req.(*GetObjectsAsListV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectService_ServiceDesc is the grpc.ServiceDesc for ObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.storage.services.v1.ObjectService",
	HandlerType: (*ObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeNewObject",
			Handler:    _ObjectService_InitializeNewObject_Handler,
		},
		{
			MethodName: "GetUploadURL",
			Handler:    _ObjectService_GetUploadURL_Handler,
		},
		{
			MethodName: "GetDownloadURL",
			Handler:    _ObjectService_GetDownloadURL_Handler,
		},
		{
			MethodName: "GetDownloadLinksBatch",
			Handler:    _ObjectService_GetDownloadLinksBatch_Handler,
		},
		{
			MethodName: "FinishObjectStaging",
			Handler:    _ObjectService_FinishObjectStaging_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _ObjectService_UpdateObject_Handler,
		},
		{
			MethodName: "CreateObjectReference",
			Handler:    _ObjectService_CreateObjectReference_Handler,
		},
		{
			MethodName: "CloneObject",
			Handler:    _ObjectService_CloneObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectService_DeleteObject_Handler,
		},
		{
			MethodName: "DeleteObjects",
			Handler:    _ObjectService_DeleteObjects_Handler,
		},
		{
			MethodName: "GetObjectByID",
			Handler:    _ObjectService_GetObjectByID_Handler,
		},
		{
			MethodName: "GetObjects",
			Handler:    _ObjectService_GetObjects_Handler,
		},
		{
			MethodName: "GetObjectRevisions",
			Handler:    _ObjectService_GetObjectRevisions_Handler,
		},
		{
			MethodName: "GetLatestObjectRevision",
			Handler:    _ObjectService_GetLatestObjectRevision_Handler,
		},
		{
			MethodName: "GetObjectEndpoints",
			Handler:    _ObjectService_GetObjectEndpoints_Handler,
		},
		{
			MethodName: "AddLabelsToObject",
			Handler:    _ObjectService_AddLabelsToObject_Handler,
		},
		{
			MethodName: "SetHooksOfObject",
			Handler:    _ObjectService_SetHooksOfObject_Handler,
		},
		{
			MethodName: "GetReferences",
			Handler:    _ObjectService_GetReferences_Handler,
		},
		{
			MethodName: "GetObjectPath",
			Handler:    _ObjectService_GetObjectPath_Handler,
		},
		{
			MethodName: "GetObjectPaths",
			Handler:    _ObjectService_GetObjectPaths_Handler,
		},
		{
			MethodName: "CreateObjectPath",
			Handler:    _ObjectService_CreateObjectPath_Handler,
		},
		{
			MethodName: "SetObjectPathVisibility",
			Handler:    _ObjectService_SetObjectPathVisibility_Handler,
		},
		{
			MethodName: "GetObjectsByPath",
			Handler:    _ObjectService_GetObjectsByPath_Handler,
		},
		{
			MethodName: "GetProjectCollectionIdsByPath",
			Handler:    _ObjectService_GetProjectCollectionIdsByPath_Handler,
		},
		{
			MethodName: "GetObjectsAsListV2",
			Handler:    _ObjectService_GetObjectsAsListV2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateDownloadLinksStream",
			Handler:       _ObjectService_CreateDownloadLinksStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aruna/api/storage/services/v1/object_service.proto",
}
