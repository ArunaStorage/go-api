// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: aruna/api/storage/models/v1/models.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An arbitrary status for Objects
type Status int32

const (
	Status_STATUS_UNSPECIFIED  Status = 0
	Status_STATUS_INITIALIZING Status = 1
	Status_STATUS_AVAILABLE    Status = 2
	Status_STATUS_UNAVAILABLE  Status = 3
	Status_STATUS_ERROR        Status = 4
	Status_STATUS_TRASH        Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_INITIALIZING",
		2: "STATUS_AVAILABLE",
		3: "STATUS_UNAVAILABLE",
		4: "STATUS_ERROR",
		5: "STATUS_TRASH",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED":  0,
		"STATUS_INITIALIZING": 1,
		"STATUS_AVAILABLE":    2,
		"STATUS_UNAVAILABLE":  3,
		"STATUS_ERROR":        4,
		"STATUS_TRASH":        5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_aruna_api_storage_models_v1_models_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_aruna_api_storage_models_v1_models_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{0}
}

type Hashalgorithm int32

const (
	Hashalgorithm_HASHALGORITHM_UNSPECIFIED Hashalgorithm = 0
	Hashalgorithm_HASHALGORITHM_MD5         Hashalgorithm = 1
	Hashalgorithm_HASHALGORITHM_SHA1        Hashalgorithm = 2
	Hashalgorithm_HASHALGORITHM_SHA256      Hashalgorithm = 3
	Hashalgorithm_HASHALGORITHM_SHA512      Hashalgorithm = 4
	Hashalgorithm_HASHALGORITHM_MURMUR3A32  Hashalgorithm = 5
	Hashalgorithm_HASHALGORITHM_XXHASH32    Hashalgorithm = 6
)

// Enum value maps for Hashalgorithm.
var (
	Hashalgorithm_name = map[int32]string{
		0: "HASHALGORITHM_UNSPECIFIED",
		1: "HASHALGORITHM_MD5",
		2: "HASHALGORITHM_SHA1",
		3: "HASHALGORITHM_SHA256",
		4: "HASHALGORITHM_SHA512",
		5: "HASHALGORITHM_MURMUR3A32",
		6: "HASHALGORITHM_XXHASH32",
	}
	Hashalgorithm_value = map[string]int32{
		"HASHALGORITHM_UNSPECIFIED": 0,
		"HASHALGORITHM_MD5":         1,
		"HASHALGORITHM_SHA1":        2,
		"HASHALGORITHM_SHA256":      3,
		"HASHALGORITHM_SHA512":      4,
		"HASHALGORITHM_MURMUR3A32":  5,
		"HASHALGORITHM_XXHASH32":    6,
	}
)

func (x Hashalgorithm) Enum() *Hashalgorithm {
	p := new(Hashalgorithm)
	*p = x
	return p
}

func (x Hashalgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hashalgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_aruna_api_storage_models_v1_models_proto_enumTypes[1].Descriptor()
}

func (Hashalgorithm) Type() protoreflect.EnumType {
	return &file_aruna_api_storage_models_v1_models_proto_enumTypes[1]
}

func (x Hashalgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hashalgorithm.Descriptor instead.
func (Hashalgorithm) EnumDescriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{1}
}

// Specifies the Origin of the object
type OriginType int32

const (
	OriginType_ORIGIN_TYPE_UNSPECIFIED OriginType = 0
	OriginType_ORIGIN_TYPE_USER        OriginType = 1 // User uploaded the object
	OriginType_ORIGIN_TYPE_OBJCLONE    OriginType = 2 // Object was cloned from another object
)

// Enum value maps for OriginType.
var (
	OriginType_name = map[int32]string{
		0: "ORIGIN_TYPE_UNSPECIFIED",
		1: "ORIGIN_TYPE_USER",
		2: "ORIGIN_TYPE_OBJCLONE",
	}
	OriginType_value = map[string]int32{
		"ORIGIN_TYPE_UNSPECIFIED": 0,
		"ORIGIN_TYPE_USER":        1,
		"ORIGIN_TYPE_OBJCLONE":    2,
	}
)

func (x OriginType) Enum() *OriginType {
	p := new(OriginType)
	*p = x
	return p
}

func (x OriginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginType) Descriptor() protoreflect.EnumDescriptor {
	return file_aruna_api_storage_models_v1_models_proto_enumTypes[2].Descriptor()
}

func (OriginType) Type() protoreflect.EnumType {
	return &file_aruna_api_storage_models_v1_models_proto_enumTypes[2]
}

func (x OriginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginType.Descriptor instead.
func (OriginType) EnumDescriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{2}
}

// Dataclass defines the confidentiality of the object
type DataClass int32

const (
	DataClass_DATA_CLASS_UNSPECIFIED  DataClass = 0
	DataClass_DATA_CLASS_PUBLIC       DataClass = 1
	DataClass_DATA_CLASS_PRIVATE      DataClass = 2
	DataClass_DATA_CLASS_CONFIDENTIAL DataClass = 3
	DataClass_DATA_CLASS_PROTECTED    DataClass = 4
)

// Enum value maps for DataClass.
var (
	DataClass_name = map[int32]string{
		0: "DATA_CLASS_UNSPECIFIED",
		1: "DATA_CLASS_PUBLIC",
		2: "DATA_CLASS_PRIVATE",
		3: "DATA_CLASS_CONFIDENTIAL",
		4: "DATA_CLASS_PROTECTED",
	}
	DataClass_value = map[string]int32{
		"DATA_CLASS_UNSPECIFIED":  0,
		"DATA_CLASS_PUBLIC":       1,
		"DATA_CLASS_PRIVATE":      2,
		"DATA_CLASS_CONFIDENTIAL": 3,
		"DATA_CLASS_PROTECTED":    4,
	}
)

func (x DataClass) Enum() *DataClass {
	p := new(DataClass)
	*p = x
	return p
}

func (x DataClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataClass) Descriptor() protoreflect.EnumDescriptor {
	return file_aruna_api_storage_models_v1_models_proto_enumTypes[3].Descriptor()
}

func (DataClass) Type() protoreflect.EnumType {
	return &file_aruna_api_storage_models_v1_models_proto_enumTypes[3]
}

func (x DataClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataClass.Descriptor instead.
func (DataClass) EnumDescriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{3}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNSPECIFIED SourceType = 0
	SourceType_SOURCE_TYPE_URL         SourceType = 1
	SourceType_SOURCE_TYPE_DOI         SourceType = 2
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "SOURCE_TYPE_URL",
		2: "SOURCE_TYPE_DOI",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"SOURCE_TYPE_URL":         1,
		"SOURCE_TYPE_DOI":         2,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_aruna_api_storage_models_v1_models_proto_enumTypes[4].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_aruna_api_storage_models_v1_models_proto_enumTypes[4]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{4}
}

type EndpointType int32

const (
	EndpointType_ENDPOINT_TYPE_UNSPECIFIED EndpointType = 0
	EndpointType_ENDPOINT_TYPE_S3          EndpointType = 1
	EndpointType_ENDPOINT_TYPE_FILE        EndpointType = 2
)

// Enum value maps for EndpointType.
var (
	EndpointType_name = map[int32]string{
		0: "ENDPOINT_TYPE_UNSPECIFIED",
		1: "ENDPOINT_TYPE_S3",
		2: "ENDPOINT_TYPE_FILE",
	}
	EndpointType_value = map[string]int32{
		"ENDPOINT_TYPE_UNSPECIFIED": 0,
		"ENDPOINT_TYPE_S3":          1,
		"ENDPOINT_TYPE_FILE":        2,
	}
)

func (x EndpointType) Enum() *EndpointType {
	p := new(EndpointType)
	*p = x
	return p
}

func (x EndpointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointType) Descriptor() protoreflect.EnumDescriptor {
	return file_aruna_api_storage_models_v1_models_proto_enumTypes[5].Descriptor()
}

func (EndpointType) Type() protoreflect.EnumType {
	return &file_aruna_api_storage_models_v1_models_proto_enumTypes[5]
}

func (x EndpointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointType.Descriptor instead.
func (EndpointType) EnumDescriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{5}
}

// A key value pair for hooks and labels
type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{0}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LabelOntology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These are the keys for labels that are required for the collection
	// Adding an Object without these keys will result in an error
	// Defaults to empty string if not specified
	RequiredLabelKeys []string `protobuf:"bytes,1,rep,name=required_label_keys,json=requiredLabelKeys,proto3" json:"required_label_keys,omitempty"`
}

func (x *LabelOntology) Reset() {
	*x = LabelOntology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelOntology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelOntology) ProtoMessage() {}

func (x *LabelOntology) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelOntology.ProtoReflect.Descriptor instead.
func (*LabelOntology) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{1}
}

func (x *LabelOntology) GetRequiredLabelKeys() []string {
	if x != nil {
		return x.RequiredLabelKeys
	}
	return nil
}

// Stats for a set of objects
type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	AccSize int64 `protobuf:"varint,2,opt,name=acc_size,json=accSize,proto3" json:"acc_size,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{2}
}

func (x *Stats) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Stats) GetAccSize() int64 {
	if x != nil {
		return x.AccSize
	}
	return 0
}

// Stats for a collection
type CollectionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectStats      *Stats                 `protobuf:"bytes,1,opt,name=object_stats,json=objectStats,proto3" json:"object_stats,omitempty"`
	ObjectGroupCount int64                  `protobuf:"varint,2,opt,name=object_group_count,json=objectGroupCount,proto3" json:"object_group_count,omitempty"`
	LastUpdated      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *CollectionStats) Reset() {
	*x = CollectionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionStats) ProtoMessage() {}

func (x *CollectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionStats.ProtoReflect.Descriptor instead.
func (*CollectionStats) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{3}
}

func (x *CollectionStats) GetObjectStats() *Stats {
	if x != nil {
		return x.ObjectStats
	}
	return nil
}

func (x *CollectionStats) GetObjectGroupCount() int64 {
	if x != nil {
		return x.ObjectGroupCount
	}
	return 0
}

func (x *CollectionStats) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

// Stats for an object group
type ObjectGroupStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectStats *Stats                 `protobuf:"bytes,1,opt,name=object_stats,json=objectStats,proto3" json:"object_stats,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *ObjectGroupStats) Reset() {
	*x = ObjectGroupStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGroupStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGroupStats) ProtoMessage() {}

func (x *ObjectGroupStats) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGroupStats.ProtoReflect.Descriptor instead.
func (*ObjectGroupStats) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{4}
}

func (x *ObjectGroupStats) GetObjectStats() *Stats {
	if x != nil {
		return x.ObjectStats
	}
	return nil
}

func (x *ObjectGroupStats) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

// Semver version -> Alpha Beta release are not supported -> Use "latest" for
// mutable collections that are in development
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major int32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor int32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch int32 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{5}
}

func (x *Version) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *Version) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *Version) GetPatch() int32 {
	if x != nil {
		return x.Patch
	}
	return 0
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alg  Hashalgorithm `protobuf:"varint,1,opt,name=alg,proto3,enum=aruna.api.storage.models.v1.Hashalgorithm" json:"alg,omitempty"`
	Hash string        `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{6}
}

func (x *Hash) GetAlg() Hashalgorithm {
	if x != nil {
		return x.Alg
	}
	return Hashalgorithm_HASHALGORITHM_UNSPECIFIED
}

func (x *Hash) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// Origin of the object -> To be GDPA compliant
type Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type OriginType `protobuf:"varint,1,opt,name=type,proto3,enum=aruna.api.storage.models.v1.OriginType" json:"type,omitempty"`
	Id   string     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Origin) Reset() {
	*x = Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{7}
}

func (x *Origin) GetType() OriginType {
	if x != nil {
		return x.Type
	}
	return OriginType_ORIGIN_TYPE_UNSPECIFIED
}

func (x *Origin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is a URL / DOI
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Either URL oder DOI
	SourceType SourceType `protobuf:"varint,2,opt,name=source_type,json=sourceType,proto3,enum=aruna.api.storage.models.v1.SourceType" json:"source_type,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{8}
}

func (x *Source) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Source) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EpType            EndpointType `protobuf:"varint,2,opt,name=ep_type,json=epType,proto3,enum=aruna.api.storage.models.v1.EndpointType" json:"ep_type,omitempty"`
	Name              string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ProxyHostname     string       `protobuf:"bytes,4,opt,name=proxy_hostname,json=proxyHostname,proto3" json:"proxy_hostname,omitempty"`
	InternalHostname  string       `protobuf:"bytes,5,opt,name=internal_hostname,json=internalHostname,proto3" json:"internal_hostname,omitempty"`
	DocumentationPath string       `protobuf:"bytes,6,opt,name=documentation_path,json=documentationPath,proto3" json:"documentation_path,omitempty"`
	IsPublic          bool         `protobuf:"varint,7,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	IsDefault         bool         `protobuf:"varint,8,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{9}
}

func (x *Endpoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Endpoint) GetEpType() EndpointType {
	if x != nil {
		return x.EpType
	}
	return EndpointType_ENDPOINT_TYPE_UNSPECIFIED
}

func (x *Endpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Endpoint) GetProxyHostname() string {
	if x != nil {
		return x.ProxyHostname
	}
	return ""
}

func (x *Endpoint) GetInternalHostname() string {
	if x != nil {
		return x.InternalHostname
	}
	return ""
}

func (x *Endpoint) GetDocumentationPath() string {
	if x != nil {
		return x.DocumentationPath
	}
	return ""
}

func (x *Endpoint) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Endpoint) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // ObjectID
	Filename   string                 `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"` // Filename: Name of the original file e.g.: mydata.json
	Labels     []*KeyValue            `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`     // Labels to additionally describe the object
	Hooks      []*KeyValue            `protobuf:"bytes,5,rep,name=hooks,proto3" json:"hooks,omitempty"`       // Hooks to be executed on the object
	Created    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	ContentLen int64                  `protobuf:"varint,7,opt,name=content_len,json=contentLen,proto3" json:"content_len,omitempty"` // Lenght of the stored dataset
	Status     Status                 `protobuf:"varint,8,opt,name=status,proto3,enum=aruna.api.storage.models.v1.Status" json:"status,omitempty"`
	Origin     *Origin                `protobuf:"bytes,9,opt,name=origin,proto3" json:"origin,omitempty"`                                                                     // Origin of the object
	DataClass  DataClass              `protobuf:"varint,10,opt,name=data_class,json=dataClass,proto3,enum=aruna.api.storage.models.v1.DataClass" json:"data_class,omitempty"` // Confidentiality of the object
	Hash       *Hash                  `protobuf:"bytes,11,opt,name=hash,proto3" json:"hash,omitempty"`                                                                        // MD5 hash of the data
	RevNumber  int64                  `protobuf:"varint,12,opt,name=rev_number,json=revNumber,proto3" json:"rev_number,omitempty"`                                            // Increasing revion number for each update
	Source     *Source                `protobuf:"bytes,13,opt,name=source,proto3" json:"source,omitempty"`                                                                    // External source where this data originates from
	Latest     bool                   `protobuf:"varint,14,opt,name=latest,proto3" json:"latest,omitempty"`                                                                   // Is this the latest version of the object?
	// This is a collection specific attribute
	// Must be false if collection is immutable
	AutoUpdate bool `protobuf:"varint,15,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"` // If true, the object will be updated automatically
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{10}
}

func (x *Object) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Object) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Object) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Object) GetHooks() []*KeyValue {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *Object) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Object) GetContentLen() int64 {
	if x != nil {
		return x.ContentLen
	}
	return 0
}

func (x *Object) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *Object) GetOrigin() *Origin {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Object) GetDataClass() DataClass {
	if x != nil {
		return x.DataClass
	}
	return DataClass_DATA_CLASS_UNSPECIFIED
}

func (x *Object) GetHash() *Hash {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Object) GetRevNumber() int64 {
	if x != nil {
		return x.RevNumber
	}
	return 0
}

func (x *Object) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Object) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

func (x *Object) GetAutoUpdate() bool {
	if x != nil {
		return x.AutoUpdate
	}
	return false
}

// Multiple Objects
type Objects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *Objects) Reset() {
	*x = Objects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Objects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Objects) ProtoMessage() {}

func (x *Objects) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Objects.ProtoReflect.Descriptor instead.
func (*Objects) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{11}
}

func (x *Objects) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

// ObjectGroups are optional and can be used to group objects in a collection
// together They need to refer to objects in the same collection Objectgroups
// can be changed if the collection is mutable
type ObjectGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels      []*KeyValue       `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	Hooks       []*KeyValue       `protobuf:"bytes,7,rep,name=hooks,proto3" json:"hooks,omitempty"`
	Objects     []*Object         `protobuf:"bytes,8,rep,name=objects,proto3" json:"objects,omitempty"`                            // Must be in collection objects
	MetaObjects []*Object         `protobuf:"bytes,9,rep,name=meta_objects,json=metaObjects,proto3" json:"meta_objects,omitempty"` // Must be in collection objects
	Stats       *ObjectGroupStats `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	RevNumber   int64             `protobuf:"varint,11,opt,name=rev_number,json=revNumber,proto3" json:"rev_number,omitempty"`
}

func (x *ObjectGroup) Reset() {
	*x = ObjectGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGroup) ProtoMessage() {}

func (x *ObjectGroup) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGroup.ProtoReflect.Descriptor instead.
func (*ObjectGroup) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{12}
}

func (x *ObjectGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectGroup) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectGroup) GetHooks() []*KeyValue {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *ObjectGroup) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ObjectGroup) GetMetaObjects() []*Object {
	if x != nil {
		return x.MetaObjects
	}
	return nil
}

func (x *ObjectGroup) GetStats() *ObjectGroupStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ObjectGroup) GetRevNumber() int64 {
	if x != nil {
		return x.RevNumber
	}
	return 0
}

// Multiple ObjectGroups
type ObjectGroups struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectGroups []*ObjectGroup `protobuf:"bytes,1,rep,name=object_groups,json=objectGroups,proto3" json:"object_groups,omitempty"`
}

func (x *ObjectGroups) Reset() {
	*x = ObjectGroups{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGroups) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGroups) ProtoMessage() {}

func (x *ObjectGroups) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGroups.ProtoReflect.Descriptor instead.
func (*ObjectGroups) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{13}
}

func (x *ObjectGroups) GetObjectGroups() []*ObjectGroup {
	if x != nil {
		return x.ObjectGroups
	}
	return nil
}

// This is a representation of the ObjectGroup without the recursive nature of
// object references
type ObjectGroupOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels      []*KeyValue       `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	Hooks       []*KeyValue       `protobuf:"bytes,7,rep,name=hooks,proto3" json:"hooks,omitempty"`
	Stats       *ObjectGroupStats `protobuf:"bytes,8,opt,name=stats,proto3" json:"stats,omitempty"`
	RevNumber   int64             `protobuf:"varint,9,opt,name=rev_number,json=revNumber,proto3" json:"rev_number,omitempty"`
}

func (x *ObjectGroupOverview) Reset() {
	*x = ObjectGroupOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGroupOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGroupOverview) ProtoMessage() {}

func (x *ObjectGroupOverview) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGroupOverview.ProtoReflect.Descriptor instead.
func (*ObjectGroupOverview) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{14}
}

func (x *ObjectGroupOverview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectGroupOverview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectGroupOverview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectGroupOverview) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectGroupOverview) GetHooks() []*KeyValue {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *ObjectGroupOverview) GetStats() *ObjectGroupStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ObjectGroupOverview) GetRevNumber() int64 {
	if x != nil {
		return x.RevNumber
	}
	return 0
}

// Multiple ObjectGroupOverviews
type ObjectGroupOverviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectGroupOverviews []*ObjectGroupOverview `protobuf:"bytes,1,rep,name=object_group_overviews,json=objectGroupOverviews,proto3" json:"object_group_overviews,omitempty"`
}

func (x *ObjectGroupOverviews) Reset() {
	*x = ObjectGroupOverviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGroupOverviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGroupOverviews) ProtoMessage() {}

func (x *ObjectGroupOverviews) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGroupOverviews.ProtoReflect.Descriptor instead.
func (*ObjectGroupOverviews) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{15}
}

func (x *ObjectGroupOverviews) GetObjectGroupOverviews() []*ObjectGroupOverview {
	if x != nil {
		return x.ObjectGroupOverviews
	}
	return nil
}

// This is a representation of the ObjectGroup with only ObjectIDs instead of
// full objects
type ObjectGroupWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels        []*KeyValue       `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	Hooks         []*KeyValue       `protobuf:"bytes,7,rep,name=hooks,proto3" json:"hooks,omitempty"`
	ObjectIds     []string          `protobuf:"bytes,8,rep,name=object_ids,json=objectIds,proto3" json:"object_ids,omitempty"`               // Must be in collection objects
	MetaObjectIds []string          `protobuf:"bytes,9,rep,name=meta_object_ids,json=metaObjectIds,proto3" json:"meta_object_ids,omitempty"` // Must be in collection objects
	Stats         *ObjectGroupStats `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	RevNumber     int64             `protobuf:"varint,11,opt,name=rev_number,json=revNumber,proto3" json:"rev_number,omitempty"`
}

func (x *ObjectGroupWithID) Reset() {
	*x = ObjectGroupWithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGroupWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGroupWithID) ProtoMessage() {}

func (x *ObjectGroupWithID) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGroupWithID.ProtoReflect.Descriptor instead.
func (*ObjectGroupWithID) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{16}
}

func (x *ObjectGroupWithID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ObjectGroupWithID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectGroupWithID) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObjectGroupWithID) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ObjectGroupWithID) GetHooks() []*KeyValue {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *ObjectGroupWithID) GetObjectIds() []string {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

func (x *ObjectGroupWithID) GetMetaObjectIds() []string {
	if x != nil {
		return x.MetaObjectIds
	}
	return nil
}

func (x *ObjectGroupWithID) GetStats() *ObjectGroupStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ObjectGroupWithID) GetRevNumber() int64 {
	if x != nil {
		return x.RevNumber
	}
	return 0
}

// Multiple ObjectGroupWithIDs
type ObjectGroupWithIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectGroupWithIds []*ObjectGroupWithID `protobuf:"bytes,1,rep,name=object_group_with_ids,json=objectGroupWithIds,proto3" json:"object_group_with_ids,omitempty"`
}

func (x *ObjectGroupWithIDs) Reset() {
	*x = ObjectGroupWithIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectGroupWithIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectGroupWithIDs) ProtoMessage() {}

func (x *ObjectGroupWithIDs) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectGroupWithIDs.ProtoReflect.Descriptor instead.
func (*ObjectGroupWithIDs) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{17}
}

func (x *ObjectGroupWithIDs) GetObjectGroupWithIds() []*ObjectGroupWithID {
	if x != nil {
		return x.ObjectGroupWithIds
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Should be unique in authgroup
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels         []*KeyValue            `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Hooks          []*KeyValue            `protobuf:"bytes,5,rep,name=hooks,proto3" json:"hooks,omitempty"`
	LabelOntology  *LabelOntology         `protobuf:"bytes,6,opt,name=label_ontology,json=labelOntology,proto3" json:"label_ontology,omitempty"` // Ontology for labels
	Created        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	Objects        []*Object              `protobuf:"bytes,8,rep,name=objects,proto3" json:"objects,omitempty"`
	Specifications []*Object              `protobuf:"bytes,9,rep,name=specifications,proto3" json:"specifications,omitempty"`
	ObjectGroups   []*ObjectGroup         `protobuf:"bytes,10,rep,name=object_groups,json=objectGroups,proto3" json:"object_groups,omitempty"`
	// Types that are assignable to Version:
	//	*Collection_SemanticVersion
	//	*Collection_Latest
	Version  isCollection_Version `protobuf_oneof:"version"`
	Stats    *CollectionStats     `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
	IsPublic bool                 `protobuf:"varint,15,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{18}
}

func (x *Collection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Collection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Collection) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Collection) GetHooks() []*KeyValue {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *Collection) GetLabelOntology() *LabelOntology {
	if x != nil {
		return x.LabelOntology
	}
	return nil
}

func (x *Collection) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Collection) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *Collection) GetSpecifications() []*Object {
	if x != nil {
		return x.Specifications
	}
	return nil
}

func (x *Collection) GetObjectGroups() []*ObjectGroup {
	if x != nil {
		return x.ObjectGroups
	}
	return nil
}

func (m *Collection) GetVersion() isCollection_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *Collection) GetSemanticVersion() *Version {
	if x, ok := x.GetVersion().(*Collection_SemanticVersion); ok {
		return x.SemanticVersion
	}
	return nil
}

func (x *Collection) GetLatest() bool {
	if x, ok := x.GetVersion().(*Collection_Latest); ok {
		return x.Latest
	}
	return false
}

func (x *Collection) GetStats() *CollectionStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Collection) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type isCollection_Version interface {
	isCollection_Version()
}

type Collection_SemanticVersion struct {
	SemanticVersion *Version `protobuf:"bytes,12,opt,name=semantic_version,json=semanticVersion,proto3,oneof"`
}

type Collection_Latest struct {
	Latest bool `protobuf:"varint,13,opt,name=latest,proto3,oneof"`
}

func (*Collection_SemanticVersion) isCollection_Version() {}

func (*Collection_Latest) isCollection_Version() {}

// Multiple Collections
type Collections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*Collection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
}

func (x *Collections) Reset() {
	*x = Collections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collections) ProtoMessage() {}

func (x *Collections) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collections.ProtoReflect.Descriptor instead.
func (*Collections) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{19}
}

func (x *Collections) GetCollections() []*Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

// This is a representation of the Collection without the recursive nature of
// objectreferences
type CollectionOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels        []*KeyValue            `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Hooks         []*KeyValue            `protobuf:"bytes,5,rep,name=hooks,proto3" json:"hooks,omitempty"`
	LabelOntology *LabelOntology         `protobuf:"bytes,6,opt,name=label_ontology,json=labelOntology,proto3" json:"label_ontology,omitempty"` // Ontology for labels
	Created       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	// Types that are assignable to Version:
	//	*CollectionOverview_SemanticVersion
	//	*CollectionOverview_Latest
	Version  isCollectionOverview_Version `protobuf_oneof:"version"`
	Stats    *CollectionStats             `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
	IsPublic bool                         `protobuf:"varint,15,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *CollectionOverview) Reset() {
	*x = CollectionOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionOverview) ProtoMessage() {}

func (x *CollectionOverview) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionOverview.ProtoReflect.Descriptor instead.
func (*CollectionOverview) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{20}
}

func (x *CollectionOverview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CollectionOverview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectionOverview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CollectionOverview) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CollectionOverview) GetHooks() []*KeyValue {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *CollectionOverview) GetLabelOntology() *LabelOntology {
	if x != nil {
		return x.LabelOntology
	}
	return nil
}

func (x *CollectionOverview) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (m *CollectionOverview) GetVersion() isCollectionOverview_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *CollectionOverview) GetSemanticVersion() *Version {
	if x, ok := x.GetVersion().(*CollectionOverview_SemanticVersion); ok {
		return x.SemanticVersion
	}
	return nil
}

func (x *CollectionOverview) GetLatest() bool {
	if x, ok := x.GetVersion().(*CollectionOverview_Latest); ok {
		return x.Latest
	}
	return false
}

func (x *CollectionOverview) GetStats() *CollectionStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CollectionOverview) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type isCollectionOverview_Version interface {
	isCollectionOverview_Version()
}

type CollectionOverview_SemanticVersion struct {
	SemanticVersion *Version `protobuf:"bytes,12,opt,name=semantic_version,json=semanticVersion,proto3,oneof"`
}

type CollectionOverview_Latest struct {
	Latest bool `protobuf:"varint,13,opt,name=latest,proto3,oneof"`
}

func (*CollectionOverview_SemanticVersion) isCollectionOverview_Version() {}

func (*CollectionOverview_Latest) isCollectionOverview_Version() {}

// Multiple CollectionOverviews
type CollectionOverviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionOverviews []*CollectionOverview `protobuf:"bytes,1,rep,name=collection_overviews,json=collectionOverviews,proto3" json:"collection_overviews,omitempty"`
}

func (x *CollectionOverviews) Reset() {
	*x = CollectionOverviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionOverviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionOverviews) ProtoMessage() {}

func (x *CollectionOverviews) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionOverviews.ProtoReflect.Descriptor instead.
func (*CollectionOverviews) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{21}
}

func (x *CollectionOverviews) GetCollectionOverviews() []*CollectionOverview {
	if x != nil {
		return x.CollectionOverviews
	}
	return nil
}

// This is a representation of the Collection with only Resource RevisionIDs
// instead of full objects
type CollectionWithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels         []*KeyValue            `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty"`
	Hooks          []*KeyValue            `protobuf:"bytes,5,rep,name=hooks,proto3" json:"hooks,omitempty"`
	LabelOntology  *LabelOntology         `protobuf:"bytes,6,opt,name=label_ontology,json=labelOntology,proto3" json:"label_ontology,omitempty"` // Ontology for labels
	Created        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	Objects        []string               `protobuf:"bytes,8,rep,name=objects,proto3" json:"objects,omitempty"`
	Specifications []string               `protobuf:"bytes,9,rep,name=specifications,proto3" json:"specifications,omitempty"`
	ObjectGroups   []string               `protobuf:"bytes,10,rep,name=object_groups,json=objectGroups,proto3" json:"object_groups,omitempty"`
	// Types that are assignable to Version:
	//	*CollectionWithID_SemanticVersion
	//	*CollectionWithID_Latest
	Version  isCollectionWithID_Version `protobuf_oneof:"version"`
	Stats    *CollectionStats           `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
	IsPublic bool                       `protobuf:"varint,15,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *CollectionWithID) Reset() {
	*x = CollectionWithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionWithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionWithID) ProtoMessage() {}

func (x *CollectionWithID) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionWithID.ProtoReflect.Descriptor instead.
func (*CollectionWithID) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{22}
}

func (x *CollectionWithID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CollectionWithID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CollectionWithID) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CollectionWithID) GetLabels() []*KeyValue {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CollectionWithID) GetHooks() []*KeyValue {
	if x != nil {
		return x.Hooks
	}
	return nil
}

func (x *CollectionWithID) GetLabelOntology() *LabelOntology {
	if x != nil {
		return x.LabelOntology
	}
	return nil
}

func (x *CollectionWithID) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CollectionWithID) GetObjects() []string {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *CollectionWithID) GetSpecifications() []string {
	if x != nil {
		return x.Specifications
	}
	return nil
}

func (x *CollectionWithID) GetObjectGroups() []string {
	if x != nil {
		return x.ObjectGroups
	}
	return nil
}

func (m *CollectionWithID) GetVersion() isCollectionWithID_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (x *CollectionWithID) GetSemanticVersion() *Version {
	if x, ok := x.GetVersion().(*CollectionWithID_SemanticVersion); ok {
		return x.SemanticVersion
	}
	return nil
}

func (x *CollectionWithID) GetLatest() bool {
	if x, ok := x.GetVersion().(*CollectionWithID_Latest); ok {
		return x.Latest
	}
	return false
}

func (x *CollectionWithID) GetStats() *CollectionStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CollectionWithID) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type isCollectionWithID_Version interface {
	isCollectionWithID_Version()
}

type CollectionWithID_SemanticVersion struct {
	SemanticVersion *Version `protobuf:"bytes,12,opt,name=semantic_version,json=semanticVersion,proto3,oneof"`
}

type CollectionWithID_Latest struct {
	Latest bool `protobuf:"varint,13,opt,name=latest,proto3,oneof"`
}

func (*CollectionWithID_SemanticVersion) isCollectionWithID_Version() {}

func (*CollectionWithID_Latest) isCollectionWithID_Version() {}

// Multiple CollectionWithIDs
type CollectionWithIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionWithIds []*CollectionWithID `protobuf:"bytes,1,rep,name=collection_with_ids,json=collectionWithIds,proto3" json:"collection_with_ids,omitempty"`
}

func (x *CollectionWithIDs) Reset() {
	*x = CollectionWithIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionWithIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionWithIDs) ProtoMessage() {}

func (x *CollectionWithIDs) ProtoReflect() protoreflect.Message {
	mi := &file_aruna_api_storage_models_v1_models_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionWithIDs.ProtoReflect.Descriptor instead.
func (*CollectionWithIDs) Descriptor() ([]byte, []int) {
	return file_aruna_api_storage_models_v1_models_proto_rawDescGZIP(), []int{23}
}

func (x *CollectionWithIDs) GetCollectionWithIds() []*CollectionWithID {
	if x != nil {
		return x.CollectionWithIds
	}
	return nil
}

var File_aruna_api_storage_models_v1_models_proto protoreflect.FileDescriptor

var file_aruna_api_storage_models_v1_models_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x0d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x38, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x63, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x98, 0x01, 0x0a, 0x10, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x75,
	0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x58, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x3c, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x55, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x02, 0x0a,
	0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x65, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x75,
	0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x22, 0x94, 0x05, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75,
	0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x76, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x07, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x22, 0xba, 0x03, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x6d,
	0x65, 0x74, 0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x76, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5d,
	0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4d,
	0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xbb, 0x02,
	0x0a, 0x13, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x76, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x72, 0x65, 0x76, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x14, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x66, 0x0a, 0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x80, 0x03, 0x0a, 0x11,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x68, 0x6f,
	0x6f, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x74,
	0x61, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x76, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x77,
	0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x44, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x44, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x22, 0x8b, 0x06, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75,
	0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a,
	0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x10,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x75, 0x6e,
	0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xb8, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x75,
	0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0d, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x34, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72,
	0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42,
	0x09, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x13, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x62, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x9d, 0x05, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x3b, 0x0a, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x51, 0x0a, 0x0e,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4f, 0x6e, 0x74, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12,
	0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x10,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x73, 0x2a, 0x8b, 0x01, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x52, 0x41, 0x53, 0x48, 0x10, 0x05, 0x2a, 0xcb, 0x01, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x41, 0x53,
	0x48, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x53, 0x48,
	0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x48, 0x41, 0x53, 0x48, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x31, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x53, 0x48, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x53, 0x48, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x48,
	0x41, 0x53, 0x48, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x4d, 0x55, 0x52,
	0x4d, 0x55, 0x52, 0x33, 0x41, 0x33, 0x32, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x53,
	0x48, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x58, 0x58, 0x48, 0x41, 0x53,
	0x48, 0x33, 0x32, 0x10, 0x06, 0x2a, 0x59, 0x0a, 0x0a, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x43, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x02,
	0x2a, 0x8d, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x2a, 0x53, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4f, 0x49, 0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x33, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e,
	0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x02, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x72, 0x75, 0x6e, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x67, 0x6f,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x75, 0x6e, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aruna_api_storage_models_v1_models_proto_rawDescOnce sync.Once
	file_aruna_api_storage_models_v1_models_proto_rawDescData = file_aruna_api_storage_models_v1_models_proto_rawDesc
)

func file_aruna_api_storage_models_v1_models_proto_rawDescGZIP() []byte {
	file_aruna_api_storage_models_v1_models_proto_rawDescOnce.Do(func() {
		file_aruna_api_storage_models_v1_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_aruna_api_storage_models_v1_models_proto_rawDescData)
	})
	return file_aruna_api_storage_models_v1_models_proto_rawDescData
}

var file_aruna_api_storage_models_v1_models_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_aruna_api_storage_models_v1_models_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_aruna_api_storage_models_v1_models_proto_goTypes = []interface{}{
	(Status)(0),                   // 0: aruna.api.storage.models.v1.Status
	(Hashalgorithm)(0),            // 1: aruna.api.storage.models.v1.Hashalgorithm
	(OriginType)(0),               // 2: aruna.api.storage.models.v1.OriginType
	(DataClass)(0),                // 3: aruna.api.storage.models.v1.DataClass
	(SourceType)(0),               // 4: aruna.api.storage.models.v1.SourceType
	(EndpointType)(0),             // 5: aruna.api.storage.models.v1.EndpointType
	(*KeyValue)(nil),              // 6: aruna.api.storage.models.v1.KeyValue
	(*LabelOntology)(nil),         // 7: aruna.api.storage.models.v1.LabelOntology
	(*Stats)(nil),                 // 8: aruna.api.storage.models.v1.Stats
	(*CollectionStats)(nil),       // 9: aruna.api.storage.models.v1.CollectionStats
	(*ObjectGroupStats)(nil),      // 10: aruna.api.storage.models.v1.ObjectGroupStats
	(*Version)(nil),               // 11: aruna.api.storage.models.v1.Version
	(*Hash)(nil),                  // 12: aruna.api.storage.models.v1.Hash
	(*Origin)(nil),                // 13: aruna.api.storage.models.v1.Origin
	(*Source)(nil),                // 14: aruna.api.storage.models.v1.Source
	(*Endpoint)(nil),              // 15: aruna.api.storage.models.v1.Endpoint
	(*Object)(nil),                // 16: aruna.api.storage.models.v1.Object
	(*Objects)(nil),               // 17: aruna.api.storage.models.v1.Objects
	(*ObjectGroup)(nil),           // 18: aruna.api.storage.models.v1.ObjectGroup
	(*ObjectGroups)(nil),          // 19: aruna.api.storage.models.v1.ObjectGroups
	(*ObjectGroupOverview)(nil),   // 20: aruna.api.storage.models.v1.ObjectGroupOverview
	(*ObjectGroupOverviews)(nil),  // 21: aruna.api.storage.models.v1.ObjectGroupOverviews
	(*ObjectGroupWithID)(nil),     // 22: aruna.api.storage.models.v1.ObjectGroupWithID
	(*ObjectGroupWithIDs)(nil),    // 23: aruna.api.storage.models.v1.ObjectGroupWithIDs
	(*Collection)(nil),            // 24: aruna.api.storage.models.v1.Collection
	(*Collections)(nil),           // 25: aruna.api.storage.models.v1.Collections
	(*CollectionOverview)(nil),    // 26: aruna.api.storage.models.v1.CollectionOverview
	(*CollectionOverviews)(nil),   // 27: aruna.api.storage.models.v1.CollectionOverviews
	(*CollectionWithID)(nil),      // 28: aruna.api.storage.models.v1.CollectionWithID
	(*CollectionWithIDs)(nil),     // 29: aruna.api.storage.models.v1.CollectionWithIDs
	(*timestamppb.Timestamp)(nil), // 30: google.protobuf.Timestamp
}
var file_aruna_api_storage_models_v1_models_proto_depIdxs = []int32{
	8,  // 0: aruna.api.storage.models.v1.CollectionStats.object_stats:type_name -> aruna.api.storage.models.v1.Stats
	30, // 1: aruna.api.storage.models.v1.CollectionStats.last_updated:type_name -> google.protobuf.Timestamp
	8,  // 2: aruna.api.storage.models.v1.ObjectGroupStats.object_stats:type_name -> aruna.api.storage.models.v1.Stats
	30, // 3: aruna.api.storage.models.v1.ObjectGroupStats.last_updated:type_name -> google.protobuf.Timestamp
	1,  // 4: aruna.api.storage.models.v1.Hash.alg:type_name -> aruna.api.storage.models.v1.Hashalgorithm
	2,  // 5: aruna.api.storage.models.v1.Origin.type:type_name -> aruna.api.storage.models.v1.OriginType
	4,  // 6: aruna.api.storage.models.v1.Source.source_type:type_name -> aruna.api.storage.models.v1.SourceType
	5,  // 7: aruna.api.storage.models.v1.Endpoint.ep_type:type_name -> aruna.api.storage.models.v1.EndpointType
	6,  // 8: aruna.api.storage.models.v1.Object.labels:type_name -> aruna.api.storage.models.v1.KeyValue
	6,  // 9: aruna.api.storage.models.v1.Object.hooks:type_name -> aruna.api.storage.models.v1.KeyValue
	30, // 10: aruna.api.storage.models.v1.Object.created:type_name -> google.protobuf.Timestamp
	0,  // 11: aruna.api.storage.models.v1.Object.status:type_name -> aruna.api.storage.models.v1.Status
	13, // 12: aruna.api.storage.models.v1.Object.origin:type_name -> aruna.api.storage.models.v1.Origin
	3,  // 13: aruna.api.storage.models.v1.Object.data_class:type_name -> aruna.api.storage.models.v1.DataClass
	12, // 14: aruna.api.storage.models.v1.Object.hash:type_name -> aruna.api.storage.models.v1.Hash
	14, // 15: aruna.api.storage.models.v1.Object.source:type_name -> aruna.api.storage.models.v1.Source
	16, // 16: aruna.api.storage.models.v1.Objects.objects:type_name -> aruna.api.storage.models.v1.Object
	6,  // 17: aruna.api.storage.models.v1.ObjectGroup.labels:type_name -> aruna.api.storage.models.v1.KeyValue
	6,  // 18: aruna.api.storage.models.v1.ObjectGroup.hooks:type_name -> aruna.api.storage.models.v1.KeyValue
	16, // 19: aruna.api.storage.models.v1.ObjectGroup.objects:type_name -> aruna.api.storage.models.v1.Object
	16, // 20: aruna.api.storage.models.v1.ObjectGroup.meta_objects:type_name -> aruna.api.storage.models.v1.Object
	10, // 21: aruna.api.storage.models.v1.ObjectGroup.stats:type_name -> aruna.api.storage.models.v1.ObjectGroupStats
	18, // 22: aruna.api.storage.models.v1.ObjectGroups.object_groups:type_name -> aruna.api.storage.models.v1.ObjectGroup
	6,  // 23: aruna.api.storage.models.v1.ObjectGroupOverview.labels:type_name -> aruna.api.storage.models.v1.KeyValue
	6,  // 24: aruna.api.storage.models.v1.ObjectGroupOverview.hooks:type_name -> aruna.api.storage.models.v1.KeyValue
	10, // 25: aruna.api.storage.models.v1.ObjectGroupOverview.stats:type_name -> aruna.api.storage.models.v1.ObjectGroupStats
	20, // 26: aruna.api.storage.models.v1.ObjectGroupOverviews.object_group_overviews:type_name -> aruna.api.storage.models.v1.ObjectGroupOverview
	6,  // 27: aruna.api.storage.models.v1.ObjectGroupWithID.labels:type_name -> aruna.api.storage.models.v1.KeyValue
	6,  // 28: aruna.api.storage.models.v1.ObjectGroupWithID.hooks:type_name -> aruna.api.storage.models.v1.KeyValue
	10, // 29: aruna.api.storage.models.v1.ObjectGroupWithID.stats:type_name -> aruna.api.storage.models.v1.ObjectGroupStats
	22, // 30: aruna.api.storage.models.v1.ObjectGroupWithIDs.object_group_with_ids:type_name -> aruna.api.storage.models.v1.ObjectGroupWithID
	6,  // 31: aruna.api.storage.models.v1.Collection.labels:type_name -> aruna.api.storage.models.v1.KeyValue
	6,  // 32: aruna.api.storage.models.v1.Collection.hooks:type_name -> aruna.api.storage.models.v1.KeyValue
	7,  // 33: aruna.api.storage.models.v1.Collection.label_ontology:type_name -> aruna.api.storage.models.v1.LabelOntology
	30, // 34: aruna.api.storage.models.v1.Collection.created:type_name -> google.protobuf.Timestamp
	16, // 35: aruna.api.storage.models.v1.Collection.objects:type_name -> aruna.api.storage.models.v1.Object
	16, // 36: aruna.api.storage.models.v1.Collection.specifications:type_name -> aruna.api.storage.models.v1.Object
	18, // 37: aruna.api.storage.models.v1.Collection.object_groups:type_name -> aruna.api.storage.models.v1.ObjectGroup
	11, // 38: aruna.api.storage.models.v1.Collection.semantic_version:type_name -> aruna.api.storage.models.v1.Version
	9,  // 39: aruna.api.storage.models.v1.Collection.stats:type_name -> aruna.api.storage.models.v1.CollectionStats
	24, // 40: aruna.api.storage.models.v1.Collections.collections:type_name -> aruna.api.storage.models.v1.Collection
	6,  // 41: aruna.api.storage.models.v1.CollectionOverview.labels:type_name -> aruna.api.storage.models.v1.KeyValue
	6,  // 42: aruna.api.storage.models.v1.CollectionOverview.hooks:type_name -> aruna.api.storage.models.v1.KeyValue
	7,  // 43: aruna.api.storage.models.v1.CollectionOverview.label_ontology:type_name -> aruna.api.storage.models.v1.LabelOntology
	30, // 44: aruna.api.storage.models.v1.CollectionOverview.created:type_name -> google.protobuf.Timestamp
	11, // 45: aruna.api.storage.models.v1.CollectionOverview.semantic_version:type_name -> aruna.api.storage.models.v1.Version
	9,  // 46: aruna.api.storage.models.v1.CollectionOverview.stats:type_name -> aruna.api.storage.models.v1.CollectionStats
	26, // 47: aruna.api.storage.models.v1.CollectionOverviews.collection_overviews:type_name -> aruna.api.storage.models.v1.CollectionOverview
	6,  // 48: aruna.api.storage.models.v1.CollectionWithID.labels:type_name -> aruna.api.storage.models.v1.KeyValue
	6,  // 49: aruna.api.storage.models.v1.CollectionWithID.hooks:type_name -> aruna.api.storage.models.v1.KeyValue
	7,  // 50: aruna.api.storage.models.v1.CollectionWithID.label_ontology:type_name -> aruna.api.storage.models.v1.LabelOntology
	30, // 51: aruna.api.storage.models.v1.CollectionWithID.created:type_name -> google.protobuf.Timestamp
	11, // 52: aruna.api.storage.models.v1.CollectionWithID.semantic_version:type_name -> aruna.api.storage.models.v1.Version
	9,  // 53: aruna.api.storage.models.v1.CollectionWithID.stats:type_name -> aruna.api.storage.models.v1.CollectionStats
	28, // 54: aruna.api.storage.models.v1.CollectionWithIDs.collection_with_ids:type_name -> aruna.api.storage.models.v1.CollectionWithID
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_aruna_api_storage_models_v1_models_proto_init() }
func file_aruna_api_storage_models_v1_models_proto_init() {
	if File_aruna_api_storage_models_v1_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aruna_api_storage_models_v1_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelOntology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectGroupStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Objects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectGroups); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectGroupOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectGroupOverviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectGroupWithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectGroupWithIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionOverviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionWithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aruna_api_storage_models_v1_models_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionWithIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aruna_api_storage_models_v1_models_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Collection_SemanticVersion)(nil),
		(*Collection_Latest)(nil),
	}
	file_aruna_api_storage_models_v1_models_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*CollectionOverview_SemanticVersion)(nil),
		(*CollectionOverview_Latest)(nil),
	}
	file_aruna_api_storage_models_v1_models_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*CollectionWithID_SemanticVersion)(nil),
		(*CollectionWithID_Latest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aruna_api_storage_models_v1_models_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aruna_api_storage_models_v1_models_proto_goTypes,
		DependencyIndexes: file_aruna_api_storage_models_v1_models_proto_depIdxs,
		EnumInfos:         file_aruna_api_storage_models_v1_models_proto_enumTypes,
		MessageInfos:      file_aruna_api_storage_models_v1_models_proto_msgTypes,
	}.Build()
	File_aruna_api_storage_models_v1_models_proto = out.File
	file_aruna_api_storage_models_v1_models_proto_rawDesc = nil
	file_aruna_api_storage_models_v1_models_proto_goTypes = nil
	file_aruna_api_storage_models_v1_models_proto_depIdxs = nil
}
