// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/dataproxy/services/v2/bundler_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BundlerService_CreateBundle_FullMethodName = "/aruna.api.dataproxy.services.v2.BundlerService/CreateBundle"
	BundlerService_DeleteBundle_FullMethodName = "/aruna.api.dataproxy.services.v2.BundlerService/DeleteBundle"
)

// BundlerServiceClient is the client API for BundlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BundlerServiceClient interface {
	CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (*CreateBundleResponse, error)
	DeleteBundle(ctx context.Context, in *DeleteBundleRequest, opts ...grpc.CallOption) (*DeleteBundleResponse, error)
}

type bundlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBundlerServiceClient(cc grpc.ClientConnInterface) BundlerServiceClient {
	return &bundlerServiceClient{cc}
}

func (c *bundlerServiceClient) CreateBundle(ctx context.Context, in *CreateBundleRequest, opts ...grpc.CallOption) (*CreateBundleResponse, error) {
	out := new(CreateBundleResponse)
	err := c.cc.Invoke(ctx, BundlerService_CreateBundle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bundlerServiceClient) DeleteBundle(ctx context.Context, in *DeleteBundleRequest, opts ...grpc.CallOption) (*DeleteBundleResponse, error) {
	out := new(DeleteBundleResponse)
	err := c.cc.Invoke(ctx, BundlerService_DeleteBundle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BundlerServiceServer is the server API for BundlerService service.
// All implementations should embed UnimplementedBundlerServiceServer
// for forward compatibility
type BundlerServiceServer interface {
	CreateBundle(context.Context, *CreateBundleRequest) (*CreateBundleResponse, error)
	DeleteBundle(context.Context, *DeleteBundleRequest) (*DeleteBundleResponse, error)
}

// UnimplementedBundlerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBundlerServiceServer struct {
}

func (UnimplementedBundlerServiceServer) CreateBundle(context.Context, *CreateBundleRequest) (*CreateBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBundle not implemented")
}
func (UnimplementedBundlerServiceServer) DeleteBundle(context.Context, *DeleteBundleRequest) (*DeleteBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBundle not implemented")
}

// UnsafeBundlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BundlerServiceServer will
// result in compilation errors.
type UnsafeBundlerServiceServer interface {
	mustEmbedUnimplementedBundlerServiceServer()
}

func RegisterBundlerServiceServer(s grpc.ServiceRegistrar, srv BundlerServiceServer) {
	s.RegisterService(&BundlerService_ServiceDesc, srv)
}

func _BundlerService_CreateBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BundlerServiceServer).CreateBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BundlerService_CreateBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BundlerServiceServer).CreateBundle(ctx, req.(*CreateBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BundlerService_DeleteBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BundlerServiceServer).DeleteBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BundlerService_DeleteBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BundlerServiceServer).DeleteBundle(ctx, req.(*DeleteBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BundlerService_ServiceDesc is the grpc.ServiceDesc for BundlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BundlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.dataproxy.services.v2.BundlerService",
	HandlerType: (*BundlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBundle",
			Handler:    _BundlerService_CreateBundle_Handler,
		},
		{
			MethodName: "DeleteBundle",
			Handler:    _BundlerService_DeleteBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/dataproxy/services/v2/bundler_service.proto",
}
