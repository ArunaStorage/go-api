// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/internal/v1/proxy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalProxyServiceClient is the client API for InternalProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalProxyServiceClient interface {
	InitMultipartUpload(ctx context.Context, in *InitMultipartUploadRequest, opts ...grpc.CallOption) (*InitMultipartUploadResponse, error)
	FinishMultipartUpload(ctx context.Context, in *FinishMultipartUploadRequest, opts ...grpc.CallOption) (*FinishMultipartUploadResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
}

type internalProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalProxyServiceClient(cc grpc.ClientConnInterface) InternalProxyServiceClient {
	return &internalProxyServiceClient{cc}
}

func (c *internalProxyServiceClient) InitMultipartUpload(ctx context.Context, in *InitMultipartUploadRequest, opts ...grpc.CallOption) (*InitMultipartUploadResponse, error) {
	out := new(InitMultipartUploadResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/InitMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) FinishMultipartUpload(ctx context.Context, in *FinishMultipartUploadRequest, opts ...grpc.CallOption) (*FinishMultipartUploadResponse, error) {
	out := new(FinishMultipartUploadResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/FinishMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalProxyServiceServer is the server API for InternalProxyService service.
// All implementations should embed UnimplementedInternalProxyServiceServer
// for forward compatibility
type InternalProxyServiceServer interface {
	InitMultipartUpload(context.Context, *InitMultipartUploadRequest) (*InitMultipartUploadResponse, error)
	FinishMultipartUpload(context.Context, *FinishMultipartUploadRequest) (*FinishMultipartUploadResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
}

// UnimplementedInternalProxyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInternalProxyServiceServer struct {
}

func (UnimplementedInternalProxyServiceServer) InitMultipartUpload(context.Context, *InitMultipartUploadRequest) (*InitMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMultipartUpload not implemented")
}
func (UnimplementedInternalProxyServiceServer) FinishMultipartUpload(context.Context, *FinishMultipartUploadRequest) (*FinishMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishMultipartUpload not implemented")
}
func (UnimplementedInternalProxyServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}

// UnsafeInternalProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalProxyServiceServer will
// result in compilation errors.
type UnsafeInternalProxyServiceServer interface {
	mustEmbedUnimplementedInternalProxyServiceServer()
}

func RegisterInternalProxyServiceServer(s grpc.ServiceRegistrar, srv InternalProxyServiceServer) {
	s.RegisterService(&InternalProxyService_ServiceDesc, srv)
}

func _InternalProxyService_InitMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).InitMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/InitMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).InitMultipartUpload(ctx, req.(*InitMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_FinishMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).FinishMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/FinishMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).FinishMultipartUpload(ctx, req.(*FinishMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalProxyService_ServiceDesc is the grpc.ServiceDesc for InternalProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.internal.v1.InternalProxyService",
	HandlerType: (*InternalProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitMultipartUpload",
			Handler:    _InternalProxyService_InitMultipartUpload_Handler,
		},
		{
			MethodName: "FinishMultipartUpload",
			Handler:    _InternalProxyService_FinishMultipartUpload_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _InternalProxyService_DeleteObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/internal/v1/proxy.proto",
}

// InternalProxyNotifierServiceClient is the client API for InternalProxyNotifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalProxyNotifierServiceClient interface {
	GetOrCreateObjectByPath(ctx context.Context, in *GetOrCreateObjectByPathRequest, opts ...grpc.CallOption) (*GetOrCreateObjectByPathResponse, error)
	FinalizeObject(ctx context.Context, in *FinalizeObjectRequest, opts ...grpc.CallOption) (*FinalizeObjectResponse, error)
	GetOrCreateEncryptionKey(ctx context.Context, in *GetOrCreateEncryptionKeyRequest, opts ...grpc.CallOption) (*GetOrCreateEncryptionKeyResponse, error)
	GetObjectLocation(ctx context.Context, in *GetObjectLocationRequest, opts ...grpc.CallOption) (*GetObjectLocationResponse, error)
	GetCollectionByBucket(ctx context.Context, in *GetCollectionByBucketRequest, opts ...grpc.CallOption) (*GetCollectionByBucketResponse, error)
}

type internalProxyNotifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalProxyNotifierServiceClient(cc grpc.ClientConnInterface) InternalProxyNotifierServiceClient {
	return &internalProxyNotifierServiceClient{cc}
}

func (c *internalProxyNotifierServiceClient) GetOrCreateObjectByPath(ctx context.Context, in *GetOrCreateObjectByPathRequest, opts ...grpc.CallOption) (*GetOrCreateObjectByPathResponse, error) {
	out := new(GetOrCreateObjectByPathResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyNotifierService/GetOrCreateObjectByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyNotifierServiceClient) FinalizeObject(ctx context.Context, in *FinalizeObjectRequest, opts ...grpc.CallOption) (*FinalizeObjectResponse, error) {
	out := new(FinalizeObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyNotifierService/FinalizeObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyNotifierServiceClient) GetOrCreateEncryptionKey(ctx context.Context, in *GetOrCreateEncryptionKeyRequest, opts ...grpc.CallOption) (*GetOrCreateEncryptionKeyResponse, error) {
	out := new(GetOrCreateEncryptionKeyResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyNotifierService/GetOrCreateEncryptionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyNotifierServiceClient) GetObjectLocation(ctx context.Context, in *GetObjectLocationRequest, opts ...grpc.CallOption) (*GetObjectLocationResponse, error) {
	out := new(GetObjectLocationResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyNotifierService/GetObjectLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyNotifierServiceClient) GetCollectionByBucket(ctx context.Context, in *GetCollectionByBucketRequest, opts ...grpc.CallOption) (*GetCollectionByBucketResponse, error) {
	out := new(GetCollectionByBucketResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyNotifierService/GetCollectionByBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalProxyNotifierServiceServer is the server API for InternalProxyNotifierService service.
// All implementations should embed UnimplementedInternalProxyNotifierServiceServer
// for forward compatibility
type InternalProxyNotifierServiceServer interface {
	GetOrCreateObjectByPath(context.Context, *GetOrCreateObjectByPathRequest) (*GetOrCreateObjectByPathResponse, error)
	FinalizeObject(context.Context, *FinalizeObjectRequest) (*FinalizeObjectResponse, error)
	GetOrCreateEncryptionKey(context.Context, *GetOrCreateEncryptionKeyRequest) (*GetOrCreateEncryptionKeyResponse, error)
	GetObjectLocation(context.Context, *GetObjectLocationRequest) (*GetObjectLocationResponse, error)
	GetCollectionByBucket(context.Context, *GetCollectionByBucketRequest) (*GetCollectionByBucketResponse, error)
}

// UnimplementedInternalProxyNotifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInternalProxyNotifierServiceServer struct {
}

func (UnimplementedInternalProxyNotifierServiceServer) GetOrCreateObjectByPath(context.Context, *GetOrCreateObjectByPathRequest) (*GetOrCreateObjectByPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateObjectByPath not implemented")
}
func (UnimplementedInternalProxyNotifierServiceServer) FinalizeObject(context.Context, *FinalizeObjectRequest) (*FinalizeObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeObject not implemented")
}
func (UnimplementedInternalProxyNotifierServiceServer) GetOrCreateEncryptionKey(context.Context, *GetOrCreateEncryptionKeyRequest) (*GetOrCreateEncryptionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateEncryptionKey not implemented")
}
func (UnimplementedInternalProxyNotifierServiceServer) GetObjectLocation(context.Context, *GetObjectLocationRequest) (*GetObjectLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectLocation not implemented")
}
func (UnimplementedInternalProxyNotifierServiceServer) GetCollectionByBucket(context.Context, *GetCollectionByBucketRequest) (*GetCollectionByBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionByBucket not implemented")
}

// UnsafeInternalProxyNotifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalProxyNotifierServiceServer will
// result in compilation errors.
type UnsafeInternalProxyNotifierServiceServer interface {
	mustEmbedUnimplementedInternalProxyNotifierServiceServer()
}

func RegisterInternalProxyNotifierServiceServer(s grpc.ServiceRegistrar, srv InternalProxyNotifierServiceServer) {
	s.RegisterService(&InternalProxyNotifierService_ServiceDesc, srv)
}

func _InternalProxyNotifierService_GetOrCreateObjectByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateObjectByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyNotifierServiceServer).GetOrCreateObjectByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyNotifierService/GetOrCreateObjectByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyNotifierServiceServer).GetOrCreateObjectByPath(ctx, req.(*GetOrCreateObjectByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyNotifierService_FinalizeObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyNotifierServiceServer).FinalizeObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyNotifierService/FinalizeObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyNotifierServiceServer).FinalizeObject(ctx, req.(*FinalizeObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyNotifierService_GetOrCreateEncryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateEncryptionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyNotifierServiceServer).GetOrCreateEncryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyNotifierService/GetOrCreateEncryptionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyNotifierServiceServer).GetOrCreateEncryptionKey(ctx, req.(*GetOrCreateEncryptionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyNotifierService_GetObjectLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyNotifierServiceServer).GetObjectLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyNotifierService/GetObjectLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyNotifierServiceServer).GetObjectLocation(ctx, req.(*GetObjectLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyNotifierService_GetCollectionByBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionByBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyNotifierServiceServer).GetCollectionByBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyNotifierService/GetCollectionByBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyNotifierServiceServer).GetCollectionByBucket(ctx, req.(*GetCollectionByBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalProxyNotifierService_ServiceDesc is the grpc.ServiceDesc for InternalProxyNotifierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalProxyNotifierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.internal.v1.InternalProxyNotifierService",
	HandlerType: (*InternalProxyNotifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrCreateObjectByPath",
			Handler:    _InternalProxyNotifierService_GetOrCreateObjectByPath_Handler,
		},
		{
			MethodName: "FinalizeObject",
			Handler:    _InternalProxyNotifierService_FinalizeObject_Handler,
		},
		{
			MethodName: "GetOrCreateEncryptionKey",
			Handler:    _InternalProxyNotifierService_GetOrCreateEncryptionKey_Handler,
		},
		{
			MethodName: "GetObjectLocation",
			Handler:    _InternalProxyNotifierService_GetObjectLocation_Handler,
		},
		{
			MethodName: "GetCollectionByBucket",
			Handler:    _InternalProxyNotifierService_GetCollectionByBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/internal/v1/proxy.proto",
}
