// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aruna/api/internal/v1/proxy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalProxyServiceClient is the client API for InternalProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalProxyServiceClient interface {
	InitPresignedUpload(ctx context.Context, in *InitPresignedUploadRequest, opts ...grpc.CallOption) (*InitPresignedUploadResponse, error)
	CreatePresignedUploadUrl(ctx context.Context, in *CreatePresignedUploadUrlRequest, opts ...grpc.CallOption) (*CreatePresignedUploadUrlResponse, error)
	FinishPresignedUpload(ctx context.Context, in *FinishPresignedUploadRequest, opts ...grpc.CallOption) (*FinishPresignedUploadResponse, error)
	CreatePresignedDownload(ctx context.Context, in *CreatePresignedDownloadRequest, opts ...grpc.CallOption) (*CreatePresignedDownloadResponse, error)
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error)
	MoveObject(ctx context.Context, in *MoveObjectRequest, opts ...grpc.CallOption) (*MoveObjectResponse, error)
}

type internalProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalProxyServiceClient(cc grpc.ClientConnInterface) InternalProxyServiceClient {
	return &internalProxyServiceClient{cc}
}

func (c *internalProxyServiceClient) InitPresignedUpload(ctx context.Context, in *InitPresignedUploadRequest, opts ...grpc.CallOption) (*InitPresignedUploadResponse, error) {
	out := new(InitPresignedUploadResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/InitPresignedUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) CreatePresignedUploadUrl(ctx context.Context, in *CreatePresignedUploadUrlRequest, opts ...grpc.CallOption) (*CreatePresignedUploadUrlResponse, error) {
	out := new(CreatePresignedUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/CreatePresignedUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) FinishPresignedUpload(ctx context.Context, in *FinishPresignedUploadRequest, opts ...grpc.CallOption) (*FinishPresignedUploadResponse, error) {
	out := new(FinishPresignedUploadResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/FinishPresignedUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) CreatePresignedDownload(ctx context.Context, in *CreatePresignedDownloadRequest, opts ...grpc.CallOption) (*CreatePresignedDownloadResponse, error) {
	out := new(CreatePresignedDownloadResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/CreatePresignedDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*DeleteObjectResponse, error) {
	out := new(DeleteObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyServiceClient) MoveObject(ctx context.Context, in *MoveObjectRequest, opts ...grpc.CallOption) (*MoveObjectResponse, error) {
	out := new(MoveObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyService/MoveObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalProxyServiceServer is the server API for InternalProxyService service.
// All implementations should embed UnimplementedInternalProxyServiceServer
// for forward compatibility
type InternalProxyServiceServer interface {
	InitPresignedUpload(context.Context, *InitPresignedUploadRequest) (*InitPresignedUploadResponse, error)
	CreatePresignedUploadUrl(context.Context, *CreatePresignedUploadUrlRequest) (*CreatePresignedUploadUrlResponse, error)
	FinishPresignedUpload(context.Context, *FinishPresignedUploadRequest) (*FinishPresignedUploadResponse, error)
	CreatePresignedDownload(context.Context, *CreatePresignedDownloadRequest) (*CreatePresignedDownloadResponse, error)
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error)
	MoveObject(context.Context, *MoveObjectRequest) (*MoveObjectResponse, error)
}

// UnimplementedInternalProxyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInternalProxyServiceServer struct {
}

func (UnimplementedInternalProxyServiceServer) InitPresignedUpload(context.Context, *InitPresignedUploadRequest) (*InitPresignedUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPresignedUpload not implemented")
}
func (UnimplementedInternalProxyServiceServer) CreatePresignedUploadUrl(context.Context, *CreatePresignedUploadUrlRequest) (*CreatePresignedUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePresignedUploadUrl not implemented")
}
func (UnimplementedInternalProxyServiceServer) FinishPresignedUpload(context.Context, *FinishPresignedUploadRequest) (*FinishPresignedUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishPresignedUpload not implemented")
}
func (UnimplementedInternalProxyServiceServer) CreatePresignedDownload(context.Context, *CreatePresignedDownloadRequest) (*CreatePresignedDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePresignedDownload not implemented")
}
func (UnimplementedInternalProxyServiceServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedInternalProxyServiceServer) DeleteObject(context.Context, *DeleteObjectRequest) (*DeleteObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedInternalProxyServiceServer) MoveObject(context.Context, *MoveObjectRequest) (*MoveObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveObject not implemented")
}

// UnsafeInternalProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalProxyServiceServer will
// result in compilation errors.
type UnsafeInternalProxyServiceServer interface {
	mustEmbedUnimplementedInternalProxyServiceServer()
}

func RegisterInternalProxyServiceServer(s grpc.ServiceRegistrar, srv InternalProxyServiceServer) {
	s.RegisterService(&InternalProxyService_ServiceDesc, srv)
}

func _InternalProxyService_InitPresignedUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPresignedUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).InitPresignedUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/InitPresignedUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).InitPresignedUpload(ctx, req.(*InitPresignedUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_CreatePresignedUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePresignedUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).CreatePresignedUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/CreatePresignedUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).CreatePresignedUploadUrl(ctx, req.(*CreatePresignedUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_FinishPresignedUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishPresignedUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).FinishPresignedUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/FinishPresignedUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).FinishPresignedUpload(ctx, req.(*FinishPresignedUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_CreatePresignedDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePresignedDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).CreatePresignedDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/CreatePresignedDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).CreatePresignedDownload(ctx, req.(*CreatePresignedDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyService_MoveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyServiceServer).MoveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyService/MoveObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyServiceServer).MoveObject(ctx, req.(*MoveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalProxyService_ServiceDesc is the grpc.ServiceDesc for InternalProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.internal.v1.InternalProxyService",
	HandlerType: (*InternalProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitPresignedUpload",
			Handler:    _InternalProxyService_InitPresignedUpload_Handler,
		},
		{
			MethodName: "CreatePresignedUploadUrl",
			Handler:    _InternalProxyService_CreatePresignedUploadUrl_Handler,
		},
		{
			MethodName: "FinishPresignedUpload",
			Handler:    _InternalProxyService_FinishPresignedUpload_Handler,
		},
		{
			MethodName: "CreatePresignedDownload",
			Handler:    _InternalProxyService_CreatePresignedDownload_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _InternalProxyService_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _InternalProxyService_DeleteObject_Handler,
		},
		{
			MethodName: "MoveObject",
			Handler:    _InternalProxyService_MoveObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/internal/v1/proxy.proto",
}

// InternalProxyNotifierServiceClient is the client API for InternalProxyNotifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalProxyNotifierServiceClient interface {
	FinalizeObject(ctx context.Context, in *FinalizeObjectRequest, opts ...grpc.CallOption) (*FinalizeObjectResponse, error)
	GetEncryptionKey(ctx context.Context, in *GetEncryptionKeyRequest, opts ...grpc.CallOption) (*GetEncryptionKeyResponse, error)
}

type internalProxyNotifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalProxyNotifierServiceClient(cc grpc.ClientConnInterface) InternalProxyNotifierServiceClient {
	return &internalProxyNotifierServiceClient{cc}
}

func (c *internalProxyNotifierServiceClient) FinalizeObject(ctx context.Context, in *FinalizeObjectRequest, opts ...grpc.CallOption) (*FinalizeObjectResponse, error) {
	out := new(FinalizeObjectResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyNotifierService/FinalizeObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalProxyNotifierServiceClient) GetEncryptionKey(ctx context.Context, in *GetEncryptionKeyRequest, opts ...grpc.CallOption) (*GetEncryptionKeyResponse, error) {
	out := new(GetEncryptionKeyResponse)
	err := c.cc.Invoke(ctx, "/aruna.api.internal.v1.InternalProxyNotifierService/GetEncryptionKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalProxyNotifierServiceServer is the server API for InternalProxyNotifierService service.
// All implementations should embed UnimplementedInternalProxyNotifierServiceServer
// for forward compatibility
type InternalProxyNotifierServiceServer interface {
	FinalizeObject(context.Context, *FinalizeObjectRequest) (*FinalizeObjectResponse, error)
	GetEncryptionKey(context.Context, *GetEncryptionKeyRequest) (*GetEncryptionKeyResponse, error)
}

// UnimplementedInternalProxyNotifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInternalProxyNotifierServiceServer struct {
}

func (UnimplementedInternalProxyNotifierServiceServer) FinalizeObject(context.Context, *FinalizeObjectRequest) (*FinalizeObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeObject not implemented")
}
func (UnimplementedInternalProxyNotifierServiceServer) GetEncryptionKey(context.Context, *GetEncryptionKeyRequest) (*GetEncryptionKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncryptionKey not implemented")
}

// UnsafeInternalProxyNotifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalProxyNotifierServiceServer will
// result in compilation errors.
type UnsafeInternalProxyNotifierServiceServer interface {
	mustEmbedUnimplementedInternalProxyNotifierServiceServer()
}

func RegisterInternalProxyNotifierServiceServer(s grpc.ServiceRegistrar, srv InternalProxyNotifierServiceServer) {
	s.RegisterService(&InternalProxyNotifierService_ServiceDesc, srv)
}

func _InternalProxyNotifierService_FinalizeObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyNotifierServiceServer).FinalizeObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyNotifierService/FinalizeObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyNotifierServiceServer).FinalizeObject(ctx, req.(*FinalizeObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalProxyNotifierService_GetEncryptionKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEncryptionKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalProxyNotifierServiceServer).GetEncryptionKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aruna.api.internal.v1.InternalProxyNotifierService/GetEncryptionKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalProxyNotifierServiceServer).GetEncryptionKey(ctx, req.(*GetEncryptionKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalProxyNotifierService_ServiceDesc is the grpc.ServiceDesc for InternalProxyNotifierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalProxyNotifierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.internal.v1.InternalProxyNotifierService",
	HandlerType: (*InternalProxyNotifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FinalizeObject",
			Handler:    _InternalProxyNotifierService_FinalizeObject_Handler,
		},
		{
			MethodName: "GetEncryptionKey",
			Handler:    _InternalProxyNotifierService_GetEncryptionKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/internal/v1/proxy.proto",
}
