// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aruna/api/hooks/services/v2/hooks_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HooksService_CreateHook_FullMethodName        = "/aruna.api.hooks.services.v2.HooksService/CreateHook"
	HooksService_AddProjectsToHook_FullMethodName = "/aruna.api.hooks.services.v2.HooksService/AddProjectsToHook"
	HooksService_ListProjectHooks_FullMethodName  = "/aruna.api.hooks.services.v2.HooksService/ListProjectHooks"
	HooksService_ListOwnedHooks_FullMethodName    = "/aruna.api.hooks.services.v2.HooksService/ListOwnedHooks"
	HooksService_DeleteHook_FullMethodName        = "/aruna.api.hooks.services.v2.HooksService/DeleteHook"
	HooksService_HookCallback_FullMethodName      = "/aruna.api.hooks.services.v2.HooksService/HookCallback"
)

// HooksServiceClient is the client API for HooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HooksServiceClient interface {
	// Created Hooks are always associated with the owner that creates the hook
	CreateHook(ctx context.Context, in *CreateHookRequest, opts ...grpc.CallOption) (*CreateHookResponse, error)
	AddProjectsToHook(ctx context.Context, in *AddProjectsToHookRequest, opts ...grpc.CallOption) (*AddProjectsToHookResponse, error)
	ListProjectHooks(ctx context.Context, in *ListProjectHooksRequest, opts ...grpc.CallOption) (*ListProjectHooksResponse, error)
	ListOwnedHooks(ctx context.Context, in *ListOwnedHooksRequest, opts ...grpc.CallOption) (*ListOwnedHooksResponse, error)
	DeleteHook(ctx context.Context, in *DeleteHookRequest, opts ...grpc.CallOption) (*DeleteHookResponse, error)
	HookCallback(ctx context.Context, in *HookCallbackRequest, opts ...grpc.CallOption) (*HookCallbackResponse, error)
}

type hooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHooksServiceClient(cc grpc.ClientConnInterface) HooksServiceClient {
	return &hooksServiceClient{cc}
}

func (c *hooksServiceClient) CreateHook(ctx context.Context, in *CreateHookRequest, opts ...grpc.CallOption) (*CreateHookResponse, error) {
	out := new(CreateHookResponse)
	err := c.cc.Invoke(ctx, HooksService_CreateHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) AddProjectsToHook(ctx context.Context, in *AddProjectsToHookRequest, opts ...grpc.CallOption) (*AddProjectsToHookResponse, error) {
	out := new(AddProjectsToHookResponse)
	err := c.cc.Invoke(ctx, HooksService_AddProjectsToHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) ListProjectHooks(ctx context.Context, in *ListProjectHooksRequest, opts ...grpc.CallOption) (*ListProjectHooksResponse, error) {
	out := new(ListProjectHooksResponse)
	err := c.cc.Invoke(ctx, HooksService_ListProjectHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) ListOwnedHooks(ctx context.Context, in *ListOwnedHooksRequest, opts ...grpc.CallOption) (*ListOwnedHooksResponse, error) {
	out := new(ListOwnedHooksResponse)
	err := c.cc.Invoke(ctx, HooksService_ListOwnedHooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) DeleteHook(ctx context.Context, in *DeleteHookRequest, opts ...grpc.CallOption) (*DeleteHookResponse, error) {
	out := new(DeleteHookResponse)
	err := c.cc.Invoke(ctx, HooksService_DeleteHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) HookCallback(ctx context.Context, in *HookCallbackRequest, opts ...grpc.CallOption) (*HookCallbackResponse, error) {
	out := new(HookCallbackResponse)
	err := c.cc.Invoke(ctx, HooksService_HookCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HooksServiceServer is the server API for HooksService service.
// All implementations should embed UnimplementedHooksServiceServer
// for forward compatibility
type HooksServiceServer interface {
	// Created Hooks are always associated with the owner that creates the hook
	CreateHook(context.Context, *CreateHookRequest) (*CreateHookResponse, error)
	AddProjectsToHook(context.Context, *AddProjectsToHookRequest) (*AddProjectsToHookResponse, error)
	ListProjectHooks(context.Context, *ListProjectHooksRequest) (*ListProjectHooksResponse, error)
	ListOwnedHooks(context.Context, *ListOwnedHooksRequest) (*ListOwnedHooksResponse, error)
	DeleteHook(context.Context, *DeleteHookRequest) (*DeleteHookResponse, error)
	HookCallback(context.Context, *HookCallbackRequest) (*HookCallbackResponse, error)
}

// UnimplementedHooksServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHooksServiceServer struct {
}

func (UnimplementedHooksServiceServer) CreateHook(context.Context, *CreateHookRequest) (*CreateHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHook not implemented")
}
func (UnimplementedHooksServiceServer) AddProjectsToHook(context.Context, *AddProjectsToHookRequest) (*AddProjectsToHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectsToHook not implemented")
}
func (UnimplementedHooksServiceServer) ListProjectHooks(context.Context, *ListProjectHooksRequest) (*ListProjectHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectHooks not implemented")
}
func (UnimplementedHooksServiceServer) ListOwnedHooks(context.Context, *ListOwnedHooksRequest) (*ListOwnedHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOwnedHooks not implemented")
}
func (UnimplementedHooksServiceServer) DeleteHook(context.Context, *DeleteHookRequest) (*DeleteHookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHook not implemented")
}
func (UnimplementedHooksServiceServer) HookCallback(context.Context, *HookCallbackRequest) (*HookCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HookCallback not implemented")
}

// UnsafeHooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HooksServiceServer will
// result in compilation errors.
type UnsafeHooksServiceServer interface {
	mustEmbedUnimplementedHooksServiceServer()
}

func RegisterHooksServiceServer(s grpc.ServiceRegistrar, srv HooksServiceServer) {
	s.RegisterService(&HooksService_ServiceDesc, srv)
}

func _HooksService_CreateHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).CreateHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_CreateHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).CreateHook(ctx, req.(*CreateHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_AddProjectsToHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectsToHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).AddProjectsToHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_AddProjectsToHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).AddProjectsToHook(ctx, req.(*AddProjectsToHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_ListProjectHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).ListProjectHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_ListProjectHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).ListProjectHooks(ctx, req.(*ListProjectHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_ListOwnedHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOwnedHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).ListOwnedHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_ListOwnedHooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).ListOwnedHooks(ctx, req.(*ListOwnedHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_DeleteHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).DeleteHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_DeleteHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).DeleteHook(ctx, req.(*DeleteHookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_HookCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HookCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).HookCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HooksService_HookCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).HookCallback(ctx, req.(*HookCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HooksService_ServiceDesc is the grpc.ServiceDesc for HooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aruna.api.hooks.services.v2.HooksService",
	HandlerType: (*HooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHook",
			Handler:    _HooksService_CreateHook_Handler,
		},
		{
			MethodName: "AddProjectsToHook",
			Handler:    _HooksService_AddProjectsToHook_Handler,
		},
		{
			MethodName: "ListProjectHooks",
			Handler:    _HooksService_ListProjectHooks_Handler,
		},
		{
			MethodName: "ListOwnedHooks",
			Handler:    _HooksService_ListOwnedHooks_Handler,
		},
		{
			MethodName: "DeleteHook",
			Handler:    _HooksService_DeleteHook_Handler,
		},
		{
			MethodName: "HookCallback",
			Handler:    _HooksService_HookCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aruna/api/hooks/services/v2/hooks_service.proto",
}
