// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: sciobjsdb/api/storage/services/v1/object_load.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ObjectLoadServiceClient is the client API for ObjectLoadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectLoadServiceClient interface {
	// Creates an upload link for an object to upload the actual data object
	// Returns a presigned https PUT request
	// Can only be used to upload objects < 4GB
	CreateUploadLink(ctx context.Context, in *CreateUploadLinkRequest, opts ...grpc.CallOption) (*CreateUploadLinkResponse, error)
	// Creates a download link for an object
	// Returns a presigned https GET request
	CreateDownloadLink(ctx context.Context, in *CreateDownloadLinkRequest, opts ...grpc.CallOption) (*CreateDownloadLinkResponse, error)
	// Creates links for multiple objects at once
	// The order of the requested objects is preserved in the response
	CreateDownloadLinkBatch(ctx context.Context, in *CreateDownloadLinkBatchRequest, opts ...grpc.CallOption) (*CreateDownloadLinkBatchResponse, error)
	// Creates a stream of objects and presigned links based on the provided query
	// This can be used retrieve a large number of ObjectGroups as a stream that would otherwise cause issues with the connection
	CreateDownloadLinkStream(ctx context.Context, in *CreateDownloadLinkStreamRequest, opts ...grpc.CallOption) (ObjectLoadService_CreateDownloadLinkStreamClient, error)
	// Initiates a multipart upload for an object
	// This is intended to be used for larger objects
	// For further information please read the Amazon S3 documentation on multipart uploads
	// Has to be used together with GetMultipartUploadLink and CompleteMultipartUpload
	StartMultipartUpload(ctx context.Context, in *StartMultipartUploadRequest, opts ...grpc.CallOption) (*StartMultipartUploadResponse, error)
	// Returns a part of an multipart upload.
	// Each but the last part needs to be bigger than 5MB in order to use this functionality
	GetMultipartUploadLink(ctx context.Context, in *GetMultipartUploadLinkRequest, opts ...grpc.CallOption) (*GetMultipartUploadLinkResponse, error)
	//CompleteMultipartUploadRequest Finishes a multipart upload after all parts have been uploaded
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartUploadResponse, error)
}

type objectLoadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectLoadServiceClient(cc grpc.ClientConnInterface) ObjectLoadServiceClient {
	return &objectLoadServiceClient{cc}
}

func (c *objectLoadServiceClient) CreateUploadLink(ctx context.Context, in *CreateUploadLinkRequest, opts ...grpc.CallOption) (*CreateUploadLinkResponse, error) {
	out := new(CreateUploadLinkResponse)
	err := c.cc.Invoke(ctx, "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CreateUploadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectLoadServiceClient) CreateDownloadLink(ctx context.Context, in *CreateDownloadLinkRequest, opts ...grpc.CallOption) (*CreateDownloadLinkResponse, error) {
	out := new(CreateDownloadLinkResponse)
	err := c.cc.Invoke(ctx, "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CreateDownloadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectLoadServiceClient) CreateDownloadLinkBatch(ctx context.Context, in *CreateDownloadLinkBatchRequest, opts ...grpc.CallOption) (*CreateDownloadLinkBatchResponse, error) {
	out := new(CreateDownloadLinkBatchResponse)
	err := c.cc.Invoke(ctx, "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CreateDownloadLinkBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectLoadServiceClient) CreateDownloadLinkStream(ctx context.Context, in *CreateDownloadLinkStreamRequest, opts ...grpc.CallOption) (ObjectLoadService_CreateDownloadLinkStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectLoadService_ServiceDesc.Streams[0], "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CreateDownloadLinkStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &objectLoadServiceCreateDownloadLinkStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectLoadService_CreateDownloadLinkStreamClient interface {
	Recv() (*CreateDownloadLinkStreamResponse, error)
	grpc.ClientStream
}

type objectLoadServiceCreateDownloadLinkStreamClient struct {
	grpc.ClientStream
}

func (x *objectLoadServiceCreateDownloadLinkStreamClient) Recv() (*CreateDownloadLinkStreamResponse, error) {
	m := new(CreateDownloadLinkStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectLoadServiceClient) StartMultipartUpload(ctx context.Context, in *StartMultipartUploadRequest, opts ...grpc.CallOption) (*StartMultipartUploadResponse, error) {
	out := new(StartMultipartUploadResponse)
	err := c.cc.Invoke(ctx, "/sciobjsdb.api.storage.services.v1.ObjectLoadService/StartMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectLoadServiceClient) GetMultipartUploadLink(ctx context.Context, in *GetMultipartUploadLinkRequest, opts ...grpc.CallOption) (*GetMultipartUploadLinkResponse, error) {
	out := new(GetMultipartUploadLinkResponse)
	err := c.cc.Invoke(ctx, "/sciobjsdb.api.storage.services.v1.ObjectLoadService/GetMultipartUploadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectLoadServiceClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartUploadResponse, error) {
	out := new(CompleteMultipartUploadResponse)
	err := c.cc.Invoke(ctx, "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CompleteMultipartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectLoadServiceServer is the server API for ObjectLoadService service.
// All implementations should embed UnimplementedObjectLoadServiceServer
// for forward compatibility
type ObjectLoadServiceServer interface {
	// Creates an upload link for an object to upload the actual data object
	// Returns a presigned https PUT request
	// Can only be used to upload objects < 4GB
	CreateUploadLink(context.Context, *CreateUploadLinkRequest) (*CreateUploadLinkResponse, error)
	// Creates a download link for an object
	// Returns a presigned https GET request
	CreateDownloadLink(context.Context, *CreateDownloadLinkRequest) (*CreateDownloadLinkResponse, error)
	// Creates links for multiple objects at once
	// The order of the requested objects is preserved in the response
	CreateDownloadLinkBatch(context.Context, *CreateDownloadLinkBatchRequest) (*CreateDownloadLinkBatchResponse, error)
	// Creates a stream of objects and presigned links based on the provided query
	// This can be used retrieve a large number of ObjectGroups as a stream that would otherwise cause issues with the connection
	CreateDownloadLinkStream(*CreateDownloadLinkStreamRequest, ObjectLoadService_CreateDownloadLinkStreamServer) error
	// Initiates a multipart upload for an object
	// This is intended to be used for larger objects
	// For further information please read the Amazon S3 documentation on multipart uploads
	// Has to be used together with GetMultipartUploadLink and CompleteMultipartUpload
	StartMultipartUpload(context.Context, *StartMultipartUploadRequest) (*StartMultipartUploadResponse, error)
	// Returns a part of an multipart upload.
	// Each but the last part needs to be bigger than 5MB in order to use this functionality
	GetMultipartUploadLink(context.Context, *GetMultipartUploadLinkRequest) (*GetMultipartUploadLinkResponse, error)
	//CompleteMultipartUploadRequest Finishes a multipart upload after all parts have been uploaded
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*CompleteMultipartUploadResponse, error)
}

// UnimplementedObjectLoadServiceServer should be embedded to have forward compatible implementations.
type UnimplementedObjectLoadServiceServer struct {
}

func (UnimplementedObjectLoadServiceServer) CreateUploadLink(context.Context, *CreateUploadLinkRequest) (*CreateUploadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadLink not implemented")
}
func (UnimplementedObjectLoadServiceServer) CreateDownloadLink(context.Context, *CreateDownloadLinkRequest) (*CreateDownloadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadLink not implemented")
}
func (UnimplementedObjectLoadServiceServer) CreateDownloadLinkBatch(context.Context, *CreateDownloadLinkBatchRequest) (*CreateDownloadLinkBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadLinkBatch not implemented")
}
func (UnimplementedObjectLoadServiceServer) CreateDownloadLinkStream(*CreateDownloadLinkStreamRequest, ObjectLoadService_CreateDownloadLinkStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateDownloadLinkStream not implemented")
}
func (UnimplementedObjectLoadServiceServer) StartMultipartUpload(context.Context, *StartMultipartUploadRequest) (*StartMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMultipartUpload not implemented")
}
func (UnimplementedObjectLoadServiceServer) GetMultipartUploadLink(context.Context, *GetMultipartUploadLinkRequest) (*GetMultipartUploadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultipartUploadLink not implemented")
}
func (UnimplementedObjectLoadServiceServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*CompleteMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}

// UnsafeObjectLoadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectLoadServiceServer will
// result in compilation errors.
type UnsafeObjectLoadServiceServer interface {
	mustEmbedUnimplementedObjectLoadServiceServer()
}

func RegisterObjectLoadServiceServer(s grpc.ServiceRegistrar, srv ObjectLoadServiceServer) {
	s.RegisterService(&ObjectLoadService_ServiceDesc, srv)
}

func _ObjectLoadService_CreateUploadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServiceServer).CreateUploadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CreateUploadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServiceServer).CreateUploadLink(ctx, req.(*CreateUploadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectLoadService_CreateDownloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServiceServer).CreateDownloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CreateDownloadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServiceServer).CreateDownloadLink(ctx, req.(*CreateDownloadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectLoadService_CreateDownloadLinkBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadLinkBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServiceServer).CreateDownloadLinkBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CreateDownloadLinkBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServiceServer).CreateDownloadLinkBatch(ctx, req.(*CreateDownloadLinkBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectLoadService_CreateDownloadLinkStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateDownloadLinkStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectLoadServiceServer).CreateDownloadLinkStream(m, &objectLoadServiceCreateDownloadLinkStreamServer{stream})
}

type ObjectLoadService_CreateDownloadLinkStreamServer interface {
	Send(*CreateDownloadLinkStreamResponse) error
	grpc.ServerStream
}

type objectLoadServiceCreateDownloadLinkStreamServer struct {
	grpc.ServerStream
}

func (x *objectLoadServiceCreateDownloadLinkStreamServer) Send(m *CreateDownloadLinkStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectLoadService_StartMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServiceServer).StartMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sciobjsdb.api.storage.services.v1.ObjectLoadService/StartMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServiceServer).StartMultipartUpload(ctx, req.(*StartMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectLoadService_GetMultipartUploadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultipartUploadLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServiceServer).GetMultipartUploadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sciobjsdb.api.storage.services.v1.ObjectLoadService/GetMultipartUploadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServiceServer).GetMultipartUploadLink(ctx, req.(*GetMultipartUploadLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectLoadService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sciobjsdb.api.storage.services.v1.ObjectLoadService/CompleteMultipartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServiceServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectLoadService_ServiceDesc is the grpc.ServiceDesc for ObjectLoadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectLoadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sciobjsdb.api.storage.services.v1.ObjectLoadService",
	HandlerType: (*ObjectLoadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUploadLink",
			Handler:    _ObjectLoadService_CreateUploadLink_Handler,
		},
		{
			MethodName: "CreateDownloadLink",
			Handler:    _ObjectLoadService_CreateDownloadLink_Handler,
		},
		{
			MethodName: "CreateDownloadLinkBatch",
			Handler:    _ObjectLoadService_CreateDownloadLinkBatch_Handler,
		},
		{
			MethodName: "StartMultipartUpload",
			Handler:    _ObjectLoadService_StartMultipartUpload_Handler,
		},
		{
			MethodName: "GetMultipartUploadLink",
			Handler:    _ObjectLoadService_GetMultipartUploadLink_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _ObjectLoadService_CompleteMultipartUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateDownloadLinkStream",
			Handler:       _ObjectLoadService_CreateDownloadLinkStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sciobjsdb/api/storage/services/v1/object_load.proto",
}
