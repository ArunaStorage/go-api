// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	models "github.com/ScienceObjectsDB/go-api/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ObjectLoadClient is the client API for ObjectLoad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectLoadClient interface {
	CreateUploadLink(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*CreateUploadLinkResponse, error)
	CreateDownloadLink(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*CreateUploadLinkResponse, error)
}

type objectLoadClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectLoadClient(cc grpc.ClientConnInterface) ObjectLoadClient {
	return &objectLoadClient{cc}
}

func (c *objectLoadClient) CreateUploadLink(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*CreateUploadLinkResponse, error) {
	out := new(CreateUploadLinkResponse)
	err := c.cc.Invoke(ctx, "/ObjectLoad/CreateUploadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectLoadClient) CreateDownloadLink(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*CreateUploadLinkResponse, error) {
	out := new(CreateUploadLinkResponse)
	err := c.cc.Invoke(ctx, "/ObjectLoad/CreateDownloadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectLoadServer is the server API for ObjectLoad service.
// All implementations must embed UnimplementedObjectLoadServer
// for forward compatibility
type ObjectLoadServer interface {
	CreateUploadLink(context.Context, *models.ID) (*CreateUploadLinkResponse, error)
	CreateDownloadLink(context.Context, *models.ID) (*CreateUploadLinkResponse, error)
	mustEmbedUnimplementedObjectLoadServer()
}

// UnimplementedObjectLoadServer must be embedded to have forward compatible implementations.
type UnimplementedObjectLoadServer struct {
}

func (UnimplementedObjectLoadServer) CreateUploadLink(context.Context, *models.ID) (*CreateUploadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadLink not implemented")
}
func (UnimplementedObjectLoadServer) CreateDownloadLink(context.Context, *models.ID) (*CreateUploadLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadLink not implemented")
}
func (UnimplementedObjectLoadServer) mustEmbedUnimplementedObjectLoadServer() {}

// UnsafeObjectLoadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectLoadServer will
// result in compilation errors.
type UnsafeObjectLoadServer interface {
	mustEmbedUnimplementedObjectLoadServer()
}

func RegisterObjectLoadServer(s grpc.ServiceRegistrar, srv ObjectLoadServer) {
	s.RegisterService(&_ObjectLoad_serviceDesc, srv)
}

func _ObjectLoad_CreateUploadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServer).CreateUploadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectLoad/CreateUploadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServer).CreateUploadLink(ctx, req.(*models.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectLoad_CreateDownloadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectLoadServer).CreateDownloadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ObjectLoad/CreateDownloadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectLoadServer).CreateDownloadLink(ctx, req.(*models.ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ObjectLoad_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ObjectLoad",
	HandlerType: (*ObjectLoadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUploadLink",
			Handler:    _ObjectLoad_CreateUploadLink_Handler,
		},
		{
			MethodName: "CreateDownloadLink",
			Handler:    _ObjectLoad_CreateDownloadLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/ObjectLoad.proto",
}
