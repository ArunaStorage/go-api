// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	models "github.com/ScienceObjectsDB/go-api/models"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetObjectsServiceClient is the client API for DatasetObjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetObjectsServiceClient interface {
	//CreateObjectGroup Creates a new object group
	CreateObjectGroupWithVersion(ctx context.Context, in *CreateObjectGroupWithVersionRequest, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error)
	//CreateObjectGroupVersion Creates a new object group version
	AddVersionToObjectGroup(ctx context.Context, in *AddVersionToObjectGroupRequest, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error)
	//GetObjectGroup Returns the object group with the given ID
	GetObjectGroup(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error)
	//GetObjectGroupCurrentVersion Returns the head version in the history of a given object group
	GetCurrentObjectGroup(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error)
	GetObjectGroupVersion(ctx context.Context, in *GetObjectGroupVersionRequest, opts ...grpc.CallOption) (*models.ObjectGroupVersion, error)
	GetObjectGroupVersions(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*GetObjectGroupVersionsResponse, error)
	//FinishObjectUpload Finishes the upload process for an object
	FinishObjectUpload(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*models.Empty, error)
}

type datasetObjectsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetObjectsServiceClient(cc grpc.ClientConnInterface) DatasetObjectsServiceClient {
	return &datasetObjectsServiceClient{cc}
}

func (c *datasetObjectsServiceClient) CreateObjectGroupWithVersion(ctx context.Context, in *CreateObjectGroupWithVersionRequest, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error) {
	out := new(GetObjectGroupVersionResponse)
	err := c.cc.Invoke(ctx, "/services.DatasetObjectsService/CreateObjectGroupWithVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetObjectsServiceClient) AddVersionToObjectGroup(ctx context.Context, in *AddVersionToObjectGroupRequest, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error) {
	out := new(GetObjectGroupVersionResponse)
	err := c.cc.Invoke(ctx, "/services.DatasetObjectsService/AddVersionToObjectGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetObjectsServiceClient) GetObjectGroup(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error) {
	out := new(GetObjectGroupVersionResponse)
	err := c.cc.Invoke(ctx, "/services.DatasetObjectsService/GetObjectGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetObjectsServiceClient) GetCurrentObjectGroup(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*GetObjectGroupVersionResponse, error) {
	out := new(GetObjectGroupVersionResponse)
	err := c.cc.Invoke(ctx, "/services.DatasetObjectsService/GetCurrentObjectGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetObjectsServiceClient) GetObjectGroupVersion(ctx context.Context, in *GetObjectGroupVersionRequest, opts ...grpc.CallOption) (*models.ObjectGroupVersion, error) {
	out := new(models.ObjectGroupVersion)
	err := c.cc.Invoke(ctx, "/services.DatasetObjectsService/GetObjectGroupVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetObjectsServiceClient) GetObjectGroupVersions(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*GetObjectGroupVersionsResponse, error) {
	out := new(GetObjectGroupVersionsResponse)
	err := c.cc.Invoke(ctx, "/services.DatasetObjectsService/GetObjectGroupVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetObjectsServiceClient) FinishObjectUpload(ctx context.Context, in *models.ID, opts ...grpc.CallOption) (*models.Empty, error) {
	out := new(models.Empty)
	err := c.cc.Invoke(ctx, "/services.DatasetObjectsService/FinishObjectUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetObjectsServiceServer is the server API for DatasetObjectsService service.
// All implementations must embed UnimplementedDatasetObjectsServiceServer
// for forward compatibility
type DatasetObjectsServiceServer interface {
	//CreateObjectGroup Creates a new object group
	CreateObjectGroupWithVersion(context.Context, *CreateObjectGroupWithVersionRequest) (*GetObjectGroupVersionResponse, error)
	//CreateObjectGroupVersion Creates a new object group version
	AddVersionToObjectGroup(context.Context, *AddVersionToObjectGroupRequest) (*GetObjectGroupVersionResponse, error)
	//GetObjectGroup Returns the object group with the given ID
	GetObjectGroup(context.Context, *models.ID) (*GetObjectGroupVersionResponse, error)
	//GetObjectGroupCurrentVersion Returns the head version in the history of a given object group
	GetCurrentObjectGroup(context.Context, *models.ID) (*GetObjectGroupVersionResponse, error)
	GetObjectGroupVersion(context.Context, *GetObjectGroupVersionRequest) (*models.ObjectGroupVersion, error)
	GetObjectGroupVersions(context.Context, *models.ID) (*GetObjectGroupVersionsResponse, error)
	//FinishObjectUpload Finishes the upload process for an object
	FinishObjectUpload(context.Context, *models.ID) (*models.Empty, error)
	mustEmbedUnimplementedDatasetObjectsServiceServer()
}

// UnimplementedDatasetObjectsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetObjectsServiceServer struct {
}

func (UnimplementedDatasetObjectsServiceServer) CreateObjectGroupWithVersion(context.Context, *CreateObjectGroupWithVersionRequest) (*GetObjectGroupVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectGroupWithVersion not implemented")
}
func (UnimplementedDatasetObjectsServiceServer) AddVersionToObjectGroup(context.Context, *AddVersionToObjectGroupRequest) (*GetObjectGroupVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVersionToObjectGroup not implemented")
}
func (UnimplementedDatasetObjectsServiceServer) GetObjectGroup(context.Context, *models.ID) (*GetObjectGroupVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectGroup not implemented")
}
func (UnimplementedDatasetObjectsServiceServer) GetCurrentObjectGroup(context.Context, *models.ID) (*GetObjectGroupVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentObjectGroup not implemented")
}
func (UnimplementedDatasetObjectsServiceServer) GetObjectGroupVersion(context.Context, *GetObjectGroupVersionRequest) (*models.ObjectGroupVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectGroupVersion not implemented")
}
func (UnimplementedDatasetObjectsServiceServer) GetObjectGroupVersions(context.Context, *models.ID) (*GetObjectGroupVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectGroupVersions not implemented")
}
func (UnimplementedDatasetObjectsServiceServer) FinishObjectUpload(context.Context, *models.ID) (*models.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishObjectUpload not implemented")
}
func (UnimplementedDatasetObjectsServiceServer) mustEmbedUnimplementedDatasetObjectsServiceServer() {}

// UnsafeDatasetObjectsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetObjectsServiceServer will
// result in compilation errors.
type UnsafeDatasetObjectsServiceServer interface {
	mustEmbedUnimplementedDatasetObjectsServiceServer()
}

func RegisterDatasetObjectsServiceServer(s grpc.ServiceRegistrar, srv DatasetObjectsServiceServer) {
	s.RegisterService(&DatasetObjectsService_ServiceDesc, srv)
}

func _DatasetObjectsService_CreateObjectGroupWithVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectGroupWithVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetObjectsServiceServer).CreateObjectGroupWithVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DatasetObjectsService/CreateObjectGroupWithVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetObjectsServiceServer).CreateObjectGroupWithVersion(ctx, req.(*CreateObjectGroupWithVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetObjectsService_AddVersionToObjectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVersionToObjectGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetObjectsServiceServer).AddVersionToObjectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DatasetObjectsService/AddVersionToObjectGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetObjectsServiceServer).AddVersionToObjectGroup(ctx, req.(*AddVersionToObjectGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetObjectsService_GetObjectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetObjectsServiceServer).GetObjectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DatasetObjectsService/GetObjectGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetObjectsServiceServer).GetObjectGroup(ctx, req.(*models.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetObjectsService_GetCurrentObjectGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetObjectsServiceServer).GetCurrentObjectGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DatasetObjectsService/GetCurrentObjectGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetObjectsServiceServer).GetCurrentObjectGroup(ctx, req.(*models.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetObjectsService_GetObjectGroupVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectGroupVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetObjectsServiceServer).GetObjectGroupVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DatasetObjectsService/GetObjectGroupVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetObjectsServiceServer).GetObjectGroupVersion(ctx, req.(*GetObjectGroupVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetObjectsService_GetObjectGroupVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetObjectsServiceServer).GetObjectGroupVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DatasetObjectsService/GetObjectGroupVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetObjectsServiceServer).GetObjectGroupVersions(ctx, req.(*models.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetObjectsService_FinishObjectUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(models.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetObjectsServiceServer).FinishObjectUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DatasetObjectsService/FinishObjectUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetObjectsServiceServer).FinishObjectUpload(ctx, req.(*models.ID))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetObjectsService_ServiceDesc is the grpc.ServiceDesc for DatasetObjectsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetObjectsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.DatasetObjectsService",
	HandlerType: (*DatasetObjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObjectGroupWithVersion",
			Handler:    _DatasetObjectsService_CreateObjectGroupWithVersion_Handler,
		},
		{
			MethodName: "AddVersionToObjectGroup",
			Handler:    _DatasetObjectsService_AddVersionToObjectGroup_Handler,
		},
		{
			MethodName: "GetObjectGroup",
			Handler:    _DatasetObjectsService_GetObjectGroup_Handler,
		},
		{
			MethodName: "GetCurrentObjectGroup",
			Handler:    _DatasetObjectsService_GetCurrentObjectGroup_Handler,
		},
		{
			MethodName: "GetObjectGroupVersion",
			Handler:    _DatasetObjectsService_GetObjectGroupVersion_Handler,
		},
		{
			MethodName: "GetObjectGroupVersions",
			Handler:    _DatasetObjectsService_GetObjectGroupVersions_Handler,
		},
		{
			MethodName: "FinishObjectUpload",
			Handler:    _DatasetObjectsService_FinishObjectUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/DatasetObjectService.proto",
}
